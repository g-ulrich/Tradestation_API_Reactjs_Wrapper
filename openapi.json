{
  "openapi": "3.0.3",
  "info": {
    "title": "",
    "description": "# Authentication\nFor more information on authorization and gaining an access/refresh token, please visit: [Authentication](/docs/fundamentals/authentication/auth-overview).\n<SecurityDefinitions />\n",
    "version": "",
    "termsOfService": "http://elasticbeanstalk-us-east-1-525856068889.s3.amazonaws.com/wp-content/uploads/2014/03/Guidelines_For_Acceptance.pdf",
    "contact": {
      "name": "TradeStation API Team",
      "email": "ClientServices@tradestation.com",
      "url": "https://developer.tradestation.com/webapi"
    },
    "license": {
      "name": "Services Agreement For Application Developers",
      "url": "https://s3.amazonaws.com/elasticbeanstalk-us-east-1-525856068889/wp-content/uploads/2016/02/Agreement-for-WebAPI-Developers_v5C.pdf"
    }
  },
  "servers": [
    {
      "url": "https://api.tradestation.com"
    }
  ],
  "security": [
    {
      "Bearer-Token": []
    }
  ],
  "tags": [
    {
      "name": "marketdata",
      "description": "Snapshots and live streams of market data from supported exchanges.\n"
    }
  ],
  "paths": {
    "/v2/data/symbols/suggest/{text}": {
      "get": {
        "summary": "Suggest Symbols\n",
        "description": "Suggests symbols semantically based upon partial input of symbol name,\ncompany name, or description. Does not return Options symbols.\n",
        "operationId": "suggestsymbols",
        "tags": [
          "marketdata"
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v2/data/symbols/suggest/{text}' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v2/data/symbols/suggest/{text}',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v2/data/symbols/suggest/{text}\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v2/data/symbols/suggest/{text}\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ],
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "The top number of results to return.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "An OData filter to apply to the results. Supports the `eq` and `neq` filter opeators. E.g. `AAP?$filter=Category%20neq%20%27Stock%27`.\nValid values are: `Category` (`Stock`, `Index`, `Future`, `Forex`), `Country` (E.g. `United States`, `GB`) `Currency` (E.g. `USD`, `AUD`),\nand `Exchange` (E.g. `NYSE`).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "text",
            "in": "path",
            "description": "Symbol text for suggestion. Partial input of a symbol name, company name, or description.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Symbol Suggest",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/SymbolSuggestDefinition"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/data/symbols/search/{criteria}": {
      "get": {
        "summary": "Search for Symbols\n",
        "description": "Searches symbols based upon input criteria including Name, Category and\nCountry.\n",
        "operationId": "searchSymbols",
        "tags": [
          "marketdata"
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v2/data/symbols/search/{criteria}' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v2/data/symbols/search/{criteria}',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v2/data/symbols/search/{criteria}\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v2/data/symbols/search/{criteria}\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ],
        "parameters": [
          {
            "name": "criteria",
            "in": "path",
            "description": "Criteria are represented as Key/value pairs (`&` separated):\n\n`N`: Name of Symbol. (Optional)\n\n`C`: Asset categories. (Optional) Possible values:\n  - `Future` or `FU`\n  - `FutureOption` or `FO`\n  - `Stock` or `S` (Default)\n  - `StockOption` or `SO` (If root is specified, default category)\n  - `Index` or `IDX`\n  - `CurrencyOption` or `CO`\n  - `MutualFund` or `MF`\n  - `MoneyMarketFund` or `MMF`\n  - `IndexOption` or `IO`\n  - `Bond` or `B`\n  - `Forex` or `FX`\n\n`Cnt`: Country where the symbol is traded in. (Optional) Possible values:\n  - `ALL` if not specified (Default)\n  - `US`\n  - `DE`\n  - `CA`\n\n#### For Equities Lookups:\n\n`N`: partial/full symbol name, will return all symbols that contain the provided name value\n\n`Desc`: Name of the company\n\n`Flg`: indicates whether symbols no longer trading should be included in the results returned. (Optional) This criteria is not returned in the symbol data. Possible values:\n  - `true`\n  - `false` (Default)\n\n`Cnt`: Country where the symbol is traded in. (Optional) Possible values:\n  - `ALL` if not specified (Default)\n  - `US`\n  - `DE`\n  - `CA`\n\n#### For Options Lookups:\n(Category=StockOption, IndexOption, FutureOption or CurrencyOption)\n\n`R`: Symbol root. Required field, the symbol the option is a derivative of, this search will not return options based on a partial root.\n\n`Stk`: Number of strikes prices above and below the underlying price\n  - Default value 3\n\n`Spl`: Strike price low\n\n`Sph`: Strike price high\n\n`Exd`: Number of expiration dates.\n  - Default value 3\n\n`Edl`: Expiration date low, ex: 01-05-2011\n\n`Edh`: Expiration date high, ex: 01-20-2011\n\n`OT`: Option type. Possible values:\n  - `Both` (Default)\n  - `Call`\n  - `Put`\n\n`FT`: Future type for FutureOptions. Possible values:\n  - `Electronic` (Default)\n  - `Pit`\n\n`ST`: Symbol type: Possible values:\n  - `Both`\n  - `Composite` (Default)\n  - `Regional`\n\n#### For Futures Lookups:\n(Category = Future)\n\n`Desc`: Description of symbol traded\n\n`R`: Symbol root future trades\n\n`FT`: Futures type. Possible values:\n  - `None`\n  - `PIT`\n  - `Electronic` (Default)\n  - `Combined`\n\n`Cur`: Currency. Possible values:\n  - `All`\n  - `USD` (Default)\n  - `AUD`\n  - `CAD`\n  - `CHF`\n  - `DKK`\n  - `EUR`\n  - `DBP`\n  - `HKD`\n  - `JPY`\n  - `NOK`\n  - `NZD`\n  - `SEK`\n  - `SGD`\n\n`Exp`: whether to include expired contracts\n  - `false` (Default)\n  - `true`\n\n`Cnt`: Country where the symbol is traded in. (Optional) Possible values:\n  - `ALL` if not specified (Default)\n  - `US`\n  - `DE`\n  - `CA`\n\n#### For Forex Lookups:\n\n`N`: partial/full symbol name. Use all or null for a list of all forex symbols\n\n`Desc`: Description\n\nNote:\n  - The exchange returned for all forex searches will be `FX`\n  - The country returned for all forex searches will be `FOREX`\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Symbol Search Response",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/SymbolSearchDefinition"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Symbol Not Found",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v2/stream/tickbars/{symbol}/{interval}/{barsBack}": {
      "get": {
        "summary": "Stream Tick Bars\n",
        "description": "Streams tick bars data for the regular session from a number of bars back, each bar returned separated by interval number of ticks.\n",
        "operationId": "streamTickBars",
        "tags": [
          "marketdata"
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v2/stream/tickbars/{symbol}/{interval}/{barsBack}' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v2/stream/tickbars/{symbol}/{interval}/{barsBack}',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options).on('data', function (data) {\n  console.log(data.toString());\n}).on('error', function(err) {\n  console.error(err)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v2/stream/tickbars/{symbol}/{interval}/{barsBack}\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, stream=True)\n\nfor line in response.iter_lines():\n    if line:\n        print(line)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v2/stream/tickbars/{symbol}/{interval}/{barsBack}\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead))\n{\n    response.EnsureSuccessStatusCode();\n    using (var stream = await response.Content.ReadAsStreamAsync())\n    {\n        using (StreamReader reader = new StreamReader(stream))\n        {\n            while (!reader.EndOfStream)\n            {\n                var line = await reader.ReadLineAsync();\n                if (line == null) break;\n                Console.WriteLine(line);\n            }\n        }\n    }\n}"
          }
        ],
        "parameters": [
          {
            "name": "symbol",
            "in": "path",
            "description": "A Symbol Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "interval",
            "in": "path",
            "description": "Interval for each bar returned (in ticks).",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 64999
            }
          },
          {
            "name": "barsBack",
            "in": "path",
            "description": "The number of bars to stream, going back from current time.",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tickbar Response",
            "content": {
              "application/vnd.tradestation.streams+json": {
                "schema": {
                  "$ref": "#/components/schemas/TickbarDefinition"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/vnd.tradestation.streams+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/vnd.tradestation.streams+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/vnd.tradestation.streams+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Symbol Not Found",
            "content": {
              "application/vnd.tradestation.streams+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "content": {
              "application/vnd.tradestation.streams+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway",
            "content": {
              "application/vnd.tradestation.streams+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout",
            "content": {
              "application/vnd.tradestation.streams+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v3/brokerage/accounts": {
      "get": {
        "tags": [
          "Brokerage"
        ],
        "description": "Fetches the list of Brokerage Accounts available for the current user.",
        "operationId": "GetAccounts",
        "summary": "Get Accounts",
        "responses": {
          "200": {
            "description": "Accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accounts"
                },
                "example": {
                  "Accounts": [
                    {
                      "AccountID": "123456789",
                      "Currency": "USD",
                      "Status": "Active",
                      "AccountType": "Cash",
                      "AccountDetail": {
                        "IsStockLocateEligible": false,
                        "EnrolledInRegTProgram": false,
                        "RequiresBuyingPowerWarning": false,
                        "CryptoEnabled": true,
                        "DayTradingQualified": true,
                        "OptionApprovalLevel": 0,
                        "PatternDayTrader": false
                      }
                    },
                    {
                      "AccountID": "123456782",
                      "Currency": "USD",
                      "Status": "Active",
                      "AccountType": "Margin",
                      "AccountDetail": {
                        "IsStockLocateEligible": false,
                        "EnrolledInRegTProgram": true,
                        "RequiresBuyingPowerWarning": true,
                        "CryptoEnabled": false,
                        "DayTradingQualified": true,
                        "OptionApprovalLevel": 1,
                        "PatternDayTrader": false
                      }
                    },
                    {
                      "AccountID": "123456789C",
                      "Currency": "USD",
                      "Status": "Active",
                      "AccountType": "Crypto"
                    },
                    {
                      "AccountID": "123456781",
                      "Currency": "USD",
                      "Status": "Active",
                      "AccountType": "Futures"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/brokerage/accounts' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/brokerage/accounts',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/brokerage/accounts\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/brokerage/accounts\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/brokerage/accounts/{accounts}/balances": {
      "get": {
        "tags": [
          "Brokerage"
        ],
        "description": "Fetches the brokerage account `Balances` for one or more given accounts. Request valid for `Cash`, `Margin`, `Futures`, and `DVP` account types.",
        "operationId": "GetBalances",
        "summary": "Get Balances",
        "parameters": [
          {
            "name": "accounts",
            "in": "path",
            "description": "List of valid Account IDs for the authenticated user in comma separated format; for example `\"61999124,68910124\"`. 1 to 25 Account IDs can be specified, comma separated. Recommended batch size is 10.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "61999124,68910124"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Balances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Balances"
                },
                "example": {
                  "Balances": [
                    {
                      "AccountID": "123456789",
                      "AccountType": "Cash",
                      "CashBalance": "987654319787",
                      "BuyingPower": "987654319786.82",
                      "Equity": "987654321539.0976",
                      "MarketValue": "1751.625",
                      "TodaysProfitLoss": "4.9376",
                      "UnclearedDeposit": "0",
                      "BalanceDetail": {
                        "CostOfPositions": "1471.98",
                        "DayTrades": "0",
                        "MaintenanceRate": "67096993251.19",
                        "OptionBuyingPower": "987654319787",
                        "OptionsMarketValue": "0",
                        "OvernightBuyingPower": "987654319786.82",
                        "RequiredMargin": "2371.98",
                        "RealizedProfitLoss": "0",
                        "UnrealizedProfitLoss": "-620.355"
                      },
                      "Commission": "0"
                    },
                    {
                      "AccountID": "123456782",
                      "AccountType": "Margin",
                      "CashBalance": "39735538.661",
                      "BuyingPower": "39735498.661",
                      "Equity": "39893233.6211",
                      "MarketValue": "157727.6092",
                      "TodaysProfitLoss": "982.8001",
                      "UnclearedDeposit": "0",
                      "BalanceDetail": {
                        "CostOfPositions": "134589.21",
                        "DayTrades": "0",
                        "MaintenanceRate": "29720.06",
                        "OptionBuyingPower": "39735538.661",
                        "OptionsMarketValue": "0",
                        "OvernightBuyingPower": "39735458.661",
                        "RequiredMargin": "134589.21",
                        "RealizedProfitLoss": "0",
                        "UnrealizedProfitLoss": "23138.3992000534"
                      },
                      "Commission": "0"
                    },
                    {
                      "AccountID": "123456781",
                      "AccountType": "Futures",
                      "CashBalance": "123456784.32",
                      "BuyingPower": "123455574.320001",
                      "Equity": "123456184.320001",
                      "MarketValue": "996750",
                      "TodaysProfitLoss": "-549.999999",
                      "UnclearedDeposit": "0",
                      "BalanceDetail": {
                        "DayTradeExcess": "123455574.320001",
                        "RealizedProfitLoss": "0",
                        "UnrealizedProfitLoss": "-599.999999",
                        "DayTradeOpenOrderMargin": "0",
                        "OpenOrderMargin": "0",
                        "DayTradeMargin": "660",
                        "InitialMargin": "660",
                        "MaintenanceMargin": "600",
                        "TradeEquity": "-549.999999",
                        "SecurityOnDeposit": "0",
                        "TodayRealTimeTradeEquity": "-599.999999"
                      },
                      "CurrencyDetails": [
                        {
                          "Currency": "USD",
                          "Commission": "0",
                          "CashBalance": "123456784.32",
                          "RealizedProfitLoss": "0",
                          "UnrealizedProfitLoss": "-599.999999",
                          "InitialMargin": "660",
                          "MaintenanceMargin": "600",
                          "AccountConversionRate": "1"
                        }
                      ],
                      "Commission": "0"
                    }
                  ],
                  "Errors": [
                    {
                      "AccountID": "123456789C",
                      "Error": "Forbidden",
                      "Message": "Request not supported for account type."
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/balances' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/balances',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/balances\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/balances\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/brokerage/accounts/{accounts}/bodbalances": {
      "get": {
        "tags": [
          "Brokerage"
        ],
        "description": "Fetches the Beginning of Day Balances for the given Accounts. Request valid for `Cash`, `Margin`, `Futures`, and  `DVP` account types.",
        "operationId": "GetBalancesBOD",
        "summary": "Get Balances BOD",
        "parameters": [
          {
            "name": "accounts",
            "in": "path",
            "description": "List of valid Account IDs for the authenticated user in comma separated format; for example `\"61999124,68910124\"`. 1 to 25 Account IDs can be specified, comma separated. Recommended batch size is 10.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "61999124,68910124"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BalancesBOD",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalancesBOD"
                },
                "example": {
                  "BODBalances": [
                    {
                      "AccountID": "123456789",
                      "AccountType": "Cash",
                      "BalanceDetail": {
                        "AccountBalance": "987654321258.98",
                        "CashAvailableToWithdraw": "987654321258.98",
                        "DayTradingMarginableBuyingPower": "987654321258.98",
                        "DayTrades": "0",
                        "Equity": "987654321258.98",
                        "NetCash": "987654321258.98",
                        "OptionBuyingPower": "987654321258.98",
                        "OptionValue": "0",
                        "OvernightBuyingPower": "987654321258.98"
                      }
                    },
                    {
                      "AccountID": "123456782",
                      "AccountType": "Margin",
                      "BalanceDetail": {
                        "AccountBalance": "40000000",
                        "CashAvailableToWithdraw": "40000000",
                        "DayTradingMarginableBuyingPower": "40000000",
                        "DayTrades": "0",
                        "Equity": "40000000",
                        "NetCash": "40000000",
                        "OptionBuyingPower": "40000000",
                        "OptionValue": "0",
                        "OvernightBuyingPower": "80000000"
                      }
                    },
                    {
                      "AccountID": "123456781",
                      "AccountType": "Futures",
                      "BalanceDetail": {
                        "Equity": "123456784.32",
                        "CashAvailableToWithdraw": "123456784.32",
                        "NetCash": "123456784.32",
                        "OpenTradeEquity": "0",
                        "SecurityOnDeposit": "0"
                      },
                      "CurrencyDetails": [
                        {
                          "Currency": "USD",
                          "CashBalance": "123456784.32",
                          "AccountOpenTradeEquity": "0",
                          "AccountSecurities": "0",
                          "OpenTradeEquity": "0",
                          "Securities": "0"
                        }
                      ]
                    }
                  ],
                  "Errors": [
                    {
                      "AccountID": "123456789C",
                      "Error": "Forbidden",
                      "Message": "Request not supported for account type."
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/bodbalances' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/bodbalances',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/bodbalances\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/bodbalances\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/brokerage/accounts/{accounts}/historicalorders": {
      "get": {
        "tags": [
          "Brokerage"
        ],
        "description": "Fetches Historical Orders for the given Accounts except open orders, sorted in descending order of time closed. Request valid for all account types.",
        "operationId": "GetHistoricalOrders",
        "summary": "Get Historical Orders",
        "parameters": [
          {
            "name": "accounts",
            "in": "path",
            "description": "List of valid Account IDs for the authenticated user in comma separated format; for example `\"61999124,68910124\"`. 1 to 25 Account IDs can be specified, comma separated. Recommended batch size is 10.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "61999124,68910124"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Historical orders since date. For example `\"2006-01-13\",\"01-13-2006\",\"2006/01/13\",\"01/13/2006\"`. Limited to 90 days prior to the current date.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2006-01-13"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of requests returned per page when paginating responses. If not provided, results will not be paginated and a maximum of 600 orders is returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 600,
              "minimum": 1,
              "default": 600,
              "maximum": 600
            }
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "An encrypted token with a lifetime of 1 hour for use with paginated order responses. This is returned with paginated results, and used in only the subsequent request which will return a new nextToken until there are fewer returned orders than the requested pageSize. If the number of returned orders equals the pageSize, and there are no additional orders, the nextToken will not be generated.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "eyJ0aW1lc3RhbXAiOjE2NT...NTMwMDB9"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoricalOrders"
                },
                "example": {
                  "Orders": [
                    {
                      "AccountID": "123456782",
                      "CommissionFee": "0",
                      "Currency": "USD",
                      "Duration": "GTC",
                      "GoodTillDate": "2021-05-25T00:00:00Z",
                      "Legs": [
                        {
                          "AssetType": "STOCK",
                          "BuyOrSell": "Buy",
                          "ExecQuantity": "0",
                          "ExecutionPrice": "112.28",
                          "ExpirationDate": "2021-05-25T00:00:00Z",
                          "OpenOrClose": "Open",
                          "OptionType": "CALL",
                          "QuantityOrdered": "10",
                          "QuantityRemaining": "10",
                          "StrikePrice": "350",
                          "Symbol": "MSFT",
                          "Underlying": "MSFT"
                        }
                      ],
                      "MarketActivationRules": [
                        {
                          "RuleType": "Price",
                          "Symbol": "EDZ22",
                          "Predicate": "gt",
                          "TriggerKey": "STTN",
                          "Price": "10000.01"
                        }
                      ],
                      "OrderID": "286234131",
                      "OpenedDateTime": "2021-02-24T15:47:45Z",
                      "OrderType": "Market",
                      "PriceUsedForBuyingPower": "230.46",
                      "Routing": "Intelligent",
                      "Status": "OPN",
                      "StatusDescription": "Sent",
                      "AdvancedOptions": "CND=EDZ22>10000.01(STTN);TIM=23:59:59;",
                      "TimeActivationRules": [
                        {
                          "TimeUtc": "0001-01-01T23:59:59Z"
                        }
                      ],
                      "UnbundledRouteFee": "0"
                    },
                    {
                      "AccountID": "123456782",
                      "CommissionFee": "0",
                      "ClosedDateTime": "2020-11-16T16:53:37Z",
                      "Currency": "USD",
                      "Duration": "GTC",
                      "FilledPrice": "216.68",
                      "GoodTillDate": "2021-02-14T00:00:00Z",
                      "Legs": [
                        {
                          "OpenOrClose": "Open",
                          "QuantityOrdered": "10",
                          "ExecQuantity": "10",
                          "QuantityRemaining": "0",
                          "BuyOrSell": "Buy",
                          "Symbol": "MSFT",
                          "AssetType": "STOCK"
                        }
                      ],
                      "OrderID": "123456789",
                      "OpenedDateTime": "2020-11-16T16:53:37Z",
                      "OrderType": "Market",
                      "PriceUsedForBuyingPower": "216.66",
                      "Routing": "Intelligent",
                      "Status": "FLL",
                      "StatusDescription": "Filled",
                      "UnbundledRouteFee": "0"
                    },
                    {
                      "AccountID": "123456782",
                      "CommissionFee": "0",
                      "ConditionalOrders": [
                        {
                          "Relationship": "OCO",
                          "OrderID": "286179864"
                        }
                      ],
                      "Currency": "USD",
                      "Duration": "GTC",
                      "GoodTillDate": "2021-02-15T00:00:00Z",
                      "GroupName": "OCO 2706452145",
                      "Legs": [
                        {
                          "OpenOrClose": "Close",
                          "QuantityOrdered": "10",
                          "ExecQuantity": "0",
                          "QuantityRemaining": "10",
                          "BuyOrSell": "Sell",
                          "Symbol": "MSFT",
                          "AssetType": "STOCK"
                        }
                      ],
                      "LimitPrice": "230",
                      "OrderID": "286179863",
                      "OpenedDateTime": "2020-11-17T16:34:37Z",
                      "OrderType": "Limit",
                      "PriceUsedForBuyingPower": "230",
                      "Routing": "Intelligent",
                      "Status": "ACK",
                      "StatusDescription": "Received",
                      "AdvancedOptions": "OCA=2706452145;",
                      "UnbundledRouteFee": "0"
                    },
                    {
                      "AccountID": "123456782",
                      "CommissionFee": "0",
                      "ConditionalOrders": [
                        {
                          "Relationship": "OCO",
                          "OrderID": "286179863"
                        }
                      ],
                      "Currency": "USD",
                      "Duration": "GTC",
                      "GoodTillDate": "2021-02-15T00:00:00Z",
                      "GroupName": "OCO 2706452145",
                      "Legs": [
                        {
                          "OpenOrClose": "Close",
                          "QuantityOrdered": "10",
                          "ExecQuantity": "0",
                          "QuantityRemaining": "10",
                          "BuyOrSell": "Sell",
                          "Symbol": "MSFT",
                          "AssetType": "STOCK"
                        }
                      ],
                      "OrderID": "286179864",
                      "OpenedDateTime": "2020-11-17T16:34:37Z",
                      "OrderType": "StopMarket",
                      "PriceUsedForBuyingPower": "215.06",
                      "Routing": "Intelligent",
                      "Status": "ACK",
                      "StatusDescription": "Received",
                      "StopPrice": "130",
                      "AdvancedOptions": "STPTRG=STT;OCA=2706452145;",
                      "UnbundledRouteFee": "0"
                    }
                  ],
                  "Errors": [],
                  "NextToken": "eyJ0aW1lc3RhbXAiOjE2NTY1NjI2MDQwMDEs>LTM3QzAtNEIxOS04OTU4LUExQ0YwQjYwRDM3NSIsImV4cGlyYXRpb25UaW1lc3RhbXAiOjE2NTY2OTM3NTMwMDB9"
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/historicalorders?since=2006-01-13' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/historicalorders',\n  qs: {since: '2006-01-13'},\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/historicalorders\"\n\nquerystring = {\"since\":\"2006-01-13\"}\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/historicalorders?since=2006-01-13\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/brokerage/accounts/{accounts}/historicalorders/{orderIds}": {
      "get": {
        "tags": [
          "Brokerage"
        ],
        "description": "Fetches Historical Orders for the given Accounts except open orders, filtered by given Order IDs prior to current date, sorted in descending order of time closed. Request valid for all account types.",
        "operationId": "GetHistoricalOrdersByOrderID",
        "summary": "Get Historical Orders By Order ID",
        "parameters": [
          {
            "name": "accounts",
            "in": "path",
            "description": "List of valid Account IDs for the authenticated user in comma separated format; for example `\"61999124,68910124\"`. 1 to 25 Account IDs can be specified, comma separated. Recommended batch size is 10.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "61999124,68910124"
            }
          },
          {
            "name": "orderIds",
            "in": "path",
            "description": "List of valid Order IDs for the authenticated user for given accounts in comma separated format; for example `\"123456789,6B29FC40-CA47-1067-B31D-00DD010662DA\"`. 1 to 50 Order IDs can be specified, comma separated. Note, crypto order ids could exceed the URL path with limit for 50 orders ids.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "123456789,6B29FC40-CA47-1067-B31D-00DD010662DA"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Historical orders since date. For example `\"2006-01-13\",\"01-13-2006\",\"2006/01/13\",\"01/13/2006\"`. Limited to 90 days prior to the current date.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2006-01-13"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistoricalOrdersById"
                },
                "example": {
                  "Orders": [
                    {
                      "AccountID": "123456782",
                      "CommissionFee": "0",
                      "Currency": "USD",
                      "Duration": "GTC",
                      "GoodTillDate": "2021-05-25T00:00:00Z",
                      "Legs": [
                        {
                          "AssetType": "STOCK",
                          "BuyOrSell": "Buy",
                          "ExecQuantity": "0",
                          "ExecutionPrice": "112.28",
                          "ExpirationDate": "2021-05-25T00:00:00Z",
                          "OpenOrClose": "Open",
                          "OptionType": "CALL",
                          "QuantityOrdered": "10",
                          "QuantityRemaining": "10",
                          "StrikePrice": "350",
                          "Symbol": "MSFT",
                          "Underlying": "MSFT"
                        }
                      ],
                      "MarketActivationRules": [
                        {
                          "RuleType": "Price",
                          "Symbol": "EDZ22",
                          "Predicate": "gt",
                          "TriggerKey": "STTN",
                          "Price": "10000.01"
                        }
                      ],
                      "OrderID": "286234131",
                      "OpenedDateTime": "2021-02-24T15:47:45Z",
                      "OrderType": "Market",
                      "PriceUsedForBuyingPower": "230.46",
                      "Routing": "Intelligent",
                      "Status": "OPN",
                      "StatusDescription": "Sent",
                      "AdvancedOptions": "CND=EDZ22>10000.01(STTN);TIM=23:59:59;",
                      "TimeActivationRules": [
                        {
                          "TimeUtc": "0001-01-01T23:59:59Z"
                        }
                      ],
                      "UnbundledRouteFee": "0"
                    },
                    {
                      "AccountID": "123456782",
                      "CommissionFee": "0",
                      "ClosedDateTime": "2020-11-16T16:53:37Z",
                      "Currency": "USD",
                      "Duration": "GTC",
                      "FilledPrice": "216.68",
                      "GoodTillDate": "2021-02-14T00:00:00Z",
                      "Legs": [
                        {
                          "OpenOrClose": "Open",
                          "QuantityOrdered": "10",
                          "ExecQuantity": "10",
                          "QuantityRemaining": "0",
                          "BuyOrSell": "Buy",
                          "Symbol": "MSFT",
                          "AssetType": "STOCK"
                        }
                      ],
                      "OrderID": "123456789",
                      "OpenedDateTime": "2020-11-16T16:53:37Z",
                      "OrderType": "Market",
                      "PriceUsedForBuyingPower": "216.66",
                      "Routing": "Intelligent",
                      "Status": "FLL",
                      "StatusDescription": "Filled",
                      "UnbundledRouteFee": "0"
                    },
                    {
                      "AccountID": "123456782",
                      "CommissionFee": "0",
                      "ConditionalOrders": [
                        {
                          "Relationship": "OCO",
                          "OrderID": "286179864"
                        }
                      ],
                      "Currency": "USD",
                      "Duration": "GTC",
                      "GoodTillDate": "2021-02-15T00:00:00Z",
                      "GroupName": "OCO 2706452145",
                      "Legs": [
                        {
                          "OpenOrClose": "Close",
                          "QuantityOrdered": "10",
                          "ExecQuantity": "0",
                          "QuantityRemaining": "10",
                          "BuyOrSell": "Sell",
                          "Symbol": "MSFT",
                          "AssetType": "STOCK"
                        }
                      ],
                      "LimitPrice": "230",
                      "OrderID": "286179863",
                      "OpenedDateTime": "2020-11-17T16:34:37Z",
                      "OrderType": "Limit",
                      "PriceUsedForBuyingPower": "230",
                      "Routing": "Intelligent",
                      "Status": "ACK",
                      "StatusDescription": "Received",
                      "AdvancedOptions": "OCA=2706452145;",
                      "UnbundledRouteFee": "0"
                    },
                    {
                      "AccountID": "123456782",
                      "CommissionFee": "0",
                      "ConditionalOrders": [
                        {
                          "Relationship": "OCO",
                          "OrderID": "286179863"
                        }
                      ],
                      "Currency": "USD",
                      "Duration": "GTC",
                      "GoodTillDate": "2021-02-15T00:00:00Z",
                      "GroupName": "OCO 2706452145",
                      "Legs": [
                        {
                          "OpenOrClose": "Close",
                          "QuantityOrdered": "10",
                          "ExecQuantity": "0",
                          "QuantityRemaining": "10",
                          "BuyOrSell": "Sell",
                          "Symbol": "MSFT",
                          "AssetType": "STOCK"
                        }
                      ],
                      "OrderID": "286179864",
                      "OpenedDateTime": "2020-11-17T16:34:37Z",
                      "OrderType": "StopMarket",
                      "PriceUsedForBuyingPower": "215.06",
                      "Routing": "Intelligent",
                      "Status": "ACK",
                      "StatusDescription": "Received",
                      "StopPrice": "130",
                      "AdvancedOptions": "STPTRG=STT;OCA=2706452145;",
                      "UnbundledRouteFee": "0"
                    },
                    {
                      "AccountID": "123456782",
                      "CommissionFee": "0",
                      "ConditionalOrders": [
                        {
                          "Relationship": "OCO",
                          "OrderID": "286179863"
                        }
                      ],
                      "Currency": "USD",
                      "Duration": "GTC",
                      "GoodTillDate": "2021-02-15T00:00:00Z",
                      "GroupName": "OCO 2706452145",
                      "Legs": [
                        {
                          "OpenOrClose": "Close",
                          "QuantityOrdered": "10",
                          "ExecQuantity": "0",
                          "QuantityRemaining": "10",
                          "BuyOrSell": "Sell",
                          "Symbol": "MSFT",
                          "AssetType": "STOCK"
                        }
                      ],
                      "OrderID": "286179864",
                      "OpenedDateTime": "2020-11-17T16:34:37Z",
                      "OrderType": "StopMarket",
                      "PriceUsedForBuyingPower": "215.06",
                      "Routing": "Intelligent",
                      "Status": "ACK",
                      "StatusDescription": "Received",
                      "StopPrice": "215.06",
                      "AdvancedOptions": "STPTRG=STT;TRL=5%;",
                      "TrailingStop": {
                        "Percent": "5.0"
                      },
                      "UnbundledRouteFee": "0"
                    }
                  ],
                  "Errors": []
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/historicalorders/123456789,6B29FC40-CA47-1067-B31D-00DD010662DA?since=2006-01-13' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/historicalorders/123456789,6B29FC40-CA47-1067-B31D-00DD010662DA',\n  qs: {since: '2006-01-13'},\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/historicalorders/123456789,6B29FC40-CA47-1067-B31D-00DD010662DA\"\n\nquerystring = {\"since\":\"2006-01-13\"}\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/historicalorders/123456789,6B29FC40-CA47-1067-B31D-00DD010662DA?since=2006-01-13\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/brokerage/accounts/{accounts}/orders": {
      "get": {
        "tags": [
          "Brokerage"
        ],
        "description": "Fetches today's orders and open orders for the given Accounts, sorted in descending order of time placed for open and time executed for closed. Request valid for all account types.",
        "operationId": "GetOrders",
        "summary": "Get Orders",
        "parameters": [
          {
            "name": "accounts",
            "in": "path",
            "description": "List of valid Account IDs for the authenticated user in comma separated format; for example `\"61999124,68910124\"`. 1 to 25 Account IDs can be specified, comma separated. Recommended batch size is 10.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "61999124,68910124"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of requests returned per page when paginating responses. If not provided, results will not be paginated and a maximum of 600 orders is returned.",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 600,
              "minimum": 1,
              "default": 600,
              "maximum": 600
            }
          },
          {
            "name": "nextToken",
            "in": "query",
            "description": "An encrypted token with a lifetime of 1 hour for use with paginated order responses. This is returned with paginated results, and used in only the subsequent request which will return a new nextToken until there are fewer returned orders than the requested pageSize. If the number of returned orders equals the pageSize, and there are no additional orders, the nextToken will not be generated.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "eyJ0aW1lc3RhbXAiOjE2NT...NTMwMDB9"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Orders"
                },
                "example": {
                  "Orders": [
                    {
                      "AccountID": "123456782",
                      "CommissionFee": "0",
                      "Currency": "USD",
                      "Duration": "GTC",
                      "GoodTillDate": "2021-05-25T00:00:00Z",
                      "Legs": [
                        {
                          "AssetType": "STOCK",
                          "BuyOrSell": "Buy",
                          "ExecQuantity": "0",
                          "ExecutionPrice": "112.28",
                          "ExpirationDate": "2021-05-25T00:00:00Z",
                          "OpenOrClose": "Open",
                          "OptionType": "CALL",
                          "QuantityOrdered": "10",
                          "QuantityRemaining": "10",
                          "StrikePrice": "350",
                          "Symbol": "MSFT",
                          "Underlying": "MSFT"
                        }
                      ],
                      "MarketActivationRules": [
                        {
                          "RuleType": "Price",
                          "Symbol": "EDZ22",
                          "Predicate": "gt",
                          "TriggerKey": "STTN",
                          "Price": "10000.01"
                        }
                      ],
                      "OrderID": "286234131",
                      "OpenedDateTime": "2021-02-24T15:47:45Z",
                      "OrderType": "Market",
                      "PriceUsedForBuyingPower": "230.46",
                      "Routing": "Intelligent",
                      "Status": "OPN",
                      "StatusDescription": "Sent",
                      "AdvancedOptions": "CND=EDZ22>10000.01(STTN);TIM=23:59:59;",
                      "TimeActivationRules": [
                        {
                          "TimeUtc": "0001-01-01T23:59:59Z"
                        }
                      ],
                      "UnbundledRouteFee": "0"
                    },
                    {
                      "AccountID": "123456782",
                      "CommissionFee": "0",
                      "ClosedDateTime": "2020-11-16T16:53:37Z",
                      "Currency": "USD",
                      "Duration": "GTC",
                      "FilledPrice": "216.68",
                      "GoodTillDate": "2021-02-14T00:00:00Z",
                      "Legs": [
                        {
                          "OpenOrClose": "Open",
                          "QuantityOrdered": "10",
                          "ExecQuantity": "10",
                          "QuantityRemaining": "0",
                          "BuyOrSell": "Buy",
                          "Symbol": "MSFT",
                          "AssetType": "STOCK"
                        }
                      ],
                      "OrderID": "123456789",
                      "OpenedDateTime": "2020-11-16T16:53:37Z",
                      "OrderType": "Market",
                      "PriceUsedForBuyingPower": "216.66",
                      "Routing": "Intelligent",
                      "Status": "FLL",
                      "StatusDescription": "Filled",
                      "UnbundledRouteFee": "0"
                    },
                    {
                      "AccountID": "123456782",
                      "CommissionFee": "0",
                      "ConditionalOrders": [
                        {
                          "Relationship": "OCO",
                          "OrderID": "286179864"
                        }
                      ],
                      "Currency": "USD",
                      "Duration": "GTC",
                      "GoodTillDate": "2021-02-15T00:00:00Z",
                      "GroupName": "OCO 2706452145",
                      "Legs": [
                        {
                          "OpenOrClose": "Close",
                          "QuantityOrdered": "10",
                          "ExecQuantity": "0",
                          "QuantityRemaining": "10",
                          "BuyOrSell": "Sell",
                          "Symbol": "MSFT",
                          "AssetType": "STOCK"
                        }
                      ],
                      "LimitPrice": "230",
                      "OrderID": "286179863",
                      "OpenedDateTime": "2020-11-17T16:34:37Z",
                      "OrderType": "Limit",
                      "PriceUsedForBuyingPower": "230",
                      "Routing": "Intelligent",
                      "Status": "ACK",
                      "StatusDescription": "Received",
                      "AdvancedOptions": "OCA=2706452145;",
                      "UnbundledRouteFee": "0"
                    },
                    {
                      "AccountID": "123456782",
                      "CommissionFee": "0",
                      "ConditionalOrders": [
                        {
                          "Relationship": "OCO",
                          "OrderID": "286179863"
                        }
                      ],
                      "Currency": "USD",
                      "Duration": "GTC",
                      "GoodTillDate": "2021-02-15T00:00:00Z",
                      "GroupName": "OCO 2706452145",
                      "Legs": [
                        {
                          "OpenOrClose": "Close",
                          "QuantityOrdered": "10",
                          "ExecQuantity": "0",
                          "QuantityRemaining": "10",
                          "BuyOrSell": "Sell",
                          "Symbol": "MSFT",
                          "AssetType": "STOCK"
                        }
                      ],
                      "OrderID": "286179864",
                      "OpenedDateTime": "2020-11-17T16:34:37Z",
                      "OrderType": "StopMarket",
                      "PriceUsedForBuyingPower": "215.06",
                      "Routing": "Intelligent",
                      "Status": "ACK",
                      "StatusDescription": "Received",
                      "StopPrice": "130",
                      "AdvancedOptions": "STPTRG=STT;OCA=2706452145;",
                      "UnbundledRouteFee": "0"
                    },
                    {
                      "AccountID": "123456782",
                      "CommissionFee": "0",
                      "ConditionalOrders": [
                        {
                          "Relationship": "OCO",
                          "OrderID": "286179863"
                        }
                      ],
                      "Currency": "USD",
                      "Duration": "GTC",
                      "GoodTillDate": "2021-02-15T00:00:00Z",
                      "GroupName": "OCO 2706452145",
                      "Legs": [
                        {
                          "OpenOrClose": "Close",
                          "QuantityOrdered": "10",
                          "ExecQuantity": "0",
                          "QuantityRemaining": "10",
                          "BuyOrSell": "Sell",
                          "Symbol": "MSFT",
                          "AssetType": "STOCK"
                        }
                      ],
                      "OrderID": "286179864",
                      "OpenedDateTime": "2020-11-17T16:34:37Z",
                      "OrderType": "StopMarket",
                      "PriceUsedForBuyingPower": "215.06",
                      "Routing": "Intelligent",
                      "Status": "ACK",
                      "StatusDescription": "Received",
                      "StopPrice": "215.06",
                      "AdvancedOptions": "STPTRG=STT;TRL=5%;",
                      "TrailingStop": {
                        "Percent": "5.0"
                      },
                      "UnbundledRouteFee": "0"
                    }
                  ],
                  "Errors": [],
                  "NextToken": "eyJ0aW1lc3RhbXAiOjE2NTY1NjI2MDQwMDEs>LTM3QzAtNEIxOS04OTU4LUExQ0YwQjYwRDM3NSIsImV4cGlyYXRpb25UaW1lc3RhbXAiOjE2NTY2OTM3NTMwMDB9"
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/orders' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/orders',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/orders\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/orders\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/brokerage/accounts/{accounts}/orders/{orderIds}": {
      "get": {
        "tags": [
          "Brokerage"
        ],
        "description": "Fetches today's orders and open orders for the given Accounts, filtered by given Order IDs, sorted in descending order of time placed for open and time executed for closed. Request valid for all account types.",
        "operationId": "GetOrdersByOrderID",
        "summary": "Get Orders By Order ID",
        "parameters": [
          {
            "name": "accounts",
            "in": "path",
            "description": "List of valid Account IDs for the authenticated user in comma separated format; for example `\"61999124,68910124\"`. 1 to 25 Account IDs can be specified, comma separated. Recommended batch size is 10.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "61999124,68910124"
            }
          },
          {
            "name": "orderIds",
            "in": "path",
            "description": "List of valid Order IDs for the authenticated user for given accounts in comma separated format; for example `\"123456789,6B29FC40-CA47-1067-B31D-00DD010662DA\"`. 1 to 50 Order IDs can be specified, comma separated. Note, crypto order ids could exceed the URL path with limit for 50 orders ids.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "123456789,6B29FC40-CA47-1067-B31D-00DD010662DA"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersById"
                },
                "example": {
                  "Orders": [
                    {
                      "AccountID": "123456782",
                      "CommissionFee": "0",
                      "Currency": "USD",
                      "Duration": "GTC",
                      "GoodTillDate": "2021-05-25T00:00:00Z",
                      "Legs": [
                        {
                          "AssetType": "STOCK",
                          "BuyOrSell": "Buy",
                          "ExecQuantity": "0",
                          "ExecutionPrice": "112.28",
                          "ExpirationDate": "2021-05-25T00:00:00Z",
                          "OpenOrClose": "Open",
                          "OptionType": "CALL",
                          "QuantityOrdered": "10",
                          "QuantityRemaining": "10",
                          "StrikePrice": "350",
                          "Symbol": "MSFT",
                          "Underlying": "MSFT"
                        }
                      ],
                      "MarketActivationRules": [
                        {
                          "RuleType": "Price",
                          "Symbol": "EDZ22",
                          "Predicate": "gt",
                          "TriggerKey": "STTN",
                          "Price": "10000.01"
                        }
                      ],
                      "OrderID": "286234131",
                      "OpenedDateTime": "2021-02-24T15:47:45Z",
                      "OrderType": "Market",
                      "PriceUsedForBuyingPower": "230.46",
                      "Routing": "Intelligent",
                      "Status": "OPN",
                      "StatusDescription": "Sent",
                      "AdvancedOptions": "CND=EDZ22>10000.01(STTN);TIM=23:59:59;",
                      "TimeActivationRules": [
                        {
                          "TimeUtc": "0001-01-01T23:59:59Z"
                        }
                      ],
                      "UnbundledRouteFee": "0"
                    },
                    {
                      "AccountID": "123456782",
                      "CommissionFee": "0",
                      "ClosedDateTime": "2020-11-16T16:53:37Z",
                      "Currency": "USD",
                      "Duration": "GTC",
                      "FilledPrice": "216.68",
                      "GoodTillDate": "2021-02-14T00:00:00Z",
                      "Legs": [
                        {
                          "OpenOrClose": "Open",
                          "QuantityOrdered": "10",
                          "ExecQuantity": "10",
                          "QuantityRemaining": "0",
                          "BuyOrSell": "Buy",
                          "Symbol": "MSFT",
                          "AssetType": "STOCK"
                        }
                      ],
                      "OrderID": "123456789",
                      "OpenedDateTime": "2020-11-16T16:53:37Z",
                      "OrderType": "Market",
                      "PriceUsedForBuyingPower": "216.66",
                      "Routing": "Intelligent",
                      "Status": "FLL",
                      "StatusDescription": "Filled",
                      "UnbundledRouteFee": "0"
                    },
                    {
                      "AccountID": "123456782",
                      "CommissionFee": "0",
                      "ConditionalOrders": [
                        {
                          "Relationship": "OCO",
                          "OrderID": "286179864"
                        }
                      ],
                      "Currency": "USD",
                      "Duration": "GTC",
                      "GoodTillDate": "2021-02-15T00:00:00Z",
                      "GroupName": "OCO 2706452145",
                      "Legs": [
                        {
                          "OpenOrClose": "Close",
                          "QuantityOrdered": "10",
                          "ExecQuantity": "0",
                          "QuantityRemaining": "10",
                          "BuyOrSell": "Sell",
                          "Symbol": "MSFT",
                          "AssetType": "STOCK"
                        }
                      ],
                      "LimitPrice": "230",
                      "OrderID": "286179863",
                      "OpenedDateTime": "2020-11-17T16:34:37Z",
                      "OrderType": "Limit",
                      "PriceUsedForBuyingPower": "230",
                      "Routing": "Intelligent",
                      "Status": "ACK",
                      "StatusDescription": "Received",
                      "AdvancedOptions": "OCA=2706452145;",
                      "UnbundledRouteFee": "0"
                    },
                    {
                      "AccountID": "123456782",
                      "CommissionFee": "0",
                      "ConditionalOrders": [
                        {
                          "Relationship": "OCO",
                          "OrderID": "286179863"
                        }
                      ],
                      "Currency": "USD",
                      "Duration": "GTC",
                      "GoodTillDate": "2021-02-15T00:00:00Z",
                      "GroupName": "OCO 2706452145",
                      "Legs": [
                        {
                          "OpenOrClose": "Close",
                          "QuantityOrdered": "10",
                          "ExecQuantity": "0",
                          "QuantityRemaining": "10",
                          "BuyOrSell": "Sell",
                          "Symbol": "MSFT",
                          "AssetType": "STOCK"
                        }
                      ],
                      "OrderID": "286179864",
                      "OpenedDateTime": "2020-11-17T16:34:37Z",
                      "OrderType": "StopMarket",
                      "PriceUsedForBuyingPower": "215.06",
                      "Routing": "Intelligent",
                      "Status": "ACK",
                      "StatusDescription": "Received",
                      "StopPrice": "130",
                      "AdvancedOptions": "STPTRG=STT;OCA=2706452145;",
                      "UnbundledRouteFee": "0"
                    },
                    {
                      "AccountID": "123456782",
                      "CommissionFee": "0",
                      "ConditionalOrders": [
                        {
                          "Relationship": "OCO",
                          "OrderID": "286179863"
                        }
                      ],
                      "Currency": "USD",
                      "Duration": "GTC",
                      "GoodTillDate": "2021-02-15T00:00:00Z",
                      "GroupName": "OCO 2706452145",
                      "Legs": [
                        {
                          "OpenOrClose": "Close",
                          "QuantityOrdered": "10",
                          "ExecQuantity": "0",
                          "QuantityRemaining": "10",
                          "BuyOrSell": "Sell",
                          "Symbol": "MSFT",
                          "AssetType": "STOCK"
                        }
                      ],
                      "OrderID": "286179864",
                      "OpenedDateTime": "2020-11-17T16:34:37Z",
                      "OrderType": "StopMarket",
                      "PriceUsedForBuyingPower": "215.06",
                      "Routing": "Intelligent",
                      "Status": "ACK",
                      "StatusDescription": "Received",
                      "StopPrice": "215.06",
                      "AdvancedOptions": "STPTRG=STT;TRL=5%;",
                      "TrailingStop": {
                        "Percent": "5.0"
                      },
                      "UnbundledRouteFee": "0"
                    }
                  ],
                  "Errors": []
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/orders/123456789,6B29FC40-CA47-1067-B31D-00DD010662DA' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/orders/123456789,6B29FC40-CA47-1067-B31D-00DD010662DA',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/orders/123456789,6B29FC40-CA47-1067-B31D-00DD010662DA\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/orders/123456789,6B29FC40-CA47-1067-B31D-00DD010662DA\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/brokerage/accounts/{accounts}/positions": {
      "get": {
        "tags": [
          "Brokerage"
        ],
        "description": "Fetches positions for the given Accounts. Request valid for `Cash`, `Margin`, `Futures`, and `DVP` account types.",
        "operationId": "GetPositions",
        "summary": "Get Positions",
        "parameters": [
          {
            "name": "accounts",
            "in": "path",
            "description": "List of valid Account IDs for the authenticated user in comma separated format; for example `\"61999124,68910124\"`. 1 to 25 Account IDs can be specified, comma separated. Recommended batch size is 10.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "61999124,68910124"
            }
          },
          {
            "name": "symbol",
            "in": "query",
            "description": "List of valid symbols in comma separated format; for example `MSFT,MSFT *,BTCUSD`. You can use an * as wildcard to make more complex filters.\n\nExamples of the wildcard being used: \n\n  * Get all options for MSFT: symbol=`MSFT *`\n  * Get MSFT and all its options: symbol=`MSFT,MSFT *`\n  * Get all MSFT options expiring in 2023: symbol=`MSFT 23*`\n  * Get all MSFT options expiring in March 2023: symbol=`MSFT 2303*`\n  * Get all options expiring in March 2023: symbol=`* 2303*`\n  * Get all call options expiring in March 2023: symbol=`* 2303*C*`\n  * Get BHM*: symbol=`BHM**`",
            "required": false,
            "schema": {
              "type": "string",
              "example": "MSFT,MSFT *,BTCUSD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Positions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Positions"
                },
                "example": {
                  "Positions": [
                    {
                      "AccountID": "123456782",
                      "AveragePrice": "216.68",
                      "AssetType": "STOCK",
                      "Last": "216.63",
                      "Bid": "216.62",
                      "Ask": "216.64",
                      "ConversionRate": "1",
                      "DayTradeRequirement": "0",
                      "InitialRequirement": "0",
                      "PositionID": "64630792",
                      "LongShort": "Long",
                      "Quantity": "10",
                      "Symbol": "MSFT",
                      "Timestamp": "2020-11-16T16:53:37Z",
                      "TodaysProfitLoss": "-0.5",
                      "TotalCost": "2166.8",
                      "MarketValue": "2166.3",
                      "MarkToMarketPrice": "216.68",
                      "UnrealizedProfitLoss": "-0.5",
                      "UnrealizedProfitLossPercent": "-0.023",
                      "UnrealizedProfitLossQty": "-0.05"
                    }
                  ],
                  "Errors": [
                    {
                      "AccountID": "123456782C",
                      "Error": "Forbidden",
                      "Message": "Request not supported for account type."
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/positions' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/positions',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/positions\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/brokerage/accounts/61999124,68910124/positions\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/brokerage/accounts/{account}/wallets": {
      "get": {
        "tags": [
          "Brokerage"
        ],
        "description": "Fetches wallet information. Request valid for `Crypto` account types.",
        "operationId": "GetWallets",
        "summary": "Get Wallets",
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "A valid crypto Account ID for the authenticated user; for example `\"61999124C\"`.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "61999124C"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Wallets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallets"
                },
                "example": {
                  "Wallets": [
                    {
                      "AccountID": "123456789C",
                      "Currency": "ETH",
                      "Balance": "0.07",
                      "BalanceAvailableForTrading": "0.07",
                      "BalanceAvailableForWithdrawal": "0.07",
                      "UnrealizedProfitLossAccountCurrency": "6.37",
                      "Status": "Active"
                    },
                    {
                      "AccountID": "123456789C",
                      "Currency": "USDC",
                      "Balance": "0",
                      "BalanceAvailableForTrading": "0",
                      "BalanceAvailableForWithdrawal": "0",
                      "UnrealizedProfitLossAccountCurrency": "0",
                      "Status": "Active"
                    },
                    {
                      "AccountID": "123456789C",
                      "Currency": "LTC",
                      "Balance": "0",
                      "BalanceAvailableForTrading": "0",
                      "BalanceAvailableForWithdrawal": "0",
                      "UnrealizedProfitLossAccountCurrency": "0",
                      "Status": "Active"
                    },
                    {
                      "AccountID": "123456789C",
                      "Currency": "BCH",
                      "Balance": "0",
                      "BalanceAvailableForTrading": "0",
                      "BalanceAvailableForWithdrawal": "0",
                      "UnrealizedProfitLossAccountCurrency": "0",
                      "Status": "Active"
                    },
                    {
                      "AccountID": "123456789C",
                      "Currency": "BTC",
                      "Balance": "11.215396",
                      "BalanceAvailableForTrading": "11.215396",
                      "BalanceAvailableForWithdrawal": "11.215396",
                      "UnrealizedProfitLossAccountCurrency": "66626.07",
                      "Status": "Active"
                    },
                    {
                      "AccountID": "123456789C",
                      "Currency": "USD",
                      "Balance": "39887837.09",
                      "BalanceAvailableForTrading": "39887837.09",
                      "BalanceAvailableForWithdrawal": "39887837.09",
                      "UnrealizedProfitLossAccountCurrency": "0",
                      "Status": "Active"
                    },
                    {
                      "AccountID": "123456789C",
                      "Currency": "XRP",
                      "Balance": "0",
                      "BalanceAvailableForTrading": "0",
                      "BalanceAvailableForWithdrawal": "0",
                      "UnrealizedProfitLossAccountCurrency": "0",
                      "Status": "Active"
                    }
                  ],
                  "Errors": [
                    {
                      "AccountID": "123456789,123456782,123456781",
                      "Error": "Forbidden",
                      "Message": "Request not supported for account type."
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/brokerage/accounts/61999124C/wallets' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/brokerage/accounts/61999124C/wallets',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/brokerage/accounts/61999124C/wallets\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/brokerage/accounts/61999124C/wallets\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/brokerage/stream/accounts/{account}/wallets": {
      "get": {
        "tags": [
          "Brokerage"
        ],
        "description": "Streams wallet information. Request valid for `Crypto` account types.",
        "operationId": "StreamWallets",
        "summary": "Stream Wallets",
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "description": "A valid crypto Account ID for the authenticated user; for example `\"61999124C\"`.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "61999124C"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "WalletsStream",
            "content": {
              "application/vnd.tradestation.streams.v2+json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/WalletsStream"
                    },
                    {
                      "$ref": "#/components/schemas/Heartbeat"
                    },
                    {
                      "$ref": "#/components/schemas/StreamErrorResponse"
                    }
                  ]
                },
                "examples": {
                  "Wallet": {
                    "value": {
                      "AccountID": "123456789C",
                      "AccountTotals": {
                        "AccruedInterestAccountCurrency": "21882.25",
                        "BalanceAccountCurrency": "3123438.31",
                        "BalanceAvailableForTradingAccountCurrency": "3027436.19",
                        "BalanceAvailableForWithdrawalAccountCurrency": "3027436.19",
                        "TotalPaidInterestAccountCurrency": "35663.41",
                        "YTDPaidInterestAccountCurrency": "25329.98"
                      },
                      "AveragePrice": "2210.3",
                      "Balance": "1083.3041926",
                      "BalanceAccountCurrency": "586490.06",
                      "BalanceAvailableForTrading": "1083.3041926",
                      "BalanceAvailableForTradingAccountCurrency": "586490.06",
                      "BalanceAvailableForWithdrawal": "1083.3041926",
                      "BalanceAvailableForWithdrawalAccountCurrency": "586490.06",
                      "Currency": "ETH",
                      "Interest": {
                        "Accrued": "3.894633",
                        "AccruedAccountCurrency": "2108.52",
                        "TotalPaid": "0.119517",
                        "TotalPaidAccountCurrency": "64.71",
                        "YTDPaid": "0.119517",
                        "YTDPaidAccountCurrency": "64.71"
                      },
                      "InterestRate": "0.56",
                      "Status": "Active",
                      "UnrealizedProfitLossAccountCurrency": "125089.14"
                    }
                  },
                  "Heartbeat": {
                    "value": {
                      "Heartbeat": 1,
                      "Timestamp": "2021-03-02T18:01:23Z"
                    }
                  },
                  "Error": {
                    "value": {
                      "Error": "GoAway",
                      "Message": "The server is about to shut down."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/brokerage/stream/accounts/61999124C/wallets' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/brokerage/stream/accounts/61999124C/wallets',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options).on('data', function (data) {\n  console.log(data.toString());\n}).on('error', function(err) {\n  console.error(err)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/brokerage/stream/accounts/61999124C/wallets\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, stream=True)\n\nfor line in response.iter_lines():\n    if line:\n        print(line)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/brokerage/stream/accounts/61999124C/wallets\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead))\n{\n    response.EnsureSuccessStatusCode();\n    using (var stream = await response.Content.ReadAsStreamAsync())\n    {\n        using (StreamReader reader = new StreamReader(stream))\n        {\n            while (!reader.EndOfStream)\n            {\n                var line = await reader.ReadLineAsync();\n                if (line == null) break;\n                Console.WriteLine(line);\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v3/orderexecution/orderconfirm": {
      "post": {
        "description": "Returns estimated cost and commission information for an order without the order actually being placed. Request valid for `Market`, `Limit`, `Stop Market`, `Stop Limit`, `Options`, and\n`Order Sends Order (OSO)` order types.  All Crypto market orders, excluding USDCUSD, must have `Day` duration (TimeInForce).\nThe fields that are returned in the response depend on the order type. The following shows the different fields that will be returned.\n\n**Base Confirmation**  (All confirmations will have these fields)\n* Route\n* Duration\n* Account\n* SummaryMessage\n\n**Equity Confirmation** (Base Confirmation fields + the following)\n* EstimatedPrice\n* EstimatedPriceDisplay\n* EstimatedCost\n* EstimatedCostDisplay\n* EstimatedCommission\n* EstimatedCommissionDisplay\n* DebitCreditEstimatedCost\n* DebitCreditEstimatedCostDisplay\n* OrderConfirmId\n\n**Futures Confirmation** (Base Confirmation fields + the following)\n* ProductCurrency\n* AccountCurrency\n* EstimatedCost\n* EstimatedPrice\n* EstimatedPriceDisplay\n* InitialMarginDisplay\n* EstimatedCommission\n* EstimatedCommissionDisplay\n* OrderConfirmId",
        "tags": [
          "Order Execution"
        ],
        "operationId": "ConfirmOrder",
        "summary": "Confirm Order",
        "requestBody": {
          "description": "Order Confirmation request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderRequest"
              },
              "examples": {
                "Market Order": {
                  "value": {
                    "AccountID": "123456782",
                    "Symbol": "MSFT",
                    "Quantity": "10",
                    "OrderType": "Market",
                    "TradeAction": "BUY",
                    "TimeInForce": {
                      "Duration": "DAY"
                    },
                    "Route": "Intelligent"
                  }
                },
                "Limit Order": {
                  "value": {
                    "AccountID": "123456782",
                    "Symbol": "MSFT",
                    "Quantity": "10",
                    "OrderType": "Limit",
                    "TradeAction": "BUY",
                    "LimitPrice": "132.52",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Route": "Intelligent"
                  }
                },
                "Limit Order (USDCUSD)": {
                  "value": {
                    "AccountID": "123456782C",
                    "Symbol": "USDCUSD",
                    "Quantity": "1",
                    "OrderType": "Limit",
                    "TradeAction": "BUY",
                    "LimitPrice": "1",
                    "TimeInForce": {
                      "Duration": "IOC"
                    },
                    "Route": "USDC"
                  }
                },
                "Stop Market Order": {
                  "value": {
                    "AccountID": "123456782",
                    "Symbol": "MSFT",
                    "Quantity": "10",
                    "OrderType": "StopMarket",
                    "TradeAction": "BUY",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Route": "Intelligent",
                    "StopPrice": "215.00"
                  }
                },
                "Stop Limit Order": {
                  "value": {
                    "AccountID": "123456782",
                    "Symbol": "MSFT",
                    "Quantity": "10",
                    "OrderType": "StopLimit",
                    "TradeAction": "SELL",
                    "StopPrice": "215.00",
                    "LimitPrice": "200.00",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Route": "Intelligent"
                  }
                },
                "Single Option Order": {
                  "value": {
                    "AccountId": "123456782",
                    "Symbol": "MSFT",
                    "Quantity": "1",
                    "OrderType": "Market",
                    "TradeAction": "BUY",
                    "TimeInForce": {
                      "Duration": "DAY"
                    },
                    "Route": "Intelligent",
                    "Legs": [
                      {
                        "Symbol": "MSFT 201120P110",
                        "Quantity": "1",
                        "TradeAction": "BuyToOpen"
                      }
                    ]
                  }
                },
                "Covered/Married Stock": {
                  "value": {
                    "AccountID": "123456782",
                    "OrderType": "Limit",
                    "LimitPrice": "350",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Legs": [
                      {
                        "Symbol": "MSFT",
                        "TradeAction": "BuyToOpen",
                        "Quantity": 100
                      },
                      {
                        "Symbol": "MSFT 251219P300",
                        "TradeAction": "BuyToOpen",
                        "Quantity": 1
                      }
                    ]
                  }
                },
                "Vertical Option Spread": {
                  "value": {
                    "AccountID": "123456782",
                    "OrderType": "Limit",
                    "LimitPrice": "1",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Legs": [
                      {
                        "Symbol": "SPY 251219C320",
                        "TradeAction": "SELLTOOPEN",
                        "Quantity": "1"
                      },
                      {
                        "Symbol": "SPY 251219C300",
                        "TradeAction": "BUYTOOPEN",
                        "Quantity": "1"
                      }
                    ]
                  }
                },
                "Iron Condor (Sell Entry)": {
                  "value": {
                    "AccountID": "123456782",
                    "OrderType": "Limit",
                    "LimitPrice": "-20",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Legs": [
                      {
                        "Symbol": "SPY 251219C420",
                        "TradeAction": "SELLTOOPEN",
                        "Quantity": "1"
                      },
                      {
                        "Symbol": "SPY 251219C430",
                        "TradeAction": "BUYTOOPEN",
                        "Quantity": "1"
                      },
                      {
                        "Symbol": "SPY 251219P380",
                        "TradeAction": "SELLTOOPEN",
                        "Quantity": "1"
                      },
                      {
                        "Symbol": "SPY 251219P370",
                        "TradeAction": "BUYTOOPEN",
                        "Quantity": "1"
                      }
                    ]
                  }
                },
                "Order Sends Order": {
                  "value": {
                    "AccountID": "123456782",
                    "Symbol": "MSFT",
                    "Quantity": "10",
                    "OrderType": "Limit",
                    "TradeAction": "BUY",
                    "LimitPrice": "130.00",
                    "Route": "Intelligent",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "OSOs": [
                      {
                        "Type": "Normal",
                        "Orders": [
                          {
                            "AccountID": "123456782",
                            "Symbol": "AAPL",
                            "Quantity": "5",
                            "OrderType": "Limit",
                            "TradeAction": "BUY",
                            "LimitPrice": "50.00",
                            "Route": "Intelligent",
                            "TimeInForce": {
                              "Duration": "GTC"
                            }
                          },
                          {
                            "AccountID": "123456782",
                            "Symbol": "MSFT",
                            "Quantity": "10",
                            "OrderType": "StopMarket",
                            "TradeAction": "SELL",
                            "Route": "Intelligent",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "AdvancedOptions": {
                              "TrailingStop": {
                                "Percent": "5.0"
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                "Limit Entry with Amount Trail Stop": {
                  "value": {
                    "AccountID": "123456782",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Quantity": "1",
                    "OrderType": "Limit",
                    "Symbol": "MSFT",
                    "TradeAction": "BUY",
                    "Route": "Intelligent",
                    "LimitPrice": "330",
                    "OSOs": [
                      {
                        "Type": "NORMAL",
                        "Orders": [
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Quantity": "1",
                            "OrderType": "StopMarket",
                            "Symbol": "MSFT",
                            "TradeAction": "SELL",
                            "Route": "Intelligent",
                            "AdvancedOptions": {
                              "TrailingStop": {
                                "Amount": "10"
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                "Long Entry with Exit Bracket - 1 Limit & 1 Stop": {
                  "value": {
                    "AccountID": "123456782",
                    "Symbol": "MSFT",
                    "Quantity": "1",
                    "OrderType": "Limit",
                    "LimitPrice": "225.00",
                    "TradeAction": "BUY",
                    "TimeInForce": {
                      "Duration": "IOC"
                    },
                    "Route": "Intelligent",
                    "OSOs": [
                      {
                        "Type": "BRK",
                        "Orders": [
                          {
                            "AccountID": "123456782",
                            "Symbol": "MSFT",
                            "Quantity": "1",
                            "OrderType": "Limit",
                            "LimitPrice": "300.00",
                            "TradeAction": "SELL",
                            "TimeInForce": {
                              "Duration": "DAY"
                            },
                            "Route": "Intelligent"
                          },
                          {
                            "AccountID": "123456782",
                            "Symbol": "MSFT",
                            "Quantity": "1",
                            "OrderType": "StopMarket",
                            "TradeAction": "SELL",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Route": "Intelligent",
                            "AdvancedOptions": {
                              "TrailingStop": {
                                "Percent": "5.0"
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                "Buy Limit Entry with Multiple Brackets": {
                  "value": {
                    "AccountID": "123456782",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Quantity": "10",
                    "OrderType": "Limit",
                    "Symbol": "MSFT",
                    "TradeAction": "BUY",
                    "Route": "Intelligent",
                    "LimitPrice": "330",
                    "OSOs": [
                      {
                        "Type": "BRK",
                        "Orders": [
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Quantity": "5",
                            "OrderType": "StopMarket",
                            "Symbol": "MSFT",
                            "TradeAction": "SELL",
                            "Route": "Intelligent",
                            "StopPrice": "325"
                          },
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Quantity": "5",
                            "OrderType": "Limit",
                            "Symbol": "MSFT",
                            "TradeAction": "SELL",
                            "Route": "Intelligent",
                            "LimitPrice": "335"
                          }
                        ]
                      },
                      {
                        "Type": "BRK",
                        "Orders": [
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Quantity": "5",
                            "OrderType": "StopMarket",
                            "Symbol": "MSFT",
                            "TradeAction": "SELL",
                            "Route": "Intelligent",
                            "StopPrice": "325"
                          },
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Quantity": "5",
                            "OrderType": "Limit",
                            "Symbol": "MSFT",
                            "TradeAction": "SELL",
                            "Route": "Intelligent",
                            "LimitPrice": "340"
                          }
                        ]
                      }
                    ]
                  }
                },
                "Crypto Buy Limit Entry with Bracket": {
                  "value": {
                    "AccountID": "123456782",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Quantity": ".1",
                    "OrderType": "Limit",
                    "Symbol": "ETHUSD",
                    "TradeAction": "Buy",
                    "Route": "TSSR",
                    "LimitPrice": "1800",
                    "OSOs": [
                      {
                        "Type": "BRK",
                        "Orders": [
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Quantity": ".1",
                            "OrderType": "StopMarket",
                            "Symbol": "ETHUSD",
                            "TradeAction": "Sell",
                            "Route": "TSSR",
                            "StopPrice": "1780"
                          },
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Quantity": ".1",
                            "OrderType": "Limit",
                            "Symbol": "ETHUSD",
                            "TradeAction": "Sell",
                            "Route": "TSSR",
                            "LimitPrice": "1820"
                          }
                        ]
                      }
                    ]
                  }
                },
                "Sell Short Stocks with Bracket - 1 Limit & 1 Stop": {
                  "value": {
                    "AccountID": "123456782",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Quantity": "1",
                    "OrderType": "Limit",
                    "Symbol": "MSFT",
                    "TradeAction": "SellShort",
                    "Route": "Intelligent",
                    "LimitPrice": "360",
                    "OSOs": [
                      {
                        "Type": "BRK",
                        "Orders": [
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Quantity": "1",
                            "OrderType": "StopMarket",
                            "Symbol": "MSFT",
                            "TradeAction": "BuyToCover",
                            "Route": "Intelligent",
                            "StopPrice": "370"
                          },
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Quantity": "1",
                            "OrderType": "Limit",
                            "Symbol": "MSFT",
                            "TradeAction": "BuyToCover",
                            "Route": "Intelligent",
                            "LimitPrice": "350"
                          }
                        ]
                      }
                    ]
                  }
                },
                "Market Activation Rules": {
                  "value": {
                    "Symbol": "MSFT",
                    "AccountID": "123456782",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "OrderType": "Market",
                    "Quantity": "10",
                    "Route": "Intelligent",
                    "TradeAction": "BUY",
                    "AdvancedOptions": {
                      "MarketActivationRules": [
                        {
                          "RuleType": "Price",
                          "Symbol": "EDZ22",
                          "Predicate": "Gt",
                          "TriggerKey": "STTN",
                          "Price": "10000.01"
                        }
                      ],
                      "TimeActivationRules": [
                        {
                          "TimeUtc": "0001-01-01T23:59:59.000Z"
                        }
                      ]
                    }
                  }
                },
                "Sell Limit Order - Time Activation": {
                  "value": {
                    "AccountID": "123456782",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "OrderType": "Limit",
                    "LimitPrice": "300",
                    "Quantity": "1",
                    "Route": "Intelligent",
                    "Symbol": "MSFT",
                    "TradeAction": "Sell",
                    "AdvancedOptions": {
                      "TimeActivationRules": [
                        {
                          "TimeUtc": "0001-01-01T18:50:00.000Z"
                        }
                      ]
                    }
                  }
                },
                "Reverse Long Position (Stocks)": {
                  "value": {
                    "AccountID": "123456782",
                    "TimeInForce": {
                      "Duration": "Day"
                    },
                    "Quantity": "100",
                    "OrderType": "Market",
                    "Symbol": "MSFT",
                    "TradeAction": "SELL",
                    "Route": "Intelligent",
                    "OSOs": [
                      {
                        "Type": "NORMAL",
                        "Orders": [
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "Day"
                            },
                            "Quantity": "100",
                            "OrderType": "Market",
                            "Symbol": "MSFT",
                            "TradeAction": "SELLSHORT",
                            "Route": "Intelligent"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OrderConfirmResponses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderConfirmResponses"
                  }
                },
                "example": {
                  "Confirmations": [
                    {
                      "OrderAssetCategory": "EQUITY",
                      "Currency": "USD",
                      "DisplayName": "123456782",
                      "Route": "Intelligent",
                      "TimeInForce": {
                        "Duration": "GTC"
                      },
                      "AccountID": "123456782",
                      "OrderConfirmID": "7CMygnFJXk+ihrJJfOPmVQ",
                      "EstimatedPrice": "216.32",
                      "EstimatedCost": "2163.2",
                      "DebitCreditEstimatedCost": "2163.2",
                      "EstimatedCommission": "0",
                      "SummaryMessage": "Buy 10 MSFT @ Market"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "order",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url 'https://api.tradestation.com/v3/orderexecution/orderconfirm' \\\n  --header 'Authorization: Bearer TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"AccountID\":\"123456782\",\"Symbol\":\"MSFT\",\"Quantity\":\"10\",\"OrderType\":\"Market\",\"TradeAction\":\"BUY\",\"TimeInForce\":{\"Duration\":\"DAY\"},\"Route\":\"Intelligent\"}'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.tradestation.com/v3/orderexecution/orderconfirm',\n  headers: {'content-type': 'application/json', Authorization: 'Bearer TOKEN'},\n  body: {\n    AccountID: '123456782',\n    Symbol: 'MSFT',\n    Quantity: '10',\n    OrderType: 'Market',\n    TradeAction: 'BUY',\n    TimeInForce: {Duration: 'DAY'},\n    Route: 'Intelligent'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/orderexecution/orderconfirm\"\n\npayload = {\n    \"AccountID\": \"123456782\",\n    \"Symbol\": \"MSFT\",\n    \"Quantity\": \"10\",\n    \"OrderType\": \"Market\",\n    \"TradeAction\": \"BUY\",\n    \"TimeInForce\": {\"Duration\": \"DAY\"},\n    \"Route\": \"Intelligent\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer TOKEN\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/orderexecution/orderconfirm\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n    Content = new StringContent(\"{\\\"AccountID\\\":\\\"123456782\\\",\\\"Symbol\\\":\\\"MSFT\\\",\\\"Quantity\\\":\\\"10\\\",\\\"OrderType\\\":\\\"Market\\\",\\\"TradeAction\\\":\\\"BUY\\\",\\\"TimeInForce\\\":{\\\"Duration\\\":\\\"DAY\\\"},\\\"Route\\\":\\\"Intelligent\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },




// stopped here




    "/v3/orderexecution/ordergroupconfirm": {
      "post": {
        "tags": [
          "Order Execution"
        ],
        "description": "Creates an Order Confirmation for a group order. Request valid for all account types. Request valid for Order Cancels Order (OCO) and Bracket (BRK) order types as well as grouped orders of other types (NORMAL).\nAll Crypto market orders, excluding USDCUSD, must have `Day` duration (TimeInForce).\n\n#### Order Cancels Order (OCO)\nAn OCO order is a group of orders whereby if one of the orders is filled or partially-filled, then all of the other orders in the group are cancelled.\n\n#### Bracket OCO Orders\nA bracket order is a special instance of an OCO (Order Cancel Order). Bracket orders are used to exit an existing position. They are designed to limit loss and lock in profit by “bracketing” an order with a simultaneous stop and limit order.\n\nBracket orders are limited so that the orders are all for the same symbol and are on the same side of the market (either all to sell or all to cover), and they are restricted to closing transactions.\n\nThe reason that they follow these rules is because the orders need to be able to auto decrement when a partial fill occurs with one of the orders. For example, if the customer has a sell limit order for 1000 shares and a sell stop order for 1000 shares, and the limit order is partially filled for 500 shares, then the customer would want the stop to remain open, but it should automatically decrement the order to 500 shares to match the remaining open position.\n\n#### Crypto orders\n- Only one exit bracket can be sent with an entry order in an OSO\n- Multiple exit brackets can be issued for an open position, as long as the total exit quantity (from all exit orders) does not exceed the crypto balance\n\n#### Note\nWhen a group order is submitted, the order execution system treats each sibling order as an individual order. Thus, the system does not validate that each order has the same Quantity, and currently it is not able to update a bracket order as one transaction, instead you must update each order within a bracket.",
        "operationId": "ConfirmGroupOrder",
        "summary": "Confirm Group Order",
        "requestBody": {
          "description": "Order request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupOrderRequest"
              },
              "examples": {
                "OCO Breakout Entry (Stocks)": {
                  "value": {
                    "Type": "OCO",
                    "Orders": [
                      {
                        "AccountID": "123456782",
                        "StopPrice": "337",
                        "OrderType": "StopMarket",
                        "Quantity": "10",
                        "Route": "Intelligent",
                        "Symbol": "MSFT",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "TradeAction": "Buy"
                      },
                      {
                        "AccountID": "123456782",
                        "StopPrice": "333",
                        "OrderType": "StopMarket",
                        "Quantity": "10",
                        "Route": "Intelligent",
                        "Symbol": "MSFT",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "TradeAction": "SellShort"
                      }
                    ]
                  }
                },
                "Exit Bracket - 1 Limit & 1 Stop": {
                  "value": {
                    "Type": "BRK",
                    "Orders": [
                      {
                        "AccountID": "123456782",
                        "Symbol": "MSFT",
                        "Quantity": "10",
                        "OrderType": "Limit",
                        "TradeAction": "SELL",
                        "LimitPrice": "230.00",
                        "Route": "Intelligent",
                        "TimeInForce": {
                          "Duration": "GTC"
                        }
                      },
                      {
                        "AccountID": "123456782",
                        "Symbol": "MSFT",
                        "Quantity": "10",
                        "OrderType": "StopMarket",
                        "TradeAction": "SELL",
                        "Route": "Intelligent",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "AdvancedOptions": {
                          "TrailingStop": {
                            "Percent": "5.0"
                          }
                        }
                      }
                    ]
                  }
                },
                "Grouped Normal Order (NORMAL)": {
                  "value": {
                    "Type": "NORMAL",
                    "Orders": [
                      {
                        "AccountID": "123456782",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "Symbol": "AMZN",
                        "OrderType": "Limit",
                        "LimitPrice": "1600.00",
                        "Quantity": "2",
                        "TradeAction": "Buy"
                      },
                      {
                        "AccountID": "123456782",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "Symbol": "AAPL",
                        "OrderType": "Limit",
                        "LimitPrice": "60.00",
                        "Quantity": "50",
                        "TradeAction": "Buy"
                      },
                      {
                        "AccountID": "123456782",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "Symbol": "MSFT",
                        "OrderType": "Limit",
                        "LimitPrice": "150.00",
                        "Quantity": "10",
                        "TradeAction": "Buy"
                      },
                      {
                        "AccountID": "123456782",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "Symbol": "GE",
                        "OrderType": "Limit",
                        "LimitPrice": "6.00",
                        "Quantity": "100",
                        "TradeAction": "Buy"
                      },
                      {
                        "AccountID": "123456782",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "Symbol": "MMM",
                        "OrderType": "Limit",
                        "LimitPrice": "120.00",
                        "Quantity": "10",
                        "TradeAction": "Buy"
                      },
                      {
                        "AccountID": "123456782",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "Symbol": "FB",
                        "OrderType": "Limit",
                        "LimitPrice": "150.00",
                        "Quantity": "2",
                        "TradeAction": "Buy"
                      }
                    ]
                  }
                },
                "Market Activation Rules": {
                  "value": {
                    "Type": "OCO",
                    "Orders": [
                      {
                        "AccountID": "123456782",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "Quantity": "10",
                        "OrderType": "Limit",
                        "LimitPrice": "230.00",
                        "Symbol": "MSFT",
                        "TradeAction": "SELL",
                        "Route": "Intelligent",
                        "AdvancedOptions": {
                          "MarketActivationRules": [
                            {
                              "RuleType": "Price",
                              "Symbol": "EDZ22",
                              "Predicate": "Lt",
                              "TriggerKey": "STTN",
                              "Price": "10000.01"
                            }
                          ],
                          "TimeActivationRules": [
                            {
                              "TimeUtc": "0001-01-01T23:59:59.000Z"
                            }
                          ]
                        }
                      },
                      {
                        "AccountID": "31002504",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "Quantity": "10",
                        "OrderType": "StopMarket",
                        "Symbol": "MSFT",
                        "TradeAction": "SELL",
                        "Route": "Intelligent",
                        "AdvancedOptions": {
                          "MarketActivationRules": [
                            {
                              "RuleType": "Price",
                              "Symbol": "EDZ22",
                              "Predicate": "Lt",
                              "TriggerKey": "STTN",
                              "Price": "10000.01"
                            },
                            {
                              "RuleType": "Price",
                              "Symbol": "EDZ22",
                              "Predicate": "Lt",
                              "TriggerKey": "STTN",
                              "Price": "999999.99",
                              "LogicOperator": "Or"
                            }
                          ],
                          "TimeActivationRules": [
                            {
                              "TimeUtc": "0001-01-01T23:59:59.000Z"
                            }
                          ],
                          "AdvancedOptions": {
                            "TrailingStop": {
                              "Percent": "5.0"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OrderConfirmResponses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderConfirmResponses"
                  }
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "orderRequest",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url 'https://api.tradestation.com/v3/orderexecution/ordergroupconfirm' \\\n  --header 'Authorization: Bearer TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"Type\":\"OCO\",\"Orders\":[{\"AccountID\":\"123456782\",\"StopPrice\":\"337\",\"OrderType\":\"StopMarket\",\"Quantity\":\"10\",\"Route\":\"Intelligent\",\"Symbol\":\"MSFT\",\"TimeInForce\":{\"Duration\":\"GTC\"},\"TradeAction\":\"Buy\"},{\"AccountID\":\"123456782\",\"StopPrice\":\"333\",\"OrderType\":\"StopMarket\",\"Quantity\":\"10\",\"Route\":\"Intelligent\",\"Symbol\":\"MSFT\",\"TimeInForce\":{\"Duration\":\"GTC\"},\"TradeAction\":\"SellShort\"}]}'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.tradestation.com/v3/orderexecution/ordergroupconfirm',\n  headers: {'content-type': 'application/json', Authorization: 'Bearer TOKEN'},\n  body: {\n    Type: 'OCO',\n    Orders: [\n      {\n        AccountID: '123456782',\n        StopPrice: '337',\n        OrderType: 'StopMarket',\n        Quantity: '10',\n        Route: 'Intelligent',\n        Symbol: 'MSFT',\n        TimeInForce: {Duration: 'GTC'},\n        TradeAction: 'Buy'\n      },\n      {\n        AccountID: '123456782',\n        StopPrice: '333',\n        OrderType: 'StopMarket',\n        Quantity: '10',\n        Route: 'Intelligent',\n        Symbol: 'MSFT',\n        TimeInForce: {Duration: 'GTC'},\n        TradeAction: 'SellShort'\n      }\n    ]\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/orderexecution/ordergroupconfirm\"\n\npayload = {\n    \"Type\": \"OCO\",\n    \"Orders\": [\n        {\n            \"AccountID\": \"123456782\",\n            \"StopPrice\": \"337\",\n            \"OrderType\": \"StopMarket\",\n            \"Quantity\": \"10\",\n            \"Route\": \"Intelligent\",\n            \"Symbol\": \"MSFT\",\n            \"TimeInForce\": {\"Duration\": \"GTC\"},\n            \"TradeAction\": \"Buy\"\n        },\n        {\n            \"AccountID\": \"123456782\",\n            \"StopPrice\": \"333\",\n            \"OrderType\": \"StopMarket\",\n            \"Quantity\": \"10\",\n            \"Route\": \"Intelligent\",\n            \"Symbol\": \"MSFT\",\n            \"TimeInForce\": {\"Duration\": \"GTC\"},\n            \"TradeAction\": \"SellShort\"\n        }\n    ]\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer TOKEN\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/orderexecution/ordergroupconfirm\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n    Content = new StringContent(\"{\\\"Type\\\":\\\"OCO\\\",\\\"Orders\\\":[{\\\"AccountID\\\":\\\"123456782\\\",\\\"StopPrice\\\":\\\"337\\\",\\\"OrderType\\\":\\\"StopMarket\\\",\\\"Quantity\\\":\\\"10\\\",\\\"Route\\\":\\\"Intelligent\\\",\\\"Symbol\\\":\\\"MSFT\\\",\\\"TimeInForce\\\":{\\\"Duration\\\":\\\"GTC\\\"},\\\"TradeAction\\\":\\\"Buy\\\"},{\\\"AccountID\\\":\\\"123456782\\\",\\\"StopPrice\\\":\\\"333\\\",\\\"OrderType\\\":\\\"StopMarket\\\",\\\"Quantity\\\":\\\"10\\\",\\\"Route\\\":\\\"Intelligent\\\",\\\"Symbol\\\":\\\"MSFT\\\",\\\"TimeInForce\\\":{\\\"Duration\\\":\\\"GTC\\\"},\\\"TradeAction\\\":\\\"SellShort\\\"}]}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/orderexecution/ordergroups": {
      "post": {
        "tags": [
          "Order Execution"
        ],
        "description": "Submits a group order. Request valid for all account types. Request valid for Order Cancels Order (OCO) and Bracket (BRK) order types as well as grouped orders of other types (NORMAL).\nAll Crypto market orders, excluding USDCUSD, must have `Day` duration (TimeInForce).\n\n#### Order Cancels Order (OCO)\nAn OCO order is a group of orders whereby if one of the orders is filled or partially-filled, then all of the other orders in the group are cancelled.\n\n#### Bracket OCO Orders\nA bracket order is a special instance of an OCO (Order Cancel Order). Bracket orders are used to exit an existing position. They are designed to limit loss and lock in profit by “bracketing” an order with a simultaneous stop and limit order.\n\nBracket orders are limited so that the orders are all for the same symbol and are on the same side of the market (either all to sell or all to cover), and they are restricted to closing transactions.\n\nThe reason that they follow these rules is because the orders need to be able to auto decrement when a partial fill occurs with one of the orders. For example, if the customer has a sell limit order for 1000 shares and a sell stop order for 1000 shares, and the limit order is partially filled for 500 shares, then the customer would want the stop to remain open, but it should automatically decrement the order to 500 shares to match the remaining open position.\n\n#### Crypto orders\n- Only one exit bracket can be sent with an entry order in an OSO\n- Multiple exit brackets can be issued for an open position, as long as the total exit quantity (from all exit orders) does not exceed the crypto balance\n\n#### Note\nWhen a group order is submitted, the order execution system treats each sibling order as an individual order. Thus, the system does not validate that each order has the same Quantity, and currently it is not able to update a bracket order as one transaction, instead you must update each order within a bracket.",
        "operationId": "PlaceGroupOrder",
        "summary": "Place Group Order",
        "requestBody": {
          "description": "Order request to place.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupOrderRequest"
              },
              "examples": {
                "OCO Breakout Entry (Stocks)": {
                  "value": {
                    "Type": "OCO",
                    "Orders": [
                      {
                        "AccountID": "123456782",
                        "StopPrice": "337",
                        "OrderType": "StopMarket",
                        "Quantity": "10",
                        "Route": "Intelligent",
                        "Symbol": "MSFT",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "TradeAction": "Buy"
                      },
                      {
                        "AccountID": "123456782",
                        "StopPrice": "333",
                        "OrderType": "StopMarket",
                        "Quantity": "10",
                        "Route": "Intelligent",
                        "Symbol": "MSFT",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "TradeAction": "SellShort"
                      }
                    ]
                  }
                },
                "Exit Bracket - 1 Limit & 1 Stop": {
                  "value": {
                    "Type": "BRK",
                    "Orders": [
                      {
                        "AccountID": "123456782",
                        "Symbol": "MSFT",
                        "Quantity": "10",
                        "OrderType": "Limit",
                        "TradeAction": "SELL",
                        "LimitPrice": "230.00",
                        "Route": "Intelligent",
                        "TimeInForce": {
                          "Duration": "GTC"
                        }
                      },
                      {
                        "AccountID": "123456782",
                        "Symbol": "MSFT",
                        "Quantity": "10",
                        "OrderType": "StopMarket",
                        "TradeAction": "SELL",
                        "Route": "Intelligent",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "AdvancedOptions": {
                          "TrailingStop": {
                            "Percent": "5.0"
                          }
                        }
                      }
                    ]
                  }
                },
                "Grouped Normal Order (NORMAL)": {
                  "value": {
                    "Type": "NORMAL",
                    "Orders": [
                      {
                        "AccountID": "123456782",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "Symbol": "AMZN",
                        "OrderType": "Limit",
                        "LimitPrice": "1600.00",
                        "Quantity": "2",
                        "TradeAction": "Buy"
                      },
                      {
                        "AccountID": "123456782",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "Symbol": "AAPL",
                        "OrderType": "Limit",
                        "LimitPrice": "60.00",
                        "Quantity": "50",
                        "TradeAction": "Buy"
                      },
                      {
                        "AccountID": "123456782",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "Symbol": "MSFT",
                        "OrderType": "Limit",
                        "LimitPrice": "150.00",
                        "Quantity": "10",
                        "TradeAction": "Buy"
                      },
                      {
                        "AccountID": "123456782",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "Symbol": "GE",
                        "OrderType": "Limit",
                        "LimitPrice": "6.00",
                        "Quantity": "100",
                        "TradeAction": "Buy"
                      },
                      {
                        "AccountID": "123456782",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "Symbol": "MMM",
                        "OrderType": "Limit",
                        "LimitPrice": "120.00",
                        "Quantity": "10",
                        "TradeAction": "Buy"
                      },
                      {
                        "AccountID": "123456782",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "Symbol": "FB",
                        "OrderType": "Limit",
                        "LimitPrice": "150.00",
                        "Quantity": "2",
                        "TradeAction": "Buy"
                      }
                    ]
                  }
                },
                "Market Activation Rules": {
                  "value": {
                    "Type": "OCO",
                    "Orders": [
                      {
                        "AccountID": "123456782",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "Quantity": "10",
                        "OrderType": "Limit",
                        "LimitPrice": "230.00",
                        "Symbol": "MSFT",
                        "TradeAction": "SELL",
                        "Route": "Intelligent",
                        "AdvancedOptions": {
                          "MarketActivationRules": [
                            {
                              "RuleType": "Price",
                              "Symbol": "EDZ22",
                              "Predicate": "Lt",
                              "TriggerKey": "STTN",
                              "Price": "10000.01"
                            }
                          ],
                          "TimeActivationRules": [
                            {
                              "TimeUtc": "0001-01-01T23:59:59.000Z"
                            }
                          ]
                        }
                      },
                      {
                        "AccountID": "31002504",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "Quantity": "10",
                        "OrderType": "StopMarket",
                        "Symbol": "MSFT",
                        "TradeAction": "SELL",
                        "Route": "Intelligent",
                        "AdvancedOptions": {
                          "MarketActivationRules": [
                            {
                              "RuleType": "Price",
                              "Symbol": "EDZ22",
                              "Predicate": "Lt",
                              "TriggerKey": "STTN",
                              "Price": "10000.01"
                            },
                            {
                              "RuleType": "Price",
                              "Symbol": "EDZ22",
                              "Predicate": "Lt",
                              "TriggerKey": "STTN",
                              "Price": "999999.99",
                              "LogicOperator": "Or"
                            }
                          ],
                          "TimeActivationRules": [
                            {
                              "TimeUtc": "0001-01-01T23:59:59.000Z"
                            }
                          ],
                          "AdvancedOptions": {
                            "TrailingStop": {
                              "Percent": "5.0"
                            }
                          }
                        }
                      },
                      {
                        "AccountID": "123456782",
                        "TimeInForce": {
                          "Duration": "GTC"
                        },
                        "Quantity": "10",
                        "OrderType": "Limit",
                        "LimitPrice": "50000.00",
                        "Symbol": "TSLA",
                        "TradeAction": "BUY",
                        "Route": "Intelligent",
                        "AdvancedOptions": {
                          "MarketActivationRules": [
                            {
                              "RuleType": "Price",
                              "Symbol": "EDZ22",
                              "Predicate": "Lt",
                              "TriggerKey": "STTN",
                              "Price": "10000.01"
                            }
                          ],
                          "TimeActivationRules": [
                            {
                              "TimeUtc": "0001-01-01T23:59:59.000Z"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OrderResponses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderResponses"
                  }
                },
                "example": {
                  "Orders": [
                    {
                      "Message": "Sent order: Sell 10 MSFT @ 230.00 Limit",
                      "OrderID": "123456889"
                    },
                    {
                      "Message": "Sent order: Sell 10 MSFT @ 130.00 Stop Market",
                      "OrderID": "123456989"
                    }
                  ],
                  "Errors": [
                    {
                      "Error": "FAILED",
                      "Message": "Order failed. Reason: Type = LMT has invalid Price greater than absolute maximum",
                      "OrderID": "1234567"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "orderRequest",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url 'https://api.tradestation.com/v3/orderexecution/ordergroups' \\\n  --header 'Authorization: Bearer TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"Type\":\"OCO\",\"Orders\":[{\"AccountID\":\"123456782\",\"StopPrice\":\"337\",\"OrderType\":\"StopMarket\",\"Quantity\":\"10\",\"Route\":\"Intelligent\",\"Symbol\":\"MSFT\",\"TimeInForce\":{\"Duration\":\"GTC\"},\"TradeAction\":\"Buy\"},{\"AccountID\":\"123456782\",\"StopPrice\":\"333\",\"OrderType\":\"StopMarket\",\"Quantity\":\"10\",\"Route\":\"Intelligent\",\"Symbol\":\"MSFT\",\"TimeInForce\":{\"Duration\":\"GTC\"},\"TradeAction\":\"SellShort\"}]}'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.tradestation.com/v3/orderexecution/ordergroups',\n  headers: {'content-type': 'application/json', Authorization: 'Bearer TOKEN'},\n  body: {\n    Type: 'OCO',\n    Orders: [\n      {\n        AccountID: '123456782',\n        StopPrice: '337',\n        OrderType: 'StopMarket',\n        Quantity: '10',\n        Route: 'Intelligent',\n        Symbol: 'MSFT',\n        TimeInForce: {Duration: 'GTC'},\n        TradeAction: 'Buy'\n      },\n      {\n        AccountID: '123456782',\n        StopPrice: '333',\n        OrderType: 'StopMarket',\n        Quantity: '10',\n        Route: 'Intelligent',\n        Symbol: 'MSFT',\n        TimeInForce: {Duration: 'GTC'},\n        TradeAction: 'SellShort'\n      }\n    ]\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/orderexecution/ordergroups\"\n\npayload = {\n    \"Type\": \"OCO\",\n    \"Orders\": [\n        {\n            \"AccountID\": \"123456782\",\n            \"StopPrice\": \"337\",\n            \"OrderType\": \"StopMarket\",\n            \"Quantity\": \"10\",\n            \"Route\": \"Intelligent\",\n            \"Symbol\": \"MSFT\",\n            \"TimeInForce\": {\"Duration\": \"GTC\"},\n            \"TradeAction\": \"Buy\"\n        },\n        {\n            \"AccountID\": \"123456782\",\n            \"StopPrice\": \"333\",\n            \"OrderType\": \"StopMarket\",\n            \"Quantity\": \"10\",\n            \"Route\": \"Intelligent\",\n            \"Symbol\": \"MSFT\",\n            \"TimeInForce\": {\"Duration\": \"GTC\"},\n            \"TradeAction\": \"SellShort\"\n        }\n    ]\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer TOKEN\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/orderexecution/ordergroups\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n    Content = new StringContent(\"{\\\"Type\\\":\\\"OCO\\\",\\\"Orders\\\":[{\\\"AccountID\\\":\\\"123456782\\\",\\\"StopPrice\\\":\\\"337\\\",\\\"OrderType\\\":\\\"StopMarket\\\",\\\"Quantity\\\":\\\"10\\\",\\\"Route\\\":\\\"Intelligent\\\",\\\"Symbol\\\":\\\"MSFT\\\",\\\"TimeInForce\\\":{\\\"Duration\\\":\\\"GTC\\\"},\\\"TradeAction\\\":\\\"Buy\\\"},{\\\"AccountID\\\":\\\"123456782\\\",\\\"StopPrice\\\":\\\"333\\\",\\\"OrderType\\\":\\\"StopMarket\\\",\\\"Quantity\\\":\\\"10\\\",\\\"Route\\\":\\\"Intelligent\\\",\\\"Symbol\\\":\\\"MSFT\\\",\\\"TimeInForce\\\":{\\\"Duration\\\":\\\"GTC\\\"},\\\"TradeAction\\\":\\\"SellShort\\\"}]}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/orderexecution/orders": {
      "post": {
        "tags": [
          "Order Execution"
        ],
        "description": "Creates a new brokerage order. Request valid for all account types. Request valid for Market, Limit, Stop Market, Stop Limit, Options and Order Sends Order (OSO) order types. All Crypto market orders, excluding USDCUSD, must have `Day` duration (TimeInForce).",
        "operationId": "PlaceOrder",
        "summary": "Place Order",
        "requestBody": {
          "description": "Order to place.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderRequest"
              },
              "examples": {
                "Market Order": {
                  "value": {
                    "AccountID": "123456782",
                    "Symbol": "MSFT",
                    "Quantity": "10",
                    "OrderType": "Market",
                    "TradeAction": "BUY",
                    "TimeInForce": {
                      "Duration": "DAY"
                    },
                    "Route": "Intelligent"
                  }
                },
                "Limit Order": {
                  "value": {
                    "AccountID": "123456782",
                    "Symbol": "MSFT",
                    "Quantity": "10",
                    "OrderType": "Limit",
                    "TradeAction": "BUY",
                    "LimitPrice": "132.52",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Route": "Intelligent"
                  }
                },
                "Limit Order (USDCUSD)": {
                  "value": {
                    "AccountID": "123456782C",
                    "Symbol": "USDCUSD",
                    "Quantity": "1",
                    "OrderType": "Limit",
                    "TradeAction": "BUY",
                    "LimitPrice": "1",
                    "TimeInForce": {
                      "Duration": "IOC"
                    },
                    "Route": "USDC"
                  }
                },
                "Stop Market Order": {
                  "value": {
                    "AccountID": "123456782",
                    "Symbol": "MSFT",
                    "Quantity": "10",
                    "OrderType": "StopMarket",
                    "TradeAction": "BUY",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Route": "Intelligent",
                    "StopPrice": "215.00"
                  }
                },
                "Stop Limit Order": {
                  "value": {
                    "AccountID": "123456782",
                    "Symbol": "MSFT",
                    "Quantity": "10",
                    "OrderType": "StopLimit",
                    "TradeAction": "SELL",
                    "StopPrice": "215.00",
                    "LimitPrice": "200.00",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Route": "Intelligent"
                  }
                },
                "Single Option Order": {
                  "value": {
                    "AccountId": "123456782",
                    "Symbol": "MSFT",
                    "Quantity": "1",
                    "OrderType": "Market",
                    "TradeAction": "BUY",
                    "TimeInForce": {
                      "Duration": "DAY"
                    },
                    "Route": "Intelligent",
                    "Legs": [
                      {
                        "Symbol": "MSFT 201120P110",
                        "Quantity": "1",
                        "TradeAction": "BuyToOpen"
                      }
                    ]
                  }
                },
                "Covered/Married Stock": {
                  "value": {
                    "AccountID": "123456782",
                    "OrderType": "Limit",
                    "LimitPrice": "350",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Legs": [
                      {
                        "Symbol": "MSFT",
                        "TradeAction": "BuyToOpen",
                        "Quantity": 100
                      },
                      {
                        "Symbol": "MSFT 251219P300",
                        "TradeAction": "BuyToOpen",
                        "Quantity": 1
                      }
                    ]
                  }
                },
                "Vertical Option Spread": {
                  "value": {
                    "AccountID": "123456782",
                    "OrderType": "Limit",
                    "LimitPrice": "1",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Legs": [
                      {
                        "Symbol": "SPY 251219C320",
                        "TradeAction": "SELLTOOPEN",
                        "Quantity": "1"
                      },
                      {
                        "Symbol": "SPY 251219C300",
                        "TradeAction": "BUYTOOPEN",
                        "Quantity": "1"
                      }
                    ]
                  }
                },
                "Iron Condor (Sell Entry)": {
                  "value": {
                    "AccountID": "123456782",
                    "OrderType": "Limit",
                    "LimitPrice": "-20",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Legs": [
                      {
                        "Symbol": "SPY 251219C420",
                        "TradeAction": "SELLTOOPEN",
                        "Quantity": "1"
                      },
                      {
                        "Symbol": "SPY 251219C430",
                        "TradeAction": "BUYTOOPEN",
                        "Quantity": "1"
                      },
                      {
                        "Symbol": "SPY 251219P380",
                        "TradeAction": "SELLTOOPEN",
                        "Quantity": "1"
                      },
                      {
                        "Symbol": "SPY 251219P370",
                        "TradeAction": "BUYTOOPEN",
                        "Quantity": "1"
                      }
                    ]
                  }
                },
                "Order Sends Order": {
                  "value": {
                    "AccountID": "123456782",
                    "Symbol": "MSFT",
                    "Quantity": "10",
                    "OrderType": "Limit",
                    "TradeAction": "BUY",
                    "LimitPrice": "130.00",
                    "Route": "Intelligent",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "OSOs": [
                      {
                        "Type": "Normal",
                        "Orders": [
                          {
                            "AccountID": "123456782",
                            "Symbol": "AAPL",
                            "Quantity": "5",
                            "OrderType": "Limit",
                            "TradeAction": "BUY",
                            "LimitPrice": "50.00",
                            "Route": "Intelligent",
                            "TimeInForce": {
                              "Duration": "GTC"
                            }
                          },
                          {
                            "AccountID": "123456782",
                            "Symbol": "MSFT",
                            "Quantity": "10",
                            "OrderType": "StopMarket",
                            "TradeAction": "SELL",
                            "Route": "Intelligent",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "AdvancedOptions": {
                              "TrailingStop": {
                                "Percent": "5.0"
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                "Limit Entry with Amount Trail Stop": {
                  "value": {
                    "AccountID": "123456782",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Quantity": "1",
                    "OrderType": "Limit",
                    "Symbol": "MSFT",
                    "TradeAction": "BUY",
                    "Route": "Intelligent",
                    "LimitPrice": "330",
                    "OSOs": [
                      {
                        "Type": "NORMAL",
                        "Orders": [
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Quantity": "1",
                            "OrderType": "StopMarket",
                            "Symbol": "MSFT",
                            "TradeAction": "SELL",
                            "Route": "Intelligent",
                            "AdvancedOptions": {
                              "TrailingStop": {
                                "Amount": "10"
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                "Long Entry with Exit Bracket - 1 Limit & 1 Stop": {
                  "value": {
                    "AccountID": "123456782",
                    "Symbol": "MSFT",
                    "Quantity": "1",
                    "OrderType": "Limit",
                    "LimitPrice": "225.00",
                    "TradeAction": "BUY",
                    "TimeInForce": {
                      "Duration": "IOC"
                    },
                    "Route": "Intelligent",
                    "OSOs": [
                      {
                        "Type": "BRK",
                        "Orders": [
                          {
                            "AccountID": "123456782",
                            "Symbol": "MSFT",
                            "Quantity": "1",
                            "OrderType": "Limit",
                            "LimitPrice": "300.00",
                            "TradeAction": "SELL",
                            "TimeInForce": {
                              "Duration": "DAY"
                            },
                            "Route": "Intelligent"
                          },
                          {
                            "AccountID": "123456782",
                            "Symbol": "MSFT",
                            "Quantity": "1",
                            "OrderType": "StopMarket",
                            "TradeAction": "SELL",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Route": "Intelligent",
                            "AdvancedOptions": {
                              "TrailingStop": {
                                "Percent": "5.0"
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                "Buy Limit Entry with Multiple Brackets": {
                  "value": {
                    "AccountID": "123456782",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Quantity": "10",
                    "OrderType": "Limit",
                    "Symbol": "MSFT",
                    "TradeAction": "BUY",
                    "Route": "Intelligent",
                    "LimitPrice": "330",
                    "OSOs": [
                      {
                        "Type": "BRK",
                        "Orders": [
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Quantity": "5",
                            "OrderType": "StopMarket",
                            "Symbol": "MSFT",
                            "TradeAction": "SELL",
                            "Route": "Intelligent",
                            "StopPrice": "325"
                          },
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Quantity": "5",
                            "OrderType": "Limit",
                            "Symbol": "MSFT",
                            "TradeAction": "SELL",
                            "Route": "Intelligent",
                            "LimitPrice": "335"
                          }
                        ]
                      },
                      {
                        "Type": "BRK",
                        "Orders": [
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Quantity": "5",
                            "OrderType": "StopMarket",
                            "Symbol": "MSFT",
                            "TradeAction": "SELL",
                            "Route": "Intelligent",
                            "StopPrice": "325"
                          },
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Quantity": "5",
                            "OrderType": "Limit",
                            "Symbol": "MSFT",
                            "TradeAction": "SELL",
                            "Route": "Intelligent",
                            "LimitPrice": "340"
                          }
                        ]
                      }
                    ]
                  }
                },
                "Crypto Buy Limit Entry with Bracket": {
                  "value": {
                    "AccountID": "123456782",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Quantity": ".1",
                    "OrderType": "Limit",
                    "Symbol": "ETHUSD",
                    "TradeAction": "Buy",
                    "Route": "TSSR",
                    "LimitPrice": "1800",
                    "OSOs": [
                      {
                        "Type": "BRK",
                        "Orders": [
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Quantity": ".1",
                            "OrderType": "StopMarket",
                            "Symbol": "ETHUSD",
                            "TradeAction": "Sell",
                            "Route": "TSSR",
                            "StopPrice": "1780"
                          },
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Quantity": ".1",
                            "OrderType": "Limit",
                            "Symbol": "ETHUSD",
                            "TradeAction": "Sell",
                            "Route": "TSSR",
                            "LimitPrice": "1820"
                          }
                        ]
                      }
                    ]
                  }
                },
                "Sell Short Stocks with Bracket - 1 Limit & 1 Stop": {
                  "value": {
                    "AccountID": "123456782",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "Quantity": "1",
                    "OrderType": "Limit",
                    "Symbol": "MSFT",
                    "TradeAction": "SellShort",
                    "Route": "Intelligent",
                    "LimitPrice": "360",
                    "OSOs": [
                      {
                        "Type": "BRK",
                        "Orders": [
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Quantity": "1",
                            "OrderType": "StopMarket",
                            "Symbol": "MSFT",
                            "TradeAction": "BuyToCover",
                            "Route": "Intelligent",
                            "StopPrice": "370"
                          },
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "GTC"
                            },
                            "Quantity": "1",
                            "OrderType": "Limit",
                            "Symbol": "MSFT",
                            "TradeAction": "BuyToCover",
                            "Route": "Intelligent",
                            "LimitPrice": "350"
                          }
                        ]
                      }
                    ]
                  }
                },
                "Market Activation Rules": {
                  "value": {
                    "Symbol": "MSFT",
                    "AccountID": "123456782",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "OrderType": "Market",
                    "Quantity": "10",
                    "Route": "Intelligent",
                    "TradeAction": "BUY",
                    "AdvancedOptions": {
                      "MarketActivationRules": [
                        {
                          "RuleType": "Price",
                          "Symbol": "EDZ22",
                          "Predicate": "Gt",
                          "TriggerKey": "STTN",
                          "Price": "10000.01"
                        }
                      ],
                      "TimeActivationRules": [
                        {
                          "TimeUtc": "0001-01-01T23:59:59.000Z"
                        }
                      ]
                    }
                  }
                },
                "Sell Limit Order - Time Activation": {
                  "value": {
                    "AccountID": "123456782",
                    "TimeInForce": {
                      "Duration": "GTC"
                    },
                    "OrderType": "Limit",
                    "LimitPrice": "300",
                    "Quantity": "1",
                    "Route": "Intelligent",
                    "Symbol": "MSFT",
                    "TradeAction": "Sell",
                    "AdvancedOptions": {
                      "TimeActivationRules": [
                        {
                          "TimeUtc": "0001-01-01T18:50:00.000Z"
                        }
                      ]
                    }
                  }
                },
                "Reverse Long Position (Stocks)": {
                  "value": {
                    "AccountID": "123456782",
                    "TimeInForce": {
                      "Duration": "Day"
                    },
                    "Quantity": "100",
                    "OrderType": "Market",
                    "Symbol": "MSFT",
                    "TradeAction": "SELL",
                    "Route": "Intelligent",
                    "OSOs": [
                      {
                        "Type": "NORMAL",
                        "Orders": [
                          {
                            "AccountID": "123456782",
                            "TimeInForce": {
                              "Duration": "Day"
                            },
                            "Quantity": "100",
                            "OrderType": "Market",
                            "Symbol": "MSFT",
                            "TradeAction": "SELLSHORT",
                            "Route": "Intelligent"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OrderResponses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderResponses"
                  }
                },
                "example": {
                  "Orders": [
                    {
                      "Message": "Sent order: Sell 1 MSFT @ Market",
                      "OrderID": "286179829"
                    },
                    {
                      "Message": "Sent order: Sell 1 MSFT @ 232.86 Stop Market",
                      "OrderID": "286179830"
                    },
                    {
                      "Message": "Sent order: Buy 1 MSFT @ Market",
                      "OrderID": "286179831"
                    }
                  ],
                  "Errors": [
                    {
                      "Error": "FAILED",
                      "Message": "Order failed. Reason: Type = LMT has invalid Price greater than absolute maximum",
                      "OrderID": "1234567"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "orderRequest",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url 'https://api.tradestation.com/v3/orderexecution/orders' \\\n  --header 'Authorization: Bearer TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"AccountID\":\"123456782\",\"Symbol\":\"MSFT\",\"Quantity\":\"10\",\"OrderType\":\"Market\",\"TradeAction\":\"BUY\",\"TimeInForce\":{\"Duration\":\"DAY\"},\"Route\":\"Intelligent\"}'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.tradestation.com/v3/orderexecution/orders',\n  headers: {'content-type': 'application/json', Authorization: 'Bearer TOKEN'},\n  body: {\n    AccountID: '123456782',\n    Symbol: 'MSFT',\n    Quantity: '10',\n    OrderType: 'Market',\n    TradeAction: 'BUY',\n    TimeInForce: {Duration: 'DAY'},\n    Route: 'Intelligent'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/orderexecution/orders\"\n\npayload = {\n    \"AccountID\": \"123456782\",\n    \"Symbol\": \"MSFT\",\n    \"Quantity\": \"10\",\n    \"OrderType\": \"Market\",\n    \"TradeAction\": \"BUY\",\n    \"TimeInForce\": {\"Duration\": \"DAY\"},\n    \"Route\": \"Intelligent\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer TOKEN\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/orderexecution/orders\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n    Content = new StringContent(\"{\\\"AccountID\\\":\\\"123456782\\\",\\\"Symbol\\\":\\\"MSFT\\\",\\\"Quantity\\\":\\\"10\\\",\\\"OrderType\\\":\\\"Market\\\",\\\"TradeAction\\\":\\\"BUY\\\",\\\"TimeInForce\\\":{\\\"Duration\\\":\\\"DAY\\\"},\\\"Route\\\":\\\"Intelligent\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/orderexecution/orders/{orderID}": {
      "put": {
        "tags": [
          "Order Execution"
        ],
        "description": "Replaces an active order with a modified version of that order. You cannot update an order that has been filled.\nRequest valid for `Cash`, `Margin`, `Futures`, and `DVP` account types.",
        "operationId": "ReplaceOrder",
        "summary": "Replace Order",
        "parameters": [
          {
            "name": "orderID",
            "in": "path",
            "description": "OrderID for order to replace. Equity, option or future orderIDs should not include dashes (E.g. `1-2345-6789`). Valid format orderId=`123456789`",
            "required": true,
            "schema": {
              "type": "string",
              "example": 123456789
            }
          }
        ],
        "requestBody": {
          "description": "Order to replace.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderReplaceRequest"
              },
              "examples": {
                "Limit Order": {
                  "value": {
                    "Quantity": "10",
                    "LimitPrice": "132.52"
                  }
                },
                "Stop Market Order": {
                  "value": {
                    "Quantity": "10",
                    "StopPrice": "50.60"
                  }
                },
                "Stop Limit Order": {
                  "value": {
                    "Quantity": "10",
                    "LimitPrice": "200.00",
                    "StopPrice": "215.00"
                  }
                },
                "Trailing Stop (Amount)": {
                  "value": {
                    "Quantity": "10",
                    "AdvancedOptions": {
                      "TrailingStop": {
                        "Amount": "2.11"
                      }
                    }
                  }
                },
                "Trailing Stop (Percent)": {
                  "value": {
                    "Quantity": "10",
                    "AdvancedOptions": {
                      "TrailingStop": {
                        "Percent": "5.0"
                      }
                    }
                  }
                },
                "Convert to Market": {
                  "value": {
                    "OrderType": "Market"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OrderResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponse"
                },
                "example": {
                  "Message": "Cancel/Replace order sent.",
                  "OrderID": "123456789"
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "orderRequest",
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request PUT \\\n  --url 'https://api.tradestation.com/v3/orderexecution/orders/123456789' \\\n  --header 'Authorization: Bearer TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"Quantity\":\"10\",\"LimitPrice\":\"132.52\"}'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.tradestation.com/v3/orderexecution/orders/123456789',\n  headers: {'content-type': 'application/json', Authorization: 'Bearer TOKEN'},\n  body: {Quantity: '10', LimitPrice: '132.52'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/orderexecution/orders/123456789\"\n\npayload = {\n    \"Quantity\": \"10\",\n    \"LimitPrice\": \"132.52\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer TOKEN\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/orderexecution/orders/123456789\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n    Content = new StringContent(\"{\\\"Quantity\\\":\\\"10\\\",\\\"LimitPrice\\\":\\\"132.52\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      },
      "delete": {
        "tags": [
          "Order Execution"
        ],
        "description": "Cancels an active order. Request valid for all account types.",
        "operationId": "CancelOrder",
        "summary": "Cancel Order",
        "parameters": [
          {
            "name": "orderID",
            "in": "path",
            "description": "Order ID to cancel. Equity, option or future orderIDs should not include dashes (E.g. `1-2345-6789`). Valid format orderId=`123456789`",
            "required": true,
            "schema": {
              "type": "string",
              "example": 123456789
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OrderResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponse"
                },
                "example": {
                  "Message": "Order successfully canceled.",
                  "OrderID": "123456789"
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request DELETE \\\n  --url 'https://api.tradestation.com/v3/orderexecution/orders/123456789' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.tradestation.com/v3/orderexecution/orders/123456789',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/orderexecution/orders/123456789\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"DELETE\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Delete,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/orderexecution/orders/123456789\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/marketdata/barcharts/{symbol}": {
      "get": {
        "tags": [
          "MarketData"
        ],
        "description": "Fetches marketdata bars for the given symbol, interval, and timeframe. The maximum amount of intraday bars a user can fetch is 57,600 per request. This is calculated either by the amount of barsback or bars within a timeframe requested.",
        "operationId": "GetBars",
        "summary": "Get Bars",
        "parameters": [
          {
            "name": "symbol",
            "in": "path",
            "description": "The valid symbol string.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "MSFT"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "Default: `1`.  Interval that each bar will consist of -  for minute bars, the number of minutes aggregated in a single bar.  For crypto symbols, valid values are: `1`, `5`, `15`, `30`, `60`, `240`, `480`.  For bar units other than minute, value must be `1`.  For unit `Minute` the max allowed `Interval` is 1440.",
            "schema": {
              "type": "string",
              "example": "1"
            }
          },
          {
            "name": "unit",
            "in": "query",
            "description": "Default: `Daily`. The unit of time for each bar interval. Valid values are: `Minute, Daily, Weekly, Monthly`.",
            "schema": {
              "type": "string",
              "example": "Daily"
            }
          },
          {
            "name": "barsback",
            "in": "query",
            "description": "Default: `1`.  Number of bars back to fetch (or retrieve). The maximum number of intraday bars back that a user can query is 57,600. There is no limit on daily, weekly, or monthly bars. This parameter is mutually exclusive with `firstdate`",
            "schema": {
              "type": "string",
              "example": "5"
            }
          },
          {
            "name": "firstdate",
            "in": "query",
            "description": "Does not have a default value. The first date formatted as `YYYY-MM-DD`,`2020-04-20T18:00:00Z`. This parameter is mutually exclusive with `barsback`.",
            "schema": {
              "type": "string",
              "example": "2020-12-05T21:00:00Z"
            }
          },
          {
            "name": "lastdate",
            "in": "query",
            "description": "Defaults to current timestamp. The last date formatted as `YYYY-MM-DD`,`2020-04-20T18:00:00Z`. This parameter is mutually exclusive with `startdate` and should be used instead of that parameter, since `startdate` is now deprecated.",
            "schema": {
              "type": "string",
              "example": "2020-12-05T21:00:00Z"
            }
          },
          {
            "name": "sessiontemplate",
            "in": "query",
            "description": "United States (US) stock market session templates, that extend bars returned to include \nthose outside of the regular trading session. Ignored for non-US equity symbols. Valid values are:\n`USEQPre`, `USEQPost`, `USEQPreAndPost`, `USEQ24Hour`,`Default`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Defaults to current timestamp. The last date formatted as `YYYY-MM-DD`,`2020-04-20T18:00:00Z`. This parameter is mutually exclusive with `lastdate`. This parameter is deprecated; use `lastdate` instead of `startdate`.",
            "schema": {
              "type": "string",
              "example": "2020-12-05T21:00:00Z"
            },
            "deprecated": true
          }
        ],
        "responses": {
          "200": {
            "description": "Bars",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bars"
                },
                "example": {
                  "Bars": [
                    {
                      "High": "218.32",
                      "Low": "212.42",
                      "Open": "214.02",
                      "Close": "216.39",
                      "TimeStamp": "2020-11-04T21:00:00Z",
                      "TotalVolume": "42311777",
                      "DownTicks": 231021,
                      "DownVolume": 19575455,
                      "OpenInterest": "0",
                      "IsRealtime": false,
                      "IsEndOfHistory": false,
                      "TotalTicks": 460552,
                      "UnchangedTicks": 0,
                      "UnchangedVolume": 0,
                      "UpTicks": 229531,
                      "UpVolume": 22736321,
                      "Epoch": 1604523600000,
                      "BarStatus": "Closed"
                    },
                    {
                      "High": "224.12",
                      "Low": "221.15",
                      "Open": "222.04",
                      "Close": "223.29",
                      "TimeStamp": "2020-11-05T21:00:00Z",
                      "TotalVolume": "36080137",
                      "DownTicks": 183013,
                      "DownVolume": 17344601,
                      "OpenInterest": "0",
                      "IsRealtime": false,
                      "IsEndOfHistory": false,
                      "TotalTicks": 361836,
                      "UnchangedTicks": 0,
                      "UnchangedVolume": 0,
                      "UpTicks": 178823,
                      "UpVolume": 18735535,
                      "Epoch": 1604610000000,
                      "BarStatus": "Closed"
                    },
                    {
                      "High": "224.36",
                      "Low": "218.03",
                      "Open": "222.26",
                      "Close": "223.72",
                      "TimeStamp": "2020-11-06T21:00:00Z",
                      "TotalVolume": "25231895",
                      "DownTicks": 133711,
                      "DownVolume": 11316342,
                      "OpenInterest": "0",
                      "IsRealtime": false,
                      "IsEndOfHistory": false,
                      "TotalTicks": 264709,
                      "UnchangedTicks": 0,
                      "UnchangedVolume": 0,
                      "UpTicks": 130998,
                      "UpVolume": 13915552,
                      "Epoch": 1604696400000,
                      "BarStatus": "Closed"
                    },
                    {
                      "High": "228.12",
                      "Low": "217.88",
                      "Open": "224.44",
                      "Close": "218.39",
                      "TimeStamp": "2020-11-09T21:00:00Z",
                      "TotalVolume": "44394950",
                      "DownTicks": 235457,
                      "DownVolume": 21574898,
                      "OpenInterest": "0",
                      "IsRealtime": false,
                      "IsEndOfHistory": false,
                      "TotalTicks": 465313,
                      "UnchangedTicks": 0,
                      "UnchangedVolume": 0,
                      "UpTicks": 229856,
                      "UpVolume": 22820052,
                      "Epoch": 1604955600000,
                      "BarStatus": "Closed"
                    },
                    {
                      "High": "216.5",
                      "Low": "209.72",
                      "Open": "214.5",
                      "Close": "211.01",
                      "TimeStamp": "2020-11-10T21:00:00Z",
                      "TotalVolume": "44045120",
                      "DownTicks": 255158,
                      "DownVolume": 24260371,
                      "OpenInterest": "0",
                      "IsRealtime": false,
                      "IsEndOfHistory": false,
                      "TotalTicks": 504261,
                      "UnchangedTicks": 0,
                      "UnchangedVolume": 0,
                      "UpTicks": 249103,
                      "UpVolume": 19784749,
                      "Epoch": 1605042000000,
                      "BarStatus": "Closed"
                    },
                    {
                      "High": "218.04",
                      "Low": "212.2",
                      "Open": "212.39",
                      "Close": "216.55",
                      "TimeStamp": "2020-11-11T21:00:00Z",
                      "TotalVolume": "29440788",
                      "DownTicks": 136081,
                      "DownVolume": 13168065,
                      "OpenInterest": "0",
                      "IsRealtime": false,
                      "IsEndOfHistory": false,
                      "TotalTicks": 270657,
                      "UnchangedTicks": 0,
                      "UnchangedVolume": 0,
                      "UpTicks": 134576,
                      "UpVolume": 16272722,
                      "Epoch": 1605128400000,
                      "BarStatus": "Closed"
                    },
                    {
                      "High": "219.11",
                      "Low": "214.46",
                      "Open": "217.21",
                      "Close": "215.44",
                      "TimeStamp": "2020-11-12T21:00:00Z",
                      "TotalVolume": "21616115",
                      "DownTicks": 122980,
                      "DownVolume": 12337101,
                      "OpenInterest": "0",
                      "IsRealtime": false,
                      "IsEndOfHistory": true,
                      "TotalTicks": 245221,
                      "UnchangedTicks": 0,
                      "UnchangedVolume": 0,
                      "UpTicks": 122241,
                      "UpVolume": 9279014,
                      "Epoch": 1605214800000,
                      "BarStatus": "Closed"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/marketdata/barcharts/MSFT' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/marketdata/barcharts/MSFT',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/marketdata/barcharts/MSFT\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/marketdata/barcharts/MSFT\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/marketdata/stream/barcharts/{symbol}": {
      "get": {
        "tags": [
          "MarketData"
        ],
        "description": "Streams marketdata bars for the given symbol, interval, and timeframe.",
        "operationId": "StreamBars",
        "summary": "Stream Bars",
        "parameters": [
          {
            "name": "symbol",
            "in": "path",
            "description": "The valid symbol string.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "MSFT"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "Interval that each bar will consist of -  for minute bars, the number of\nminutes aggregated in a single bar.  For crypto symbols, valid values are:\n`1`, `5`, `15`, `30`, `60`, `240`, `480`.  For bar units other than minute, value must be `1`.",
            "schema": {
              "type": "string",
              "example": "1",
              "default": "1"
            }
          },
          {
            "name": "unit",
            "in": "query",
            "description": "Unit of time for each bar interval. Valid values are: `minute`, `daily`, `weekly`, `monthly`, and `second` (crypto only).",
            "schema": {
              "type": "string",
              "example": "Daily",
              "default": "Daily"
            }
          },
          {
            "name": "barsback",
            "in": "query",
            "description": "The bars back - for crypto symbols, the max value is 500. for non-crypto the max value is 57600.",
            "schema": {
              "type": "string",
              "example": "5"
            }
          },
          {
            "name": "sessiontemplate",
            "in": "query",
            "description": "United States (US) stock market session templates, that extend bars returned to include \nthose outside of the regular trading session. Ignored for non-US equity symbols. Valid values are:\n`USEQPre`, `USEQPost`, `USEQPreAndPost`, `USEQ24Hour`, `Default`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bar",
            "content": {
              "application/vnd.tradestation.streams.v2+json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Bar"
                    },
                    {
                      "$ref": "#/components/schemas/Heartbeat"
                    },
                    {
                      "$ref": "#/components/schemas/StreamErrorResponse"
                    }
                  ]
                },
                "examples": {
                  "Bar": {
                    "value": {
                      "High": "217.32",
                      "Low": "216.2",
                      "Open": "217.32",
                      "Close": "217",
                      "TimeStamp": "2020-11-12T17:00:00Z",
                      "TotalVolume": "807033",
                      "DownTicks": 2091,
                      "DownVolume": 396976,
                      "OpenInterest": "0",
                      "IsRealtime": false,
                      "IsEndOfHistory": false,
                      "TotalTicks": 4296,
                      "UnchangedTicks": 0,
                      "UnchangedVolume": 0,
                      "UpTicks": 2205,
                      "UpVolume": 410057,
                      "Epoch": 1605200400000,
                      "BarStatus": "Open"
                    }
                  },
                  "Heartbeat": {
                    "value": {
                      "Heartbeat": 1,
                      "Timestamp": "2021-03-02T18:01:23Z"
                    }
                  },
                  "Error": {
                    "value": {
                      "Error": "GoAway",
                      "Message": "The server is about to shut down."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/vnd.tradestation.streams.v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/vnd.tradestation.streams.v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/vnd.tradestation.streams.v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/vnd.tradestation.streams.v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/vnd.tradestation.streams.v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/vnd.tradestation.streams.v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/vnd.tradestation.streams.v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/marketdata/stream/barcharts/MSFT' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/marketdata/stream/barcharts/MSFT',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options).on('data', function (data) {\n  console.log(data.toString());\n}).on('error', function(err) {\n  console.error(err)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/marketdata/stream/barcharts/MSFT\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, stream=True)\n\nfor line in response.iter_lines():\n    if line:\n        print(line)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/marketdata/stream/barcharts/MSFT\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead))\n{\n    response.EnsureSuccessStatusCode();\n    using (var stream = await response.Content.ReadAsStreamAsync())\n    {\n        using (StreamReader reader = new StreamReader(stream))\n        {\n            while (!reader.EndOfStream)\n            {\n                var line = await reader.ReadLineAsync();\n                if (line == null) break;\n                Console.WriteLine(line);\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v3/marketdata/symbollists/cryptopairs/symbolnames": {
      "get": {
        "tags": [
          "MarketData"
        ],
        "description": "Fetches all crypto Symbol Names information.",
        "operationId": "GetCryptoSymbolNames",
        "summary": "Get Crypto Symbol Names",
        "responses": {
          "200": {
            "description": "SymbolNames",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SymbolNames"
                },
                "example": {
                  "SymbolNames": [
                    "BTCUSD",
                    "ETHBTC",
                    "ETHUSD",
                    "LTCBTC",
                    "LTCUSD",
                    "USDCUSD",
                    "XRPUSD",
                    "BCHUSD"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/marketdata/symbollists/cryptopairs/symbolnames' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/marketdata/symbollists/cryptopairs/symbolnames',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/marketdata/symbollists/cryptopairs/symbolnames\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/marketdata/symbollists/cryptopairs/symbolnames\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/marketdata/symbols/{symbols}": {
      "get": {
        "tags": [
          "MarketData"
        ],
        "description": "Fetches symbol details and formatting information for one or more symbols and relevant errors, if any. Use provided formatting objects to display provided prices and quantities from other API endpoints.\n\n* **Decimal** prices should be displayed as decimals. For instance, for a given price of `123.2` the price should be displayed as `123.20`.\n\n* **Fraction** price display formatting should be displayed with the `PriceFormat.Fraction` in the denominator of the fraction part of the given number. For instance, given a price of `534.5` and a `PriceFormat.Fraction` of `8`, the number should be shown as `534 4/8`.\n\n* For **SubFractional** price display formatting, the following equations can be used to derive the display format of `a'b.c` for a given price. For instance, given a price of `125.92969`, a `PriceFormat.Fraction` of `32` and a `PriceFormat.Subfraction` of `4`, the number should be displayed as `125'29.7`.\n```\nx (Price)                   = 125.92969\ny (PriceFormat.Fraction)    = 32\nz (PriceFormat.SubFraction) = 4\n```\n```\na = trunc(x)\nb = trunc(frac(x) * y)\nc = trunc(((frac(x) - (b/y)) * z * y) / (z/10))\n```",
        "operationId": "GetSymbolDetails",
        "summary": "Get Symbol Details",
        "parameters": [
          {
            "name": "symbols",
            "in": "path",
            "description": "List of valid symbols in comma separated format; for example `\"MSFT,BTCUSD\"`, no more than 50 symbols per request.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "MSFT,BTCUSD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SymbolDetailsResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SymbolDetailsResponse"
                },
                "example": {
                  "Symbols": [
                    {
                      "AssetType": "STOCK",
                      "Country": "United States",
                      "Currency": "USD",
                      "Description": "Microsoft Corp",
                      "Exchange": "NASDAQ",
                      "Symbol": "MSFT",
                      "Root": "MSFT",
                      "PriceFormat": {
                        "Format": "Decimal",
                        "Decimals": "2",
                        "IncrementStyle": "Simple",
                        "Increment": "0.01",
                        "PointValue": "1"
                      },
                      "QuantityFormat": {
                        "Format": "Decimal",
                        "Decimals": "0",
                        "IncrementStyle": "Simple",
                        "Increment": "1",
                        "MinimumTradeQuantity": "1"
                      }
                    },
                    {
                      "AssetType": "FUTURE",
                      "Country": "United States",
                      "Currency": "USD",
                      "Description": "Corn Continuous Contract [Mar21]",
                      "Exchange": "CBOT",
                      "FutureType": "Electronic",
                      "Symbol": "@C",
                      "Root": "C",
                      "Underlying": "CH21",
                      "PriceFormat": {
                        "Format": "Fraction",
                        "Fraction": "8",
                        "IncrementStyle": "Simple",
                        "Increment": "0.25",
                        "PointValue": "50"
                      },
                      "QuantityFormat": {
                        "Format": "Decimal",
                        "Decimals": "0",
                        "IncrementStyle": "Simple",
                        "Increment": "1",
                        "MinimumTradeQuantity": "1"
                      }
                    },
                    {
                      "AssetType": "FUTURE",
                      "Country": "United States",
                      "Currency": "USD",
                      "Description": "5 Yr U.S.Treasury Notes Continuous Contract [Mar21]",
                      "Exchange": "CBOT",
                      "FutureType": "Electronic",
                      "Symbol": "@FV",
                      "Root": "FV",
                      "Underlying": "FVH21",
                      "PriceFormat": {
                        "Format": "SubFraction",
                        "Fraction": "32",
                        "SubFraction": "4",
                        "IncrementStyle": "Simple",
                        "Increment": "0.0078125",
                        "PointValue": "1000"
                      },
                      "QuantityFormat": {
                        "Format": "Decimal",
                        "Decimals": "0",
                        "IncrementStyle": "Simple",
                        "Increment": "1",
                        "MinimumTradeQuantity": "1"
                      }
                    }
                  ],
                  "Errors": []
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/marketdata/symbols/MSFT,BTCUSD' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/marketdata/symbols/MSFT,BTCUSD',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/marketdata/symbols/MSFT,BTCUSD\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/marketdata/symbols/MSFT,BTCUSD\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/orderexecution/activationtriggers": {
      "get": {
        "tags": [
          "Order Execution"
        ],
        "description": "To place orders with activation triggers, a valid TriggerKey must be sent with the order. This resource provides the available trigger methods with their corresponding key.",
        "operationId": "GetActivationTriggers",
        "summary": "Get Activation Triggers",
        "responses": {
          "200": {
            "description": "GetActivationTriggers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationTriggers"
                },
                "example": {
                  "ActivationTriggers": [
                    {
                      "Key": "STT",
                      "Name": "Single Trade Tick",
                      "Description":
                      "One trade tick must print within your stop price to trigger your stop."
                    },
                    {
                      "Key": "STTN",
                      "Name": "Single Trade Tick Within NBBO",
                      "Description":
"One trade tick within the National Best Bid or Offer must print within your stop price to trigger your stop."
                    },
                    {
                      "Key": "SBA",
                      "Name": "Single Bid/Ask Tick",
                      "Description": "Buy/Cover Orders: One Ask tick must print within your stop price to trigger your stop. Sell/Short Orders: One Bid tick must print within your stop price to trigger your stop."
                    },
                    {
                      "Key": "SAB",
                      "Name": "Single Ask/Bid Tick",
                      "Description": "Buy/Cover Orders: One Bid tick must print within your stop price to trigger your stop. Sell/Short Orders: One Ask tick must print within your stop price to trigger your stop."
                    },
                    {
                      "Key": "DTT",
                      "Name": "Double Trade Tick",
                      "Description": "Two consecutive trade ticks must print within your stop price to trigger your stop."
                    },
                    {
                      "Key": "DTTN",
                      "Name": "Double Trade Tick Within NBBO ",
                      "Description": "Two consecutive trade ticks within the National Best Bid or Offer must print within your stop price to trigger your stop."
                    },
                    {
                      "Key": "DBA",
                      "Name": "Double Bid/Ask Tick",
                      "Description": "Buy/Cover Orders: Two consecutive Ask ticks must print within your stop price to trigger your stop. Sell/Short Orders: Two consecutive Bid ticks must print within your stop price to trigger your stop."
                    },
                    {
                      "Key": "DAB",
                      "Name": "Double Ask/Bid Tick",
                      "Description": "Buy/Cover Orders: Two consecutive Bid ticks must print within your stop price to trigger your stop. Sell/Short Orders: Two consecutive Ask ticks must print within your stop price to trigger your stop."
                    },
                    {
                      "Key": "TTT",
                      "Name": "Twice Trade Tick",
                      "Description": "Two trade ticks must print within your stop price to trigger your stop."
                    },
                    {
                      "Key": "TTTN",
                      "Name": "Twice Trade Tick Within NBBO",
                      "Description": "Two trade ticks within the National Best Bid or Offer must print within your stop price to trigger your stop."
                    },
                    {
                      "Key": "TBA",
                      "Name": "Twice Bid/Ask Tick",
                      "Description": "Buy/Cover Orders: Two Ask ticks must print within your stop price to trigger your stop. Sell/Short Orders: Two Bid ticks must print within your stop price to trigger your stop."
                    },
                    {
                      "Key": "TAB",
                      "Name": "Twice Ask/Bid Tick",
                      "Description": "Buy/Cover Orders: Two Bid ticks must print within your stop price to trigger your stop. Sell/Short Orders: Two Ask ticks must print within your stop price to trigger your stop."
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/orderexecution/activationtriggers' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/orderexecution/activationtriggers',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/orderexecution/activationtriggers\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/orderexecution/activationtriggers\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/orderexecution/routes": {
      "get": {
        "tags": [
          "Order Execution"
        ],
        "description": "Returns a list of valid routes that a client can specify when posting an order.",
        "operationId": "Routes",
        "summary": "Get Routes",
        "responses": {
          "200": {
            "description": "Routes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Routes"
                },
                "example": {
                  "Routes": [
                    {
                      "Id": "AMEX",
                      "AssetTypes": [
                        "STOCK"
                      ],
                      "Name": "AMEX"
                    },
                    {
                      "Id": "ARCA,",
                      "AssetTypes": [
                        "STOCK"
                      ],
                      "Name": "ARCX"
                    },
                    {
                      "Id": "TSSR",
                      "AssetTypes": [
                        "CRYPTO"
                      ],
                      "Name": "TSSR"
                    },
                    {
                      "Id": "USDC",
                      "AssetTypes": [
                        "CRYPTO"
                      ],
                      "Name": "USDC"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/orderexecution/routes' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/orderexecution/routes',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/orderexecution/routes\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/orderexecution/routes\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/marketdata/options/expirations/{underlying}": {
      "get": {
        "tags": [
          "MarketData"
        ],
        "description": "Get the available option contract expiration dates for the underlying symbol.",
        "operationId": "GetOptionExpirations",
        "summary": "Get Option Expirations",
        "parameters": [
          {
            "name": "underlying",
            "in": "path",
            "description": "The symbol for the underlying security on which the option contracts are based. The underlying symbol must be an equity or index.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AAPL"
            }
          },
          {
            "name": "strikePrice",
            "in": "query",
            "description": "Strike price. If provided, only expirations for that strike price will be returned.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expirations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expirations"
                },
                "example": {
                  "Expirations": [
                    {
                      "Date": "2021-12-17T00:00:00Z",
                      "Type": "Monthly"
                    },
                    {
                      "Date": "2021-12-23T00:00:00Z",
                      "Type": "Weekly"
                    },
                    {
                      "Date": "2021-12-31T00:00:00Z",
                      "Type": "Quarterly"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/marketdata/options/expirations/AAPL' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/marketdata/options/expirations/AAPL',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/marketdata/options/expirations/AAPL\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/marketdata/options/expirations/AAPL\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/marketdata/options/riskreward": {
      "post": {
        "tags": [
          "MarketData"
        ],
        "description": "Analyze the risk vs. reward of a potential option trade. This endpoint is not applicable for option spread types with different expirations, such as Calendar and Diagonal.",
        "operationId": "GetOptionRiskReward",
        "summary": "Get Option Risk Reward",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskRewardAnalysisInput"
              },
              "example": {
                "SpreadPrice": 0.24,
                "Legs": [
                  {
                    "Symbol": "AAPL 211217C150",
                    "Quantity": 1,
                    "TradeAction": "BUY"
                  },
                  {
                    "Symbol": "AAPL 211217C152.5",
                    "Quantity": 1,
                    "TradeAction": "SELL"
                  },
                  {
                    "Symbol": "AAPL 211217C155",
                    "Quantity": 1,
                    "TradeAction": "SELL"
                  },
                  {
                    "Symbol": "AAPL 211217C157.5",
                    "Quantity": 1,
                    "TradeAction": "BUY"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "RiskRewardAnalysisResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskRewardAnalysisResult"
                },
                "example": {
                  "MaxGainIsInfinite": false,
                  "AdjustedMaxGain": "482",
                  "MaxLossIsInfinite": false,
                  "AdjustedMaxLoss": "-18",
                  "BreakevenPoints": [
                    "150.09",
                    "157.41"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url 'https://api.tradestation.com/v3/marketdata/options/riskreward' \\\n  --header 'Authorization: Bearer TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"SpreadPrice\":0,\"Legs\":[{\"Symbol\":\"string\",\"Quantity\":0,\"TradeAction\":\"BUY\"}]}'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.tradestation.com/v3/marketdata/options/riskreward',\n  headers: {'content-type': 'application/json', Authorization: 'Bearer TOKEN'},\n  body: {SpreadPrice: 0, Legs: [{Symbol: 'string', Quantity: 0, TradeAction: 'BUY'}]},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/marketdata/options/riskreward\"\n\npayload = {\n    \"SpreadPrice\": 0,\n    \"Legs\": [\n        {\n            \"Symbol\": \"string\",\n            \"Quantity\": 0,\n            \"TradeAction\": \"BUY\"\n        }\n    ]\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"Authorization\": \"Bearer TOKEN\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/marketdata/options/riskreward\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n    Content = new StringContent(\"{\\\"SpreadPrice\\\":0,\\\"Legs\\\":[{\\\"Symbol\\\":\\\"string\\\",\\\"Quantity\\\":0,\\\"TradeAction\\\":\\\"BUY\\\"}]}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/marketdata/options/spreadtypes": {
      "get": {
        "tags": [
          "MarketData"
        ],
        "description": "Get the available spread types for option chains.",
        "operationId": "GetOptionSpreadTypes",
        "summary": "Get Option Spread Types",
        "responses": {
          "200": {
            "description": "SpreadTypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpreadTypes"
                },
                "example": {
                  "SpreadTypes": [
                    {
                      "Name": "Single",
                      "StrikeInterval": false,
                      "ExpirationInterval": false
                    },
                    {
                      "Name": "Straddle",
                      "StrikeInterval": false,
                      "ExpirationInterval": false
                    },
                    {
                      "Name": "Vertical",
                      "StrikeInterval": true,
                      "ExpirationInterval": false
                    },
                    {
                      "Name": "Strangle",
                      "StrikeInterval": true,
                      "ExpirationInterval": false
                    },
                    {
                      "Name": "RatioBack1x2",
                      "StrikeInterval": true,
                      "ExpirationInterval": false
                    },
                    {
                      "Name": "RatioBack1x3",
                      "StrikeInterval": true,
                      "ExpirationInterval": false
                    },
                    {
                      "Name": "RatioBack2x3",
                      "StrikeInterval": true,
                      "ExpirationInterval": false
                    },
                    {
                      "Name": "Butterfly",
                      "StrikeInterval": true,
                      "ExpirationInterval": false
                    },
                    {
                      "Name": "IronButterfly",
                      "StrikeInterval": true,
                      "ExpirationInterval": false
                    },
                    {
                      "Name": "Condor",
                      "StrikeInterval": true,
                      "ExpirationInterval": false
                    },
                    {
                      "Name": "IronCondor",
                      "StrikeInterval": true,
                      "ExpirationInterval": false
                    },
                    {
                      "Name": "Covered",
                      "StrikeInterval": false,
                      "ExpirationInterval": false
                    },
                    {
                      "Name": "Collar",
                      "StrikeInterval": true,
                      "ExpirationInterval": false
                    },
                    {
                      "Name": "Combo",
                      "StrikeInterval": false,
                      "ExpirationInterval": false
                    },
                    {
                      "Name": "Calendar",
                      "StrikeInterval": false,
                      "ExpirationInterval": true
                    },
                    {
                      "Name": "Diagonal",
                      "StrikeInterval": true,
                      "ExpirationInterval": true
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/marketdata/options/spreadtypes' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/marketdata/options/spreadtypes',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/marketdata/options/spreadtypes\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/marketdata/options/spreadtypes\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/marketdata/options/strikes/{underlying}": {
      "get": {
        "tags": [
          "MarketData"
        ],
        "description": "Get the available strike prices for a spread type and expiration date.",
        "operationId": "GetOptionStrikes",
        "summary": "Get Option Strikes",
        "parameters": [
          {
            "name": "underlying",
            "in": "path",
            "description": "The symbol for the underlying security on which the option contracts are based. The underlying symbol must be an equity or index.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AAPL"
            }
          },
          {
            "name": "spreadType",
            "in": "query",
            "description": "The name of the spread type to get the strikes for. This value can be obtained from the [Get Option Spread Types](#operation/GetOptionSpreadTypes) endpoint.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Butterfly",
              "default": "Single"
            }
          },
          {
            "name": "strikeInterval",
            "in": "query",
            "description": "Specifies the desired interval between the strike prices in a spread. It must be greater than or equal to 1. A value of 1 uses consecutive strikes; a value of 2 skips one between strikes; and so on.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "Date on which the option contract expires; must be a valid expiration date. Defaults to the next contract expiration date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "12-17-2021"
            }
          },
          {
            "name": "expiration2",
            "in": "query",
            "description": "Second contract expiration date required for Calendar and Diagonal spreads.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "12-18-2021"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Option strikes for the underlying equity or index specified in the endpoint path. An empty strikes collection will be returned if the underlying symbol has no options or if there are no options that satisfy the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Strikes"
                },
                "example": {
                  "SpreadType": "Butterfly",
                  "Strikes": [
                    [
                      "145",
                      "150",
                      "155"
                    ],
                    [
                      "150",
                      "155",
                      "160"
                    ]
                  ]
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/marketdata/options/strikes/AAPL' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/marketdata/options/strikes/AAPL',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/marketdata/options/strikes/AAPL\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/marketdata/options/strikes/AAPL\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/marketdata/stream/options/chains/{underlying}": {
      "get": {
        "tags": [
          "MarketData"
        ],
        "description": "Stream a chain of option spreads for a given underlying symbol, spread type, and expiration.\nA maximum of 10 concurrent streams is allowed.\n\nFor options calculations, the WebAPI uses the following:\n* 90 days for historical volatility of the underlying\n* Bjerksund and Stensland option pricing model\n* Ask price for price of the option\n",
        "operationId": "GetOptionChain",
        "summary": "Stream Option Chain",
        "parameters": [
          {
            "name": "underlying",
            "in": "path",
            "description": "The symbol for the underlying security on which the option contracts are based.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AAPL"
            }
          },
          {
            "name": "expiration",
            "in": "query",
            "description": "Date on which the option contract expires; must be a valid expiration date. Defaults to the next contract expiration date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "12-17-2021"
            }
          },
          {
            "name": "expiration2",
            "in": "query",
            "description": "Second contract expiration date required for Calendar and Diagonal spreads.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "12-17-2021"
            }
          },
          {
            "name": "strikeProximity",
            "in": "query",
            "description": "Specifies the number of spreads to display above and below the priceCenter.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "spreadType",
            "in": "query",
            "description": "Specifies the name of the spread type to use.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Butterfly",
              "default": "Single"
            }
          },
          {
            "name": "riskFreeRate",
            "in": "query",
            "description": "The theoretical rate of return of an investment with zero risk. Defaults to the current quote for $IRX.X. The percentage rate should be specified as a decimal value. For example, to use 2% for the rate, pass in 0.02.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "priceCenter",
            "in": "query",
            "description": "Specifies the strike price center. Defaults to the last quoted price for the underlying security.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "strikeInterval",
            "in": "query",
            "description": "Specifies the desired interval between the strike prices in a spread. It must be greater than or equal to 1. A value of 1 uses consecutive strikes; a value of 2 skips one between strikes; and so on.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "enableGreeks",
            "in": "query",
            "description": "Specifies whether or not greeks properties are returned.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "strikeRange",
            "in": "query",
            "description": "* If the filter is `ITM` (in-the-money), the chain includes only spreads that have an intrinsic value greater than zero.\n* If the filter is `OTM` (out-of-the-money), the chain includes only spreads that have an intrinsic value equal to zero.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "All"
            }
          },
          {
            "name": "optionType",
            "in": "query",
            "description": "Filters the spreads by a specific option type. Valid values are `All`, `Call`, and `Put`.",
            "schema": {
              "type": "string",
              "default": "All"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "StreamOptionChain",
            "content": {
              "application/vnd.tradestation.streams.v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/Spread"
                },
                "example": {
                  "Delta": "0.0497",
                  "Theta": "-0.0049",
                  "Gamma": "-0.0004",
                  "Rho": "0.0005",
                  "Vega": "-0.0001",
                  "ImpliedVolatility": "0.3118",
                  "IntrinsicValue": "0",
                  "ExtrinsicValue": "0.3",
                  "TheoreticalValue": "0.2816",
                  "ProbabilityITM": "0.05",
                  "ProbabilityOTM": "0.95",
                  "ProbabilityBE": "0.0479",
                  "ProbabilityITM_IV": "0.0984",
                  "ProbabilityOTM_IV": "0.9016",
                  "ProbabilityBE_IV": "0.0956",
                  "TheoreticalValue_IV": "0.3",
                  "DailyOpenInterest": 1996,
                  "Ask": "0.7",
                  "Bid": "-0.1",
                  "Mid": "0.3",
                  "AskSize": 13,
                  "BidSize": 9,
                  "Close": "-0.44",
                  "High": "-0.19",
                  "Last": "-0.44",
                  "Low": "1.05",
                  "NetChange": "-1.01",
                  "NetChangePct": "-1.7719",
                  "Open": "0.46",
                  "PreviousClose": "0.57",
                  "Volume": 144,
                  "Side": "Put",
                  "Strikes": [
                    "332.5"
                  ],
                  "Legs": [
                    {
                      "Symbol": "MSFT 211217P332.5",
                      "Ratio": 1,
                      "StrikePrice": "332.5",
                      "Expiration": "2021-12-17T00:00:00Z",
                      "OptionType": "Put",
                      "AssetType": "StockOption"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/marketdata/stream/options/chains/AAPL' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/marketdata/stream/options/chains/AAPL',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options).on('data', function (data) {\n  console.log(data.toString());\n}).on('error', function(err) {\n  console.error(err)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/marketdata/stream/options/chains/AAPL\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, stream=True)\n\nfor line in response.iter_lines():\n    if line:\n        print(line)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/marketdata/stream/options/chains/AAPL\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead))\n{\n    response.EnsureSuccessStatusCode();\n    using (var stream = await response.Content.ReadAsStreamAsync())\n    {\n        using (StreamReader reader = new StreamReader(stream))\n        {\n            while (!reader.EndOfStream)\n            {\n                var line = await reader.ReadLineAsync();\n                if (line == null) break;\n                Console.WriteLine(line);\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v3/marketdata/stream/options/quotes": {
      "get": {
        "tags": [
          "MarketData"
        ],
        "description": "Stream price quotes and greeks for the specified option spread. A maximum of 10 concurrent streams\nis allowed. Leg indexes are expected to be sequential starting at zero. For example, if there are three legs,\nthe legs in the request should contain Legs[0], Legs[1], and Legs[2]. Note that there is no required order for\nthe Legs in the query parameters.  For example, if there are 2 legs, Legs[0].Symbol, Legs[0].Ratio, Legs[1].Symbol,\nand Legs[1].Ratio can be in any order in the query parameters.\n\nFor options calculations, the WebAPI uses the following:\n* 90 days for historical volatility of the underlying\n* Bjerksund and Stensland option pricing model\n* Ask price for price of the option\n",
        "operationId": "GetOptionQuotes",
        "summary": "Stream Option Quotes",
        "parameters": [
          {
            "name": "legs[0].Symbol",
            "required": true,
            "in": "query",
            "allowReserved": true,
            "description": "* `legs`: Individual components of a multi-part trade.\n* `[0]`: Represents the position in the legs array.\n* `Symbol`: Option contract symbol or underlying symbol to be traded for this leg. In some cases, the space in an option symbol may need to be explicitly URI encoded as %20, such as `MSFT%20220916C305`.",
            "schema": {
              "type": "string",
              "example": "MSFT 220916C305"
            }
          },
          {
            "name": "legs[0].Ratio",
            "in": "query",
            "allowReserved": true,
            "description": "* `legs`: Individual components of a multi-part trade.\n* `[0]`: Represents the position in the legs array.\n* `Ratio`: The number of option contracts or underlying shares for this leg, relative to the other legs. Use a positive number to represent a buy trade and a negative number to represent a sell trade. For example, a quote for a Butterfly spread can be requested using ratios of 1, -2, and 1: buy 1 contract of the first leg, sell 2 contracts of the second leg, and buy 1 contract of the third leg.",
            "schema": {
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "riskFreeRate",
            "in": "query",
            "description": "The theoretical rate of return of an investment with zero risk. Defaults to the current quote for $IRX.X. The percentage rate should be specified as a decimal value. For example, to use 2% for the rate, pass in 0.02.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "enableGreeks",
            "in": "query",
            "description": "Specifies whether or not greeks properties are returned.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "StreamOptionChain",
            "content": {
              "application/vnd.tradestation.streams.v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/Spread"
                },
                "example": {
                  "Delta": "0.0497",
                  "Theta": "-0.0049",
                  "Gamma": "-0.0004",
                  "Rho": "0.0005",
                  "Vega": "-0.0001",
                  "ImpliedVolatility": "0.3118",
                  "IntrinsicValue": "0",
                  "ExtrinsicValue": "0.3",
                  "TheoreticalValue": "0.2816",
                  "ProbabilityITM": "0.05",
                  "ProbabilityOTM": "0.95",
                  "ProbabilityBE": "0.0479",
                  "ProbabilityITM_IV": "0.0984",
                  "ProbabilityOTM_IV": "0.9016",
                  "ProbabilityBE_IV": "0.0956",
                  "TheoreticalValue_IV": "0.3",
                  "DailyOpenInterest": 1996,
                  "Ask": "0.7",
                  "Bid": "-0.1",
                  "Mid": "0.3",
                  "AskSize": 13,
                  "BidSize": 9,
                  "Close": "-0.44",
                  "High": "-0.19",
                  "Last": "-0.44",
                  "Low": "1.05",
                  "NetChange": "-1.01",
                  "NetChangePct": "-1.7719",
                  "Open": "0.46",
                  "PreviousClose": "0.57",
                  "Volume": 144,
                  "Side": "Put",
                  "Strikes": [
                    "332.5"
                  ],
                  "Legs": [
                    {
                      "Symbol": "MSFT 211217P332.5",
                      "Ratio": 1,
                      "StrikePrice": "332.5",
                      "Expiration": "2021-12-17T00:00:00Z",
                      "OptionType": "Put",
                      "AssetType": "StockOption"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/marketdata/stream/options/quotes?legs%5B0%5D.Symbol=MSFT%20220916C305' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/marketdata/stream/options/quotes',\n  qs: {'legs[0].Symbol': 'MSFT 220916C305'},\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options).on('data', function (data) {\n  console.log(data.toString());\n}).on('error', function(err) {\n  console.error(err)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/marketdata/stream/options/quotes\"\n\nquerystring = {\"legs[0].Symbol\":\"MSFT 220916C305\"}\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring, stream=True)\n\nfor line in response.iter_lines():\n    if line:\n        print(line)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/marketdata/stream/options/quotes?legs%5B0%5D.Symbol=MSFT%20220916C305\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead))\n{\n    response.EnsureSuccessStatusCode();\n    using (var stream = await response.Content.ReadAsStreamAsync())\n    {\n        using (StreamReader reader = new StreamReader(stream))\n        {\n            while (!reader.EndOfStream)\n            {\n                var line = await reader.ReadLineAsync();\n                if (line == null) break;\n                Console.WriteLine(line);\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v3/marketdata/quotes/{symbols}": {
      "get": {
        "tags": [
          "MarketData"
        ],
        "description": "Fetches a full snapshot of the latest Quote for the given Symbols. For realtime Quote updates, users should use the Quote Stream endpoint.",
        "operationId": "GetQuoteSnapshots",
        "summary": "Get Quote Snapshots",
        "parameters": [
          {
            "name": "symbols",
            "in": "path",
            "description": "List of valid symbols in comma separated format; for example `\"MSFT,BTCUSD\"`. No more than 100 symbols per request.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "MSFT,BTCUSD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Quote",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteSnapshot"
                },
                "examples": {
                  "Quotes": {
                    "value": {
                      "Quotes": [
                        {
                          "Symbol": "MSFT",
                          "Open": "213.65",
                          "High": "215.77",
                          "Low": "205.48",
                          "PreviousClose": "214.46",
                          "Last": "212.85",
                          "Ask": "212.87",
                          "AskSize": "300",
                          "Bid": "212.85",
                          "BidSize": "200",
                          "NetChange": "-1.61",
                          "NetChangePct": "3.5",
                          "High52Week": "232.86",
                          "High52WeekTimestamp": "2020-09-02T00:00:00Z",
                          "Low52Week": "132.52",
                          "Low52WeekTimestamp": "2020-03-23T00:00:00Z",
                          "Volume": "5852511",
                          "PreviousVolume": "24154112",
                          "Close": "212.85",
                          "DailyOpenInterest": "0",
                          "TradeTime": "2020-11-18T15:19:14Z",
                          "TickSizeTier": "0",
                          "MarketFlags": {
                            "IsDelayed": false,
                            "IsHardToBorrow": false,
                            "IsBats": false,
                            "IsHalted": false
                          },
                          "LastSize": "954",
                          "LastVenue": "ARCX",
                          "VWAP": "136.340542862433"
                        }
                      ]
                    }
                  },
                  "Errors": {
                    "value": {
                      "Errors": [
                        {
                          "Symbol": "INVALID",
                          "Error": "FAILED, INVALID SYMBOL"
                        }
                      ]
                    }
                  },
                  "Crypto Quote": {
                    "value": {
                      "Quotes": {
                        "Symbol": "BTCUSD",
                        "Last": "19412.63",
                        "Ask": "19091.229",
                        "Bid": "19734.0264",
                        "BidSize": "0.395857",
                        "TradeTime": "2022-09-06T17:42:11Z"
                      }
                    }
                  },
                  "Partial Success": {
                    "value": {
                      "Quotes": [
                        {
                          "Symbol": "MSFT",
                          "Open": "213.65",
                          "High": "215.77",
                          "Low": "205.48",
                          "PreviousClose": "214.46",
                          "Last": "212.85",
                          "Ask": "212.87",
                          "AskSize": "300",
                          "Bid": "212.85",
                          "BidSize": "200",
                          "NetChange": "-1.61",
                          "NetChangePct": "3.5",
                          "High52Week": "232.86",
                          "High52WeekTimestamp": "2020-09-02T00:00:00Z",
                          "Low52Week": "132.52",
                          "Low52WeekTimestamp": "2020-03-23T00:00:00Z",
                          "Volume": "5852511",
                          "PreviousVolume": "24154112",
                          "Close": "212.85",
                          "DailyOpenInterest": "0",
                          "TradeTime": "2020-11-18T15:19:14Z",
                          "TickSizeTier": "0",
                          "MarketFlags": {
                            "IsDelayed": false,
                            "IsHardToBorrow": false,
                            "IsBats": false,
                            "IsHalted": false
                          },
                          "LastSize": "954",
                          "LastVenue": "ARCX",
                          "VWAP": "136.340542862433"
                        }
                      ],
                      "Errors": [
                        {
                          "Symbol": "INVALID",
                          "Error": "FAILED, INVALID SYMBOL"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/marketdata/quotes/MSFT,BTCUSD' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/marketdata/quotes/MSFT,BTCUSD',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/marketdata/quotes/MSFT,BTCUSD\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/marketdata/quotes/MSFT,BTCUSD\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"
          }
        ]
      }
    },
    "/v3/marketdata/stream/quotes/{symbols}": {
      "get": {
        "tags": [
          "MarketData"
        ],
        "description": "Streams Quote changes for one or more symbols.",
        "operationId": "GetQuoteChangeStream",
        "summary": "Stream Quotes",
        "parameters": [
          {
            "name": "symbols",
            "in": "path",
            "description": "List of valid symbols in comma separated format; for example `\"MSFT,BTCUSD\"`. No more than 100 symbols per request.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "MSFT,BTCUSD"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "QuoteStream",
            "content": {
              "application/vnd.tradestation.streams.v2+json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/QuoteStream"
                    },
                    {
                      "$ref": "#/components/schemas/Heartbeat1"
                    },
                    {
                      "$ref": "#/components/schemas/StreamErrorResponse"
                    }
                  ]
                },
                "examples": {
                  "Quote": {
                    "value": {
                      "Symbol": "MSFT",
                      "Open": "213.65",
                      "PreviousClose": "214.46",
                      "Last": "212.85",
                      "Ask": "212.87",
                      "AskSize": "300",
                      "Bid": "212.85",
                      "BidSize": "200",
                      "NetChange": "-1.61",
                      "NetChangePct": "0.035",
                      "High52Week": "232.86",
                      "High52WeekTimestamp": "2020-09-02T00:00:00Z",
                      "Low52Week": "132.52",
                      "Low52WeekTimestamp": "2020-03-23T00:00:00Z",
                      "Volume": "5852511",
                      "PreviousVolume": "24154112",
                      "Close": "212.85",
                      "DailyOpenInterest": "0",
                      "TradeTime": "2020-11-18T15:19:14Z",
                      "TickSizeTier": "0",
                      "MarketFlags": {
                        "IsDelayed": false,
                        "IsHardToBorrow": false,
                        "IsBats": false,
                        "IsHalted": false
                      }
                    }
                  },
                  "Heartbeat": {
                    "value": {
                      "Heartbeat": 1,
                      "Timestamp": "2021-03-02T18:01:23Z"
                    }
                  },
                  "Error": {
                    "value": {
                      "Error": "GoAway",
                      "Message": "The server is about to shut down."
                    }
                  },
                  "Crypto Quote": {
                    "value": {
                      "Symbol": "BTCUSD",
                      "Last": "19412.63",
                      "Ask": "19091.229",
                      "Bid": "19734.0264",
                      "BidSize": "0.395857",
                      "TradeTime": "2022-09-06T17:42:11Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/marketdata/stream/quotes/MSFT,BTCUSD' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/marketdata/stream/quotes/MSFT,BTCUSD',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options).on('data', function (data) {\n  console.log(data.toString());\n}).on('error', function(err) {\n  console.error(err)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/marketdata/stream/quotes/MSFT,BTCUSD\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, stream=True)\n\nfor line in response.iter_lines():\n    if line:\n        print(line)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/marketdata/stream/quotes/MSFT,BTCUSD\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead))\n{\n    response.EnsureSuccessStatusCode();\n    using (var stream = await response.Content.ReadAsStreamAsync())\n    {\n        using (StreamReader reader = new StreamReader(stream))\n        {\n            while (!reader.EndOfStream)\n            {\n                var line = await reader.ReadLineAsync();\n                if (line == null) break;\n                Console.WriteLine(line);\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v3/marketdata/stream/marketdepth/quotes/{symbol}": {
      "get": {
        "tags": [
          "MarketData"
        ],
        "description": "Stream market depth quotes for equities, futures and stock options. A separate quote is returned for each price, side, and participant.",
        "operationId": "StreamMarketDepthQuotes",
        "summary": "Stream Market Depth Quotes",
        "parameters": [
          {
            "name": "symbol",
            "in": "path",
            "description": "A valid symbol for the security.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "MSFT"
            }
          },
          {
            "name": "maxlevels",
            "in": "query",
            "description": "The maximum number of market depth levels to return. Must be a positive integer. If omitted it defaults to 20.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "StreamMarketDepthQuotes",
            "content": {
              "application/vnd.tradestation.streams.v2+json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MarketDepthQuote"
                    },
                    {
                      "$ref": "#/components/schemas/Heartbeat2"
                    },
                    {
                      "$ref": "#/components/schemas/StreamErrorResponse"
                    }
                  ]
                },
                "examples": {
                  "MarketDepthQuoteStream": {
                    "value": {
                      "Bids": [
                        {
                          "TimeStamp": "2022-06-28T12:34:56Z",
                          "Side": "Bid",
                          "Price": "123.45",
                          "Size": "100",
                          "OrderCount": 5,
                          "Name": "NSDQ"
                        }
                      ],
                      "Asks": [
                        {
                          "TimeStamp": "2022-06-28T12:34:56Z",
                          "Side": "Ask",
                          "Price": "123.45",
                          "Size": "100",
                          "OrderCount": 5,
                          "Name": "NSDQ"
                        }
                      ]
                    }
                  },
                  "Heartbeat": {
                    "value": {
                      "Heartbeat": 1,
                      "Timestamp": "2021-03-02T18:01:23Z"
                    }
                  },
                  "Error": {
                    "value": {
                      "Error": "GoAway",
                      "Message": "The server is about to shut down."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/marketdata/stream/marketdepth/quotes/MSFT' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/marketdata/stream/marketdepth/quotes/MSFT',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options).on('data', function (data) {\n  console.log(data.toString());\n}).on('error', function(err) {\n  console.error(err)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/marketdata/stream/marketdepth/quotes/MSFT\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, stream=True)\n\nfor line in response.iter_lines():\n    if line:\n        print(line)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/marketdata/stream/marketdepth/quotes/MSFT\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead))\n{\n    response.EnsureSuccessStatusCode();\n    using (var stream = await response.Content.ReadAsStreamAsync())\n    {\n        using (StreamReader reader = new StreamReader(stream))\n        {\n            while (!reader.EndOfStream)\n            {\n                var line = await reader.ReadLineAsync();\n                if (line == null) break;\n                Console.WriteLine(line);\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v3/marketdata/stream/marketdepth/aggregates/{symbol}": {
      "get": {
        "tags": [
          "MarketData"
        ],
        "description": "Stream aggregate market depth quotes for equities, futures and stock options. A separate quote is returned for each price and side, using aggregated data from the participants.",
        "operationId": "StreamMarketDepthAggregates",
        "summary": "Stream Market Depth Aggregates",
        "parameters": [
          {
            "name": "symbol",
            "in": "path",
            "description": "A valid symbol for the security.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "MSFT"
            }
          },
          {
            "name": "maxlevels",
            "in": "query",
            "description": "The maximum number of market depth levels to return. Must be a positive integer. If omitted it defaults to 20.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "StreamMarketDepthAggregates",
            "content": {
              "application/vnd.tradestation.streams.v2+json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MarketDepthAggregate"
                    },
                    {
                      "$ref": "#/components/schemas/Heartbeat2"
                    },
                    {
                      "$ref": "#/components/schemas/StreamErrorResponse"
                    }
                  ]
                },
                "examples": {
                  "MarketDepthAggregateStream": {
                    "value": {
                      "Bids": [
                        {
                          "EarliestTime": "2022-06-28T12:34:56Z",
                          "LatestTime": "2022-06-28T12:34:56Z",
                          "Side": "Bid",
                          "Price": "123.45",
                          "TotalSize": "9000",
                          "BiggestSize": "1500",
                          "SmallestSize": "100",
                          "NumParticipants": 5,
                          "TotalOrderCount": 15
                        }
                      ],
                      "Asks": [
                        {
                          "EarliestTime": "2022-06-28T12:34:56Z",
                          "LatestTime": "2022-06-28T12:34:56Z",
                          "Side": "Ask",
                          "Price": "123.45",
                          "TotalSize": "9000",
                          "BiggestSize": "1500",
                          "SmallestSize": "100",
                          "NumParticipants": 5,
                          "TotalOrderCount": 15
                        }
                      ]
                    }
                  },
                  "Heartbeat": {
                    "value": {
                      "Heartbeat": 1,
                      "Timestamp": "2021-03-02T18:01:23Z"
                    }
                  },
                  "Error": {
                    "value": {
                      "Error": "GoAway",
                      "Message": "The server is about to shut down."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/marketdata/stream/marketdepth/aggregates/MSFT' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/marketdata/stream/marketdepth/aggregates/MSFT',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options).on('data', function (data) {\n  console.log(data.toString());\n}).on('error', function(err) {\n  console.error(err)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/marketdata/stream/marketdepth/aggregates/MSFT\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, stream=True)\n\nfor line in response.iter_lines():\n    if line:\n        print(line)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/marketdata/stream/marketdepth/aggregates/MSFT\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead))\n{\n    response.EnsureSuccessStatusCode();\n    using (var stream = await response.Content.ReadAsStreamAsync())\n    {\n        using (StreamReader reader = new StreamReader(stream))\n        {\n            while (!reader.EndOfStream)\n            {\n                var line = await reader.ReadLineAsync();\n                if (line == null) break;\n                Console.WriteLine(line);\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v3/brokerage/stream/accounts/{accountIds}/orders": {
      "get": {
        "tags": [
          "Brokerage"
        ],
        "description": "Stream orders for the given accounts. Request valid for `Cash`, `Margin`, `Futures`, and `DVP` account types.",
        "operationId": "StreamOrders",
        "summary": "Stream Orders",
        "parameters": [
          {
            "name": "accountIds",
            "in": "path",
            "description": "List of valid Account IDs for the authenticated user in comma separated format; for example `\"61999124,68910124\"`. 1 to 25 Account IDs can be specified, comma separated.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "61999124,68910124"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "StreamingOrders",
            "content": {
              "application/vnd.tradestation.streams.v3+json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Order1"
                    },
                    {
                      "$ref": "#/components/schemas/StreamStatus"
                    },
                    {
                      "$ref": "#/components/schemas/Heartbeat3"
                    },
                    {
                      "$ref": "#/components/schemas/StreamOrderErrorResponse"
                    }
                  ]
                },
                "examples": {
                  "Order": {
                    "value": [
                      {
                        "AccountID": "123456782",
                        "CommissionFee": "0",
                        "Currency": "USD",
                        "Duration": "GTC",
                        "GoodTillDate": "2021-05-25T00:00:00Z",
                        "Legs": [
                          {
                            "AssetType": "STOCK",
                            "BuyOrSell": "Buy",
                            "ExecQuantity": "0",
                            "ExecutionPrice": "112.28",
                            "ExpirationDate": "2021-05-25T00:00:00Z",
                            "OpenOrClose": "Open",
                            "OptionType": "CALL",
                            "QuantityOrdered": "10",
                            "QuantityRemaining": "10",
                            "StrikePrice": "350",
                            "Symbol": "MSFT",
                            "Underlying": "MSFT"
                          }
                        ],
                        "MarketActivationRules": [
                          {
                            "RuleType": "Price",
                            "Symbol": "EDZ22",
                            "Predicate": "gt",
                            "TriggerKey": "STTN",
                            "Price": "10000.01"
                          }
                        ],
                        "OrderID": "286234131",
                        "OpenedDateTime": "2021-02-24T15:47:45Z",
                        "OrderType": "Market",
                        "PriceUsedForBuyingPower": "230.46",
                        "Routing": "Intelligent",
                        "Status": "OPN",
                        "StatusDescription": "Sent",
                        "AdvancedOptions": "CND=EDZ22>10000.01(STTN);TIM=23:59:59;",
                        "TimeActivationRules": [
                          {
                            "TimeUtc": "0001-01-01T23:59:59Z"
                          }
                        ],
                        "UnbundledRouteFee": "0"
                      },
                      {
                        "AccountID": "123456782",
                        "CommissionFee": "0",
                        "ConditionalOrders": [
                          {
                            "Relationship": "OCO",
                            "OrderID": "286179863"
                          }
                        ],
                        "Currency": "USD",
                        "Duration": "GTC",
                        "GoodTillDate": "2021-02-15T00:00:00Z",
                        "GroupName": "OCO 2706452145",
                        "Legs": [
                          {
                            "OpenOrClose": "Close",
                            "QuantityOrdered": "10",
                            "ExecQuantity": "0",
                            "QuantityRemaining": "10",
                            "BuyOrSell": "Sell",
                            "Symbol": "MSFT",
                            "AssetType": "STOCK"
                          }
                        ],
                        "OrderID": "286179864",
                        "OpenedDateTime": "2020-11-17T16:34:37Z",
                        "OrderType": "StopMarket",
                        "PriceUsedForBuyingPower": "215.06",
                        "Routing": "Intelligent",
                        "Status": "ACK",
                        "StatusDescription": "Received",
                        "AdvancedOptions": "STPTRG=STT;TRL=5%;",
                        "TrailingStop": {
                          "Percent": "5.0"
                        },
                        "UnbundledRouteFee": "0"
                      },
                      {
                        "AccountID": "123456782",
                        "CommissionFee": "0",
                        "ConditionalOrders": [
                          {
                            "Relationship": "OCO",
                            "OrderID": "286179863"
                          }
                        ],
                        "Currency": "USD",
                        "Duration": "GTC",
                        "GoodTillDate": "2021-02-15T00:00:00Z",
                        "GroupName": "OCO 2706452145",
                        "Legs": [
                          {
                            "OpenOrClose": "Close",
                            "QuantityOrdered": "10",
                            "ExecQuantity": "0",
                            "QuantityRemaining": "10",
                            "BuyOrSell": "Sell",
                            "Symbol": "MSFT",
                            "AssetType": "STOCK"
                          }
                        ],
                        "OrderID": "286179864",
                        "OpenedDateTime": "2020-11-17T16:34:37Z",
                        "OrderType": "StopMarket",
                        "PriceUsedForBuyingPower": "215.06",
                        "Routing": "Intelligent",
                        "Status": "ACK",
                        "StatusDescription": "Received",
                        "StopPrice": "130",
                        "AdvancedOptions": "STPTRG=STT;OCA=2706452145;",
                        "UnbundledRouteFee": "0"
                      }
                    ]
                  },
                  "Heartbeat": {
                    "value": {
                      "Heartbeat": 1,
                      "Timestamp": "2021-03-02T18:01:23Z"
                    }
                  },
                  "ErrorResponse": {
                    "value": {
                      "Error": "Forbidden",
                      "Message": "Invalid Account ID.",
                      "AccountID": "123456789"
                    }
                  },
                  "StreamStatus": {
                    "value": {
                      "StreamStatus": "EndSnapshot"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/brokerage/stream/accounts/61999124,68910124/orders' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/brokerage/stream/accounts/61999124,68910124/orders',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options).on('data', function (data) {\n  console.log(data.toString());\n}).on('error', function(err) {\n  console.error(err)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/brokerage/stream/accounts/61999124,68910124/orders\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, stream=True)\n\nfor line in response.iter_lines():\n    if line:\n        print(line)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/brokerage/stream/accounts/61999124,68910124/orders\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead))\n{\n    response.EnsureSuccessStatusCode();\n    using (var stream = await response.Content.ReadAsStreamAsync())\n    {\n        using (StreamReader reader = new StreamReader(stream))\n        {\n            while (!reader.EndOfStream)\n            {\n                var line = await reader.ReadLineAsync();\n                if (line == null) break;\n                Console.WriteLine(line);\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v3/brokerage/stream/accounts/{accountIds}/orders/{ordersIds}": {
      "get": {
        "tags": [
          "Brokerage"
        ],
        "description": "Stream orders for the given accounts and orders. Request valid for `Cash`, `Margin`, `Futures`, and `DVP` account types.",
        "operationId": "StreamOrdersByOrderId",
        "summary": "Stream Orders by Order Id",
        "parameters": [
          {
            "name": "accountIds",
            "in": "path",
            "description": "List of valid Account IDs for the authenticated user in comma separated format; for example `\"61999124,68910124\"`. 1 to 25 account IDs can be specified, comma separated.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "61999124,68910124"
            }
          },
          {
            "name": "ordersIds",
            "in": "path",
            "description": "List of valid Order IDs for the account IDs in comma separated format; for example `\"812767578,812941051\"`. 1 to 50 order IDs can be specified, comma separated.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "812767578,812941051"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "StreamingOrdersByOrderId",
            "content": {
              "application/vnd.tradestation.streams.v3+json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Order1"
                    },
                    {
                      "$ref": "#/components/schemas/StreamStatus"
                    },
                    {
                      "$ref": "#/components/schemas/Heartbeat3"
                    },
                    {
                      "$ref": "#/components/schemas/StreamOrderByOrderIdErrorResponse"
                    }
                  ]
                },
                "examples": {
                  "Order": {
                    "value": [
                      {
                        "AccountID": "123456782",
                        "CommissionFee": "0",
                        "Currency": "USD",
                        "Duration": "GTC",
                        "GoodTillDate": "2021-05-25T00:00:00Z",
                        "Legs": [
                          {
                            "AssetType": "STOCK",
                            "BuyOrSell": "Buy",
                            "ExecQuantity": "0",
                            "ExecutionPrice": "112.28",
                            "ExpirationDate": "2021-05-25T00:00:00Z",
                            "OpenOrClose": "Open",
                            "OptionType": "CALL",
                            "QuantityOrdered": "10",
                            "QuantityRemaining": "10",
                            "StrikePrice": "350",
                            "Symbol": "MSFT",
                            "Underlying": "MSFT"
                          }
                        ],
                        "MarketActivationRules": [
                          {
                            "RuleType": "Price",
                            "Symbol": "EDZ22",
                            "Predicate": "gt",
                            "TriggerKey": "STTN",
                            "Price": "10000.01"
                          }
                        ],
                        "OrderID": "286234131",
                        "OpenedDateTime": "2021-02-24T15:47:45Z",
                        "OrderType": "Market",
                        "PriceUsedForBuyingPower": "230.46",
                        "Routing": "Intelligent",
                        "Status": "OPN",
                        "StatusDescription": "Sent",
                        "AdvancedOptions": "CND=EDZ22>10000.01(STTN);TIM=23:59:59;",
                        "TimeActivationRules": [
                          {
                            "TimeUtc": "0001-01-01T23:59:59Z"
                          }
                        ],
                        "UnbundledRouteFee": "0"
                      },
                      {
                        "AccountID": "123456782",
                        "CommissionFee": "0",
                        "ConditionalOrders": [
                          {
                            "Relationship": "OCO",
                            "OrderID": "286179863"
                          }
                        ],
                        "Currency": "USD",
                        "Duration": "GTC",
                        "GoodTillDate": "2021-02-15T00:00:00Z",
                        "GroupName": "OCO 2706452145",
                        "Legs": [
                          {
                            "OpenOrClose": "Close",
                            "QuantityOrdered": "10",
                            "ExecQuantity": "0",
                            "QuantityRemaining": "10",
                            "BuyOrSell": "Sell",
                            "Symbol": "MSFT",
                            "AssetType": "STOCK"
                          }
                        ],
                        "OrderID": "286179864",
                        "OpenedDateTime": "2020-11-17T16:34:37Z",
                        "OrderType": "StopMarket",
                        "PriceUsedForBuyingPower": "215.06",
                        "Routing": "Intelligent",
                        "Status": "ACK",
                        "StatusDescription": "Received",
                        "AdvancedOptions": "STPTRG=STT;TRL=5%;",
                        "TrailingStop": {
                          "Percent": "5.0"
                        },
                        "UnbundledRouteFee": "0"
                      },
                      {
                        "AccountID": "123456782",
                        "CommissionFee": "0",
                        "ConditionalOrders": [
                          {
                            "Relationship": "OCO",
                            "OrderID": "286179863"
                          }
                        ],
                        "Currency": "USD",
                        "Duration": "GTC",
                        "GoodTillDate": "2021-02-15T00:00:00Z",
                        "GroupName": "OCO 2706452145",
                        "Legs": [
                          {
                            "OpenOrClose": "Close",
                            "QuantityOrdered": "10",
                            "ExecQuantity": "0",
                            "QuantityRemaining": "10",
                            "BuyOrSell": "Sell",
                            "Symbol": "MSFT",
                            "AssetType": "STOCK"
                          }
                        ],
                        "OrderID": "286179864",
                        "OpenedDateTime": "2020-11-17T16:34:37Z",
                        "OrderType": "StopMarket",
                        "PriceUsedForBuyingPower": "215.06",
                        "Routing": "Intelligent",
                        "Status": "ACK",
                        "StatusDescription": "Received",
                        "StopPrice": "130",
                        "AdvancedOptions": "STPTRG=STT;OCA=2706452145;",
                        "UnbundledRouteFee": "0"
                      }
                    ]
                  },
                  "Heartbeat": {
                    "value": {
                      "Heartbeat": 1,
                      "Timestamp": "2021-03-02T18:01:23Z"
                    }
                  },
                  "ErrorResponse": {
                    "value": {
                      "Error": "Forbidden",
                      "Message": "Invalid Account ID.",
                      "AccountID": "123456789"
                    }
                  },
                  "StreamStatus": {
                    "value": {
                      "StreamStatus": "EndSnapshot"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/brokerage/stream/accounts/61999124,68910124/orders/812767578,812941051' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/brokerage/stream/accounts/61999124,68910124/orders/812767578,812941051',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options).on('data', function (data) {\n  console.log(data.toString());\n}).on('error', function(err) {\n  console.error(err)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/brokerage/stream/accounts/61999124,68910124/orders/812767578,812941051\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, stream=True)\n\nfor line in response.iter_lines():\n    if line:\n        print(line)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/brokerage/stream/accounts/61999124,68910124/orders/812767578,812941051\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead))\n{\n    response.EnsureSuccessStatusCode();\n    using (var stream = await response.Content.ReadAsStreamAsync())\n    {\n        using (StreamReader reader = new StreamReader(stream))\n        {\n            while (!reader.EndOfStream)\n            {\n                var line = await reader.ReadLineAsync();\n                if (line == null) break;\n                Console.WriteLine(line);\n            }\n        }\n    }\n}"
          }
        ]
      }
    },
    "/v3/brokerage/stream/accounts/{accountIds}/positions": {
      "get": {
        "tags": [
          "Brokerage"
        ],
        "description": "Stream positions for the given accounts. Request valid for `Cash`, `Margin`, `Futures`, and `DVP` account types.",
        "operationId": "StreamPositions",
        "summary": "Stream Positions",
        "parameters": [
          {
            "name": "accountIds",
            "in": "path",
            "description": "List of valid Account IDs for the authenticated user in comma separated format; for example `\"61999124,68910124\"`. 1 to 25 Account IDs can be specified, comma separated.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "61999124,68910124"
            }
          },
          {
            "name": "changes",
            "in": "query",
            "description": "A boolean value that specifies whether or not position updates are streamed as changes. When a stream is first opened with `\"changes=true\"`, streaming positions will return the full snapshot first for all positions, and then any changes after that. When `\"changes=true\"`, the PositionID field is returned with each change, along with the fields that changed.",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true,
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "StreamingPositions",
            "content": {
              "application/vnd.tradestation.streams.v3+json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Position"
                    },
                    {
                      "$ref": "#/components/schemas/StreamStatus"
                    },
                    {
                      "$ref": "#/components/schemas/Heartbeat3"
                    },
                    {
                      "$ref": "#/components/schemas/StreamPositionsErrorResponse"
                    }
                  ]
                },
                "examples": {
                  "Position": {
                    "value": {
                      "AccountID": "123456782",
                      "AveragePrice": "216.68",
                      "AssetType": "STOCK",
                      "Last": "216.63",
                      "Bid": "216.62",
                      "Ask": "216.64",
                      "ConversionRate": "1",
                      "DayTradeRequirement": "0",
                      "InitialRequirement": "0",
                      "PositionID": "64630792",
                      "LongShort": "Long",
                      "Quantity": "10",
                      "Symbol": "MSFT",
                      "Timestamp": "2020-11-16T16:53:37Z",
                      "TodaysProfitLoss": "-0.5",
                      "TotalCost": "2166.8",
                      "MarketValue": "2166.3",
                      "MarkToMarketPrice": "216.68",
                      "UnrealizedProfitLoss": "-0.5",
                      "UnrealizedProfitLossPercent": "-0.023",
                      "UnrealizedProfitLossQty": "-0.05"
                    }
                  },
                  "DeletedPosition": {
                    "value": {
                      "PositionID": "64630792",
                      "Deleted": true
                    }
                  },
                  "Heartbeat": {
                    "value": {
                      "Heartbeat": 1,
                      "Timestamp": "2021-03-02T18:01:23Z"
                    }
                  },
                  "ErrorResponse": {
                    "value": {
                      "Error": "Forbidden",
                      "Message": "Invalid Account ID.",
                      "AccountID": "123456782"
                    }
                  },
                  "StreamStatus": {
                    "value": {
                      "StreamStatus": "EndSnapshot"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          },
          "401": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          },
          "403": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          },
          "404": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          },
          "429": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          },
          "503": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          },
          "504": {
            "description": "ErrorResponse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse1"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://api.tradestation.com/v3/brokerage/stream/accounts/61999124,68910124/positions' \\\n  --header 'Authorization: Bearer TOKEN'"
          },
          {
            "lang": "Node",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.tradestation.com/v3/brokerage/stream/accounts/61999124,68910124/positions',\n  headers: {Authorization: 'Bearer TOKEN'}\n};\n\nrequest(options).on('data', function (data) {\n  console.log(data.toString());\n}).on('error', function(err) {\n  console.error(err)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://api.tradestation.com/v3/brokerage/stream/accounts/61999124,68910124/positions\"\n\nheaders = {\"Authorization\": \"Bearer TOKEN\"}\n\nresponse = requests.request(\"GET\", url, headers=headers, stream=True)\n\nfor line in response.iter_lines():\n    if line:\n        print(line)"
          },
          {
            "lang": "C#",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.tradestation.com/v3/brokerage/stream/accounts/61999124,68910124/positions\"),\n    Headers =\n    {\n        { \"Authorization\", \"Bearer TOKEN\" },\n    },\n};\nusing (var response = await client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead))\n{\n    response.EnsureSuccessStatusCode();\n    using (var stream = await response.Content.ReadAsStreamAsync())\n    {\n        using (StreamReader reader = new StreamReader(stream))\n        {\n            while (!reader.EndOfStream)\n            {\n                var line = await reader.ReadLineAsync();\n                if (line == null) break;\n                Console.WriteLine(line);\n            }\n        }\n    }\n}"
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Bearer-Token": {
        "description": "The TradeStation API uses bearer tokens to authenticate requests. You must provide a valid bearer token in the HTTP header for API requests.\n",
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "SymbolSuggestDefinition": {
        "description": "",
        "items": {
          "properties": {
            "Category": {
              "type": "string",
              "description": "The type of financial instrument that the symbol represents, such as a stock, index, or mutual fund."
            },
            "Country": {
              "type": "string",
              "description": "The country of the exchange where the symbol is listed.",
              "enum": [
                "US",
                "DE",
                "CA"
              ]
            },
            "Currency": {
              "type": "string",
              "description": "Displays the type of base currency for the selected symbol.",
              "enum": [
                "USD",
                "AUD",
                "CAD",
                "CHF",
                "DKK",
                "EUR",
                "DBP",
                "HKD",
                "JPY",
                "NOK",
                "NZD",
                "SEK",
                "SGD"
              ]
            },
            "Description": {
              "type": "string",
              "description": "Displays the full name of the symbol."
            },
            "DisplayType": {
              "type": "number",
              "description": "Symbol's price display type based on the following list:\n\n* `0` \"Automatic\" => .00 (should be handled as 2 decimals)\n* `1` 0 Decimals => 1\n* `2` 1 Decimals => .1\n* `3` 2 Decimals => .01\n* `4` 3 Decimals => .001\n* `5` 4 Decimals => .0001\n* `6` 5 Decimals => .00001\n* `7` Simplest Fraction\n* `8` 1/2-Halves => .5\n* `9` 1/4-Fourths => .25\n* `10` 1/8-Eights => .125\n* `11` 1/16-Sixteenths => .0625\n* `12` 1/32-ThirtySeconds => .03125\n* `13` 1/64-SixtyFourths => .015625\n* `14` 1/128-OneTwentyEigths => .0078125\n* `15` 1/256-TwoFiftySixths => .003906250\n* `16` 10ths and Quarters => .025\n* `17` 32nds and Halves => .015625\n* `18` 32nds and Quarters => .0078125\n* `19` 32nds and Eights => .00390625\n* `20` 32nds and Tenths => .003125\n* `21` 64ths and Halves => .0078125\n* `22` 64ths and Tenths => .0015625\n* `23` 6 Decimals => .000001\n"
            },
            "Error": {
              "type": "string",
              "description": "Element that references error."
            },
            "Exchange": {
              "type": "string",
              "description": "Name of exchange where this symbol is traded in."
            },
            "ExchangeID": {
              "type": "number",
              "description": "A unique numerical identifier for the Exchange."
            },
            "ExpirationDate": {
              "type": "string",
              "description": "Displays the expiration date for a futures or options contract in UTC formatted time."
            },
            "ExpirationType": {
              "type": "string",
              "description": "For options only. It indicates whether the option is a monthly, weekly, quarterly or end of month expiration.\n* W - Weekly\n* M - Monthly\n* Q - Quartely\n* E - End of the month\n* \"\" - The term not be identified\n"
            },
            "FutureType": {
              "type": "string",
              "description": "Displays the type of future contract the symbol represents."
            },
            "MinMove": {
              "type": "number",
              "description": "Multiplying factor using the display type to determine the minimum price increment the asset trades in. For options the MinMove may vary. If the MinMove is negative, then the MinMove is dependent on the price. The whole number portion of the min move is the threshold. The leftmost two digits to the right of the decimal (X.XXXX) indicate the min move beneath the threshold, and the rightmost two digits (X.XXXX) indicate the min move above the threshold."
            },
            "Name": {
              "type": "string",
              "description": "A unique series of letters assigned to a security for trading purposes."
            },
            "OptionType": {
              "type": "string",
              "description": "Displays the type of options contract the symbol represents. Valid options include: Puts, Calls."
            },
            "PointValue": {
              "type": "number",
              "description": "Symbol`s point value."
            },
            "Root": {
              "type": "string",
              "description": "The Symbol root."
            },
            "StrikePrice": {
              "type": "number",
              "description": "Displays strike price of an options contract; For Options symbols only."
            }
          },
          "type": "object"
        },
        "minItems": 0,
        "type": "array",
        "uniqueItems": true
      },
      "Error": {
        "properties": {
          "TraceId": {
            "type": "string",
            "format": "uuid"
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "Message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SymbolSearchDefinition": {
        "description": "",
        "items": {
          "properties": {
            "Category": {
              "type": "string",
              "description": "The type of financial instrument that the symbol represents, such as a stock, index, or mutual fund."
            },
            "Country": {
              "type": "string",
              "description": "The country of the exchange where the symbol is listed.",
              "enum": [
                "US",
                "DE",
                "CA"
              ]
            },
            "Currency": {
              "type": "string",
              "description": "Displays the type of base currency for the selected symbol.",
              "enum": [
                "USD",
                "AUD",
                "CAD",
                "CHF",
                "DKK",
                "EUR",
                "DBP",
                "HKD",
                "JPY",
                "NOK",
                "NZD",
                "SEK",
                "SGD"
              ]
            },
            "Description": {
              "type": "string",
              "description": "Displays the full name of the symbol."
            },
            "DisplayType": {
              "type": "number",
              "description": "Symbol's price display type based on the following list:\n\n* `0` \"Automatic\" Not used\n* `1` 0 Decimals => 1\n* `2` 1 Decimals => .1\n* `3` 2 Decimals => .01\n* `4` 3 Decimals => .001\n* `5` 4 Decimals => .0001\n* `6` 5 Decimals => .00001\n* `7` Simplest Fraction\n* `8` 1/2-Halves => .5\n* `9` 1/4-Fourths => .25\n* `10` 1/8-Eights => .125\n* `11` 1/16-Sixteenths => .0625\n* `12` 1/32-ThirtySeconds => .03125\n* `13` 1/64-SixtyFourths => .015625\n* `14` 1/128-OneTwentyEigths => .0078125\n* `15` 1/256-TwoFiftySixths => .003906250\n* `16` 10ths and Quarters => .025\n* `17` 32nds and Halves => .015625\n* `18` 32nds and Quarters => .0078125\n* `19` 32nds and Eights => .00390625\n* `20` 32nds and Tenths => .003125\n* `21` 64ths and Halves => .0078125\n* `22` 64ths and Tenths => .0015625\n* `23` 6 Decimals => .000001\n"
            },
            "Error": {
              "type": "string",
              "description": "Element that references error."
            },
            "Exchange": {
              "type": "string",
              "description": "Name of exchange where this symbol is traded in."
            },
            "ExchangeID": {
              "type": "number",
              "description": "A unique numerical identifier for the Exchange."
            },
            "ExpirationDate": {
              "type": "string",
              "description": "Displays the expiration date for a futures or options contract in UTC formatted time."
            },
            "ExpirationType": {
              "type": "string",
              "description": "For options only. It indicates whether the option is a monthly, weekly, quarterly or end of month expiration.\n* W - Weekly\n* M - Monthly\n* Q - Quartely\n* E - End of the month\n* \"\" - The term not be identified\n"
            },
            "FutureType": {
              "type": "string",
              "description": "Displays the type of future contract the symbol represents."
            },
            "MinMove": {
              "type": "number",
              "description": "Multiplying factor using the display type to determine the minimum price increment the asset trades in. For options the MinMove may vary. If the MinMove is negative, then the MinMove is dependent on the price. The whole number portion of the min move is the threshold. The leftmost two digits to the right of the decimal (X.XXXX) indicate the min move beneath the threshold, and the rightmost two digits (X.XXXX) indicate the min move above the threshold."
            },
            "Name": {
              "type": "string",
              "description": "A unique series of letters assigned to a security for trading purposes."
            },
            "OptionType": {
              "type": "string",
              "description": "Displays the type of options contract the symbol represents. Valid options include: Puts, Calls."
            },
            "PointValue": {
              "type": "number",
              "description": "Symbol`s point value."
            },
            "Root": {
              "type": "string",
              "description": "The Symbol root."
            },
            "StrikePrice": {
              "type": "number",
              "description": "Displays strike price of an options contract; For Options symbols only."
            },
            "Underlying": {
              "type": "string",
              "description": "The financial instrument on which an option contract is based or derived."
            }
          },
          "type": "object"
        },
        "minItems": 1,
        "type": "array",
        "uniqueItems": true
      },
      "TickbarDefinition": {
        "description": "Standard tickbar data object for streaming tick bars with stream/tickbars/...",
        "properties": {
          "Close": {
            "type": "number",
            "description": "Close price of current bar."
          },
          "Status": {
            "$ref": "#/components/schemas/StatusDefinition"
          },
          "TimeStamp": {
            "type": "string",
            "description": "Epoch timestamp."
          },
          "TotalVolume": {
            "type": "number",
            "description": "The total volume of shares or contracts."
          }
        },
        "type": "object"
      },
      "StatusDefinition": {
        "description": "Status value for Barcharts and Tickbars. Integer value represeting values through bit mappings",
        "properties": {
          "bit0": {
            "type": "integer",
            "description": "`NEW`: Set on the first time the bar is sent",
            "minimum": 0,
            "maximum": 1
          },
          "bit1": {
            "type": "integer",
            "description": "`REAL_TIME_DATA`: Set when there is data in the bar and the data is being built in \"real time\"\" from a trade",
            "minimum": 0,
            "maximum": 1
          },
          "bit2": {
            "type": "integer",
            "description": "`HISTORICAL_DATA`: Set when there is data in the bar and the data is historical data, or is built from historical data",
            "minimum": 0,
            "maximum": 1
          },
          "bit3": {
            "type": "integer",
            "description": "`STANDARD_CLOSE`: Set when the bar is closed \"normally\" (e.g. a 2 tick tickchart bar was closed because of the second tick, a 10-min barchart was closed due to time, etc.)",
            "minimum": 0,
            "maximum": 1
          },
          "bit4": {
            "type": "integer",
            "description": "`END_OF_SESSION_CLOSE`: Set when the bar was closed \"prematurely\" due to the end of the trading session and the particular bar type is not meant to span trading sessions",
            "minimum": 0,
            "maximum": 1
          },
          "bit5": {
            "type": "integer",
            "description": "`UPDATE_CORPACTION`: Set when there was an update due to corporate action",
            "minimum": 0,
            "maximum": 1
          },
          "bit6": {
            "type": "integer",
            "description": "`UPDATE_CORRECTION`: Set when there was an update due to a market correction",
            "minimum": 0,
            "maximum": 1
          },
          "bit7": {
            "type": "integer",
            "description": "`ANALYSIS_BAR`: Set when the bar should not be considered except for analysis purposes",
            "minimum": 0,
            "maximum": 1
          },
          "bit8": {
            "type": "integer",
            "description": "`EXTENDED_BAR`: Set when the bar is linked with an extended transaction linked with the primary stream (i.e. Conversions)",
            "minimum": 0,
            "maximum": 1
          },
          "bit19": {
            "type": "integer",
            "description": "`PREV_DAY_CORRECTION`: Set when there was an update due to prev.day correction",
            "minimum": 0,
            "maximum": 1
          },
          "bit23": {
            "type": "integer",
            "description": "`AFTER_MARKET_CORRECTION`: Set when there was an update due to an after market correction",
            "minimum": 0,
            "maximum": 1
          },
          "bit24": {
            "type": "integer",
            "description": "`PHANTOM_BAR`: Set when the bar is synthetic - thus created only to fill gaps",
            "minimum": 0,
            "maximum": 1
          },
          "bit25": {
            "type": "integer",
            "description": "`EMPTY_BAR`: Set when the bar is an empty bar – no market data for the bar period",
            "minimum": 0,
            "maximum": 1
          },
          "bit26": {
            "type": "integer",
            "description": "`BACKFILL_DATA`: Set when the bar is sent during backfill historical processing",
            "minimum": 0,
            "maximum": 1
          },
          "bit27": {
            "type": "integer",
            "description": "`ARCHIVE_DATA`: Set when the bar is sent during archive historical processing",
            "minimum": 0,
            "maximum": 1
          },
          "bit28": {
            "type": "integer",
            "description": "`GHOST_BAR`: Set when the bar is empty but specifically for the end session",
            "minimum": 0,
            "maximum": 1
          },
          "bit29": {
            "type": "integer",
            "description": "`END_OF_HISTORY_STREAM`: Set on a bar to convey to consumer that all historical bars have been sent.  Historical bars are not guaranteed to be returned in order",
            "minimum": 0,
            "maximum": 1
          }
        },
        "type": "object"
      },
      "TrailingStopDefinition": {
        "description": "Trailing Stop offset; amount or percent",
        "type": "object",
        "properties": {
          "Amount": {
            "description": "Currency Offset from current price.\nNote: Mutually exclusive with Percent.\n",
            "type": "number"
          },
          "Percent": {
            "description": "Percentage offset from current price.\nNote: Mutually exclusive with Amount.\n",
            "type": "number"
          }
        }
      },
      "MarketActivationRuleDefinition": {
        "description": "Market Activation Rules that must be met before the order is sent to the exchange.",
        "type": "object",
        "properties": {
          "RuleType": {
            "description": "Type of the activation rule. Currently only support \"Price\"\n",
            "type": "string",
            "enum": [
              "Price"
            ]
          },
          "Symbol": {
            "description": "Symbol that the rule is based on\n",
            "type": "string"
          },
          "Predicate": {
            "description": "The predicate comparison for the market rule type. E.g. Lt (less than).\n",
            "type": "string",
            "enum": [
              "Lt",
              "Lte",
              "Gt",
              "Gte"
            ]
          },
          "TriggerKey": {
            "description": "The ticks behavior for the activation rule.\n",
            "type": "string",
            "enum": [
              "STT",
              "STTN",
              "SBA",
              "SAB",
              "DTT",
              "DTTN",
              "DBA",
              "DAB",
              "TTT",
              "TTTN",
              "TBA",
              "TAB"
            ]
          },
          "Price": {
            "description": "Valid only for Type=\"Price\", the price at which the rule will trigger when the price hits ticks as specified by TriggerType\n",
            "type": "string"
          },
          "LogicOperator": {
            "description": "Relation with the previous activation rule when given a list of MarketActivationRules. Ignored for the first MarketActivationRule.\n",
            "type": "string",
            "enum": [
              "And",
              "Or"
            ]
          }
        }
      },
      "TimeActivationRuleDefinition": {
        "description": "Time Activation Rules that must be met before the order is sent to the exchange.",
        "type": "object",
        "properties": {
          "TimeUtc": {
            "description": "Order is activated once current UTC time is greater thans or equal to TimeUtc. hh:mm:ss\n",
            "type": "string"
          }
        }
      },
      "AdvancedOptionsDefinition": {
        "description": "Advanced Options for an order",
        "properties": {
          "TrailingStop": {
            "$ref": "#/components/schemas/TrailingStopDefinition"
          },
          "MarketActivationRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketActivationRuleDefinition"
            },
            "description": "Set of market-based activation rules that must be met before order is sent to the exchange. Max 4 rules.\n",
            "maxItems": 4
          },
          "TimeActivationRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeActivationRuleDefinition"
            },
            "description": "Set of time-based activation rules that must be met before order is sent to the exchange. Max 1 rule.\n",
            "maxItems": 1
          },
          "ShowOnlyQuantity": {
            "type": "integer",
            "description": "Number of shares to submit to market at a time for this order. Valid for futures and equities orders. For equities, must be multiple of 100.\n",
            "minimum": 0,
            "exclusiveMinimum": true
          }
        },
        "type": "object"
      },
      "OrderConfirmRequestDefinition": {
        "properties": {
          "AccountKey": {
            "description": "Must be a valid Account Key for that user and Asset Type\n",
            "type": "string"
          },
          "AdvancedOptions": {
            "$ref": "#/components/schemas/AdvancedOptionsDefinition"
          },
          "AssetType": {
            "type": "string",
            "enum": [
              "EQ",
              "FU",
              "OP"
            ]
          },
          "Duration": {
            "type": "string",
            "enum": [
              "DAY",
              "DYP",
              "GTC",
              "GCP",
              "GTD",
              "GDP",
              "OPG",
              "CLO",
              "IOC",
              "FOK",
              1,
              "1 MIN",
              3,
              "3 MIN",
              5,
              "5 MIN"
            ],
            "description": "Allowed durations vary by Asset Type\n* DAY - Day, valid until the end of the regular trading session.\n* DYP - Day Plus; valid until the end of the extended trading session\n* GTC - Good till canceled\n* GCP - Good till canceled plus\n* GTD - Good through date\n* GDP - Good through date plus\n* OPG - At the opening; only valid for listed stocks at the opening session Price\n* CLO - On Close; orders that target the closing session of an exchange.\n* IOC - Immediate or Cancel; filled immediately or canceled, partial fills are accepted\n* FOK - Fill or Kill; orders are filled entirely or canceled, partial fills are not accepted\n* 1 or 1 MIN - 1 minute; expires after the 1 minute\n* 3 or 3 MIN - 3 minutes; expires after the 3 minutes\n* 5 or 5 MIN - 5 minutes; expires after the 5 minutes\n"
          },
          "GTDDate": {
            "description": "Date that Order is valid through. Input Format: MM/DD/YYYY\nRequired for orders with Duration = GTD.\n",
            "maxLength": 10,
            "type": "string",
            "format": "mmddyyyy"
          },
          "LimitPrice": {
            "type": "string"
          },
          "StopPrice": {
            "type": "string"
          },
          "OrderType": {
            "type": "string",
            "enum": [
              "Limit",
              "Market",
              "StopLimit",
              "StopMarket"
            ]
          },
          "Quantity": {
            "type": "string"
          },
          "Route": {
            "type": "string",
            "description": "The route of the order. For Stocks and Options, Route value will default to `Intelligent` if no value is set.\nMust be UPPERCASE. Routes can be obtained from [Retrieve Available Exchanges](#operation/getExchanges).\n"
          },
          "Symbol": {
            "description": "Must be UPPERCASE",
            "type": "string"
          },
          "TradeAction": {
            "type": "string",
            "description": "Conveys the intent of the trade\n* BUY - `equities` and `futures`\n* SELL - `equities` and `futures`\n* BUYTOCOVER - `equities`\n* SELLSHORT - `equities`\n* BUYTOOPEN - `options`\n* BUYTOCLOSE - `options`\n* SELLTOOPEN - `options`\n* SELLTOCLOSE - `options`\n",
            "enum": [
              "BUY",
              "SELL",
              "BUYTOCOVER",
              "SELLSHORT",
              "BUYTOOPEN",
              "BUYTOCLOSE",
              "SELLTOOPEN",
              "SELLTOCLOSE"
            ]
          },
          "OSOs": {
            "items": {
              "type": "object",
              "properties": {
                "Type": {
                  "type": "string",
                  "enum": [
                    "NORMAL",
                    "BRK",
                    "OCO"
                  ]
                },
                "Orders": {
                  "items": {
                    "$ref": "#/components/schemas/OrderConfirmRequestDefinition"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                }
              },
              "required": [
                "Type"
              ]
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          },
          "Legs": {
            "items": {
              "type": "object",
              "properties": {
                "Symbol": {
                  "description": "Must be UPPERCASE",
                  "type": "string"
                },
                "Quantity": {
                  "type": "string"
                },
                "TradeAction": {
                  "type": "string",
                  "enum": [
                    "BUY",
                    "SELL",
                    "BUYTOCOVER",
                    "SELLSHORT",
                    "BUYTOOPEN",
                    "BUYTOCLOSE",
                    "SELLTOOPEN",
                    "SELLTOCLOSE"
                  ],
                  "description": "Conveys the intent of the trade\n* BUY - equity and futures trades\n* SELL - equity and futures trades\n* BUYTOCOVER - equity trade to close a short position\n* SELLSHORT - equity trade to open a short position\n* BUYTOOPEN - option trades\n* BUYTOCLOSE - option trades\n* SELLTOOPEN - option trades\n* SELLTOCLOSE - option trades\n"
                }
              }
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "AssetType",
          "Symbol",
          "Quantity",
          "OrderType",
          "Duration",
          "AccountKey",
          "TradeAction"
        ],
        "type": "object"
      },
      "OrderRequestDefinition": {
        "properties": {
          "AccountKey": {
            "description": "Must be a valid Account Key for that user and Asset Type\n",
            "type": "string"
          },
          "AdvancedOptions": {
            "$ref": "#/components/schemas/AdvancedOptionsDefinition"
          },
          "AssetType": {
            "type": "string",
            "enum": [
              "EQ",
              "FU",
              "OP"
            ]
          },
          "Duration": {
            "type": "string",
            "enum": [
              "DAY",
              "DYP",
              "GTC",
              "GCP",
              "GTD",
              "GDP",
              "OPG",
              "CLO",
              "IOC",
              "FOK",
              1,
              "1 MIN",
              3,
              "3 MIN",
              5,
              "5 MIN"
            ],
            "description": "Allowed durations vary by Asset Type\n* DAY - Day, valid until the end of the regular trading session.\n* DYP - Day Plus; valid until the end of the extended trading session\n* GTC - Good till canceled\n* GCP - Good till canceled plus\n* GTD - Good through date\n* GDP - Good through date plus\n* OPG - At the opening; only valid for listed stocks at the opening session Price\n* CLO - On Close; orders that target the closing session of an exchange.\n* IOC - Immediate or Cancel; filled immediately or canceled, partial fills are accepted\n* FOK - Fill or Kill; orders are filled entirely or canceled, partial fills are not accepted\n* 1 or 1 MIN - 1 minute; expires after the 1 minute\n* 3 or 3 MIN - 3 minutes; expires after the 3 minutes\n* 5 or 5 MIN - 5 minutes; expires after the 5 minutes\n"
          },
          "GTDDate": {
            "description": "Date that Order is valid through. Input Format: MM/DD/YYYY\nRequired for orders with Duration = GTD.\n",
            "maxLength": 10,
            "type": "string",
            "format": "mmddyyyy"
          },
          "LimitPrice": {
            "type": "string"
          },
          "StopPrice": {
            "type": "string"
          },
          "OrderConfirmId": {
            "description": "A unique identifier regarding an order used to prevent duplicates.\n\nMust be unique per API key, per order, per user.\n",
            "maxLength": 25,
            "type": "string"
          },
          "OrderType": {
            "type": "string",
            "enum": [
              "Limit",
              "Market",
              "StopLimit",
              "StopMarket"
            ]
          },
          "Quantity": {
            "type": "string"
          },
          "Route": {
            "type": "string",
            "description": "The route of the order. For Stocks and Options, Route value will default to `Intelligent` if no value is set.\nMust be UPPERCASE. Routes can be obtained from [Retrieve Available Exchanges](#operation/getExchanges).\n"
          },
          "Symbol": {
            "description": "Must be UPPERCASE",
            "type": "string"
          },
          "TradeAction": {
            "type": "string",
            "description": "Conveys the intent of the trade\n* BUY - `equities` and `futures`\n* SELL - `equities` and `futures`\n* BUYTOCOVER - `equities`\n* SELLSHORT - `equities`\n* BUYTOOPEN - `options`\n* BUYTOCLOSE - `options`\n* SELLTOOPEN - `options`\n* SELLTOCLOSE - `options`\n",
            "enum": [
              "BUY",
              "SELL",
              "BUYTOCOVER",
              "SELLSHORT",
              "BUYTOOPEN",
              "BUYTOCLOSE",
              "SELLTOOPEN",
              "SELLTOCLOSE"
            ]
          },
          "OSOs": {
            "items": {
              "type": "object",
              "properties": {
                "Type": {
                  "type": "string",
                  "enum": [
                    "NORMAL",
                    "BRK",
                    "OCO"
                  ]
                },
                "Orders": {
                  "items": {
                    "$ref": "#/components/schemas/OrderRequestDefinition"
                  },
                  "minItems": 1,
                  "type": "array",
                  "uniqueItems": true
                }
              },
              "required": [
                "Type"
              ]
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          },
          "Legs": {
            "items": {
              "type": "object",
              "properties": {
                "Symbol": {
                  "description": "Must be UPPERCASE",
                  "type": "string"
                },
                "Quantity": {
                  "type": "string"
                },
                "TradeAction": {
                  "type": "string",
                  "enum": [
                    "BUY",
                    "SELL",
                    "BUYTOCOVER",
                    "SELLSHORT",
                    "BUYTOOPEN",
                    "BUYTOCLOSE",
                    "SELLTOOPEN",
                    "SELLTOCLOSE"
                  ],
                  "description": "Conveys the intent of the trade\n* BUY - equity and futures trades\n* SELL - equity and futures trades\n* BUYTOCOVER - equity trade to close a short position\n* SELLSHORT - equity trade to open a short position\n* BUYTOOPEN - option trades\n* BUYTOCLOSE - option trades\n* SELLTOOPEN - option trades\n* SELLTOCLOSE - option trades\n"
                }
              }
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "AssetType",
          "Symbol",
          "Quantity",
          "OrderType",
          "Duration",
          "AccountKey",
          "TradeAction"
        ],
        "type": "object"
      },
      "Account": {
        "type": "object",
        "properties": {
          "AccountDetail": {
            "$ref": "#/components/schemas/AccountDetail"
          },
          "AccountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "AccountType": {
            "type": "string",
            "description": "The type of the TradeStation Account. Valid values are: `Cash`, `Margin`, `Futures`, `DVP`, and `Crypto`."
          },
          "Alias": {
            "type": "string",
            "description": "A user specified name that identifies a TradeStation account. Omits if not set."
          },
          "AltID": {
            "type": "string",
            "description": "TradeStation account ID for accounts based in Japan. Omits if not set."
          },
          "Currency": {
            "type": "string",
            "description": "Currency associated with this account."
          },
          "Status": {
            "type": "string",
            "description": "Status of a specific account:\n- Active\n- Closed\n- Closing Transaction Only\n- Margin Call - Closing Transactions Only\n- Inactive\n- Liquidating Transactions Only\n- Restricted\n- 90 Day Restriction-Closing Transaction Only"
          }
        },
        "description": "Contains brokerage account information for individual brokerage accounts."
      },
      "AccountDetail": {
        "type": "object",
        "properties": {
          "CryptoEnabled": {
            "type": "boolean",
            "description": "Identifies whether equity account is enabled for crypto trading."
          },
          "DayTradingQualified": {
            "type": "boolean",
            "description": "Indicates if the account is qualified to day trade as per compliance suitability in TradeStation. An account that is not Day Trading Qualified is subject to restrictions that will not allow it to become a pattern day trader."
          },
          "EnrolledInRegTProgram": {
            "type": "boolean",
            "description": "For internal use only.  Identifies whether accounts is enrolled in Reg T program."
          },
          "IsStockLocateEligible": {
            "type": "boolean",
            "description": "True if this account is stock locate eligible; otherwise, false."
          },
          "OptionApprovalLevel": {
            "type": "integer",
            "description": "Valid values are: `0`, `1`, `2`, `3`, `4`, and `5`.\n(Equities) The option approval level will determine what options strategies you will be able to employ in the account. In general terms, the levels are defined as follows:\nLevel 0 - No options trading allowed\nLevel 1 - Writing of Covered Calls, Buying Protective Puts\nLevel 2 - Level 1 + Buying Calls, Buying Puts, Writing Covered Puts\nLevel 3 - level 2+ Stock Option Spreads, Index Option Spreads, Butterfly Spreads, Condor Spreads, Iron Butterfly Spreads, Iron Condor Spreads\nLevel 4 - Level 3 + Writing of Naked Puts (Stock Options)\nLevel 5 - Level 4 + Writing of Naked Puts (Index Options), Writing of Naked Calls (Stock Options), Writing of Naked Calls (Index Options)",
            "format": "int64"
          },
          "PatternDayTrader": {
            "type": "boolean",
            "description": "(Equities) Indicates whether you are considered a pattern day trader. As per FINRA rules, you will be considered a pattern day trader if you trade 4 or more times in 5 business days and your day-trading activities are greater than 6 percent of your total trading activity for that same five-day period. A pattern day trader must maintain a minimum equity of $25,000 on any day that the customer day trades. If the account falls below the $25,000 requirement, the pattern day trader will not be permitted to day trade until the account is restored to the $25,000 minimum equity level."
          },
          "RequiresBuyingPowerWarning": {
            "type": "boolean",
            "description": "For internal use only. Identifies whether account is enrolled in the margin buying power warning program to receive alerts prior to placing an order which would exceed their buying power."
          }
        },
        "description": "(Equities) Contains detailed information about specific accounts depending on account type."
      },
      "AccountID": {
        "type": "string",
        "description": "TradeStation Account ID."
      },
      "Accounts": {
        "type": "object",
        "properties": {
          "Accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            }
          }
        },
        "description": "Contains brokerage account information for the identified user."
      },
      "ActivationTrigger": {
        "type": "object",
        "description": "The trigger type allows you to specify the type of tick, number, and pattern of ticks that will trigger a specific row of an activation rule.",
        "properties": {
          "Key": {
            "type": "string",
            "description": "Value used in the `TriggerKey` property of `MarketActivationRules` in the `AdvancedOptions` for an order. Valid Values are: `STT`, `STTN`, `SBA`, `SAB`, `DTT`, `DTTN`, `DBA`, `DAB`, `TTT`, `TTTN`, `TBA`, and `TAB`."
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "ActivationTriggers": {
        "type": "object",
        "properties": {
          "ActivationTriggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivationTrigger"
            }
          }
        },
        "description": "The trigger type allows you to specify the type of tick, number, and pattern of ticks that will trigger a specific row of an activation rule."
      },
      "AdvancedOptionsReplace": {
        "type": "object",
        "properties": {
          "ShowOnlyQuantity": {
            "type": "string",
            "description": "Hides the true number of shares intended to be bought or sold. Valid for `Limit` and `StopLimit` order types. Not valid for all exchanges. For Equities and Futures."
          },
          "TrailingStop": {
            "$ref": "#/components/schemas/TrailingStop"
          },
          "MarketActivationRules": {
            "type": "object",
            "description": "Does not apply to Crypto orders.",
            "$ref": "#/components/schemas/MarketActivationRulesReplace"
          },
          "TimeActivationRules": {
            "type": "object",
            "description": "Does not apply to Crypto orders.",
            "$ref": "#/components/schemas/TimeActivationRulesReplace"
          }
        }
      },
      "AdvancedOptions": {
        "type": "object",
        "properties": {
          "AddLiquidity": {
            "type": "boolean",
            "description": "This option allows you to place orders that will only add liquidity on the route you selected. To place an Add Liquidity order, the user must also select Book Only order type. Valid values `true` and `false`.  Valid for Equities only."
          },
          "AllOrNone": {
            "type": "boolean",
            "description": "Use this advanced order feature when you do not want a partial fill. Your order will be filled in its entirety or not at all. Valid values `true` and `false`.  Valid for Equities and Options."
          },
          "BookOnly": {
            "type": "boolean",
            "description": "This option restricts the destination you choose in the direct routing from re-routing your order to another destination. This type of order is useful in controlling your execution costs by avoiding fees the Exchanges can charge for rerouting your order to another market center. Valid values `true` and `false`.  Valid for Equities only."
          },
          "DiscretionaryPrice": {
            "type": "string",
            "description": "You can use this option to reflect a Bid/Ask at a lower/higher price than you are willing to pay using a specified price increment. Valid for `Limit` and `Stop Limit` orders only. Valid for Equities only."
          },
          "MarketActivationRules": {
            "type": "array",
            "description": "Does not apply to Crypto orders.",
            "items": {
              "$ref": "#/components/schemas/MarketActivationRules"
            }
          },
          "NonDisplay": {
            "type": "boolean",
            "description": "When you send a non-display order, it will not be reflected in either the Market Depth display or ECN books. Valid values `true` and `false`.  Valid for Equities only."
          },
          "PegValue": {
            "type": "string",
            "description": "This order type is useful to achieve a fair price in a fast or volatile market. Valid values `BEST` and `MID`. Valid for Equities only."
          },
          "ShowOnlyQuantity": {
            "type": "string",
            "description": "Hides the true number of shares intended to be bought or sold. Valid for `Limit` and `StopLimit` order types. Not valid for all exchanges. For Equities and Futures."
          },
          "TimeActivationRules": {
            "type": "array",
            "description": "Does not apply to Crypto orders.",
            "items": {
              "$ref": "#/components/schemas/TimeActivationRules"
            }
          },
          "TrailingStop": {
            "$ref": "#/components/schemas/TrailingStop"
          }
        }
      },
      "AdvancedOrderType": {
        "type": "string",
        "description": "The type of the advanced order.",
        "enum": [
          "NORMAL",
          "BRK",
          "OCO"
        ]
      },
      "AssetType": {
        "type": "string",
        "description": "The type of financial instrument that a symbol represents.",
        "enum": [
          "UNKNOWN",
          "STOCK",
          "STOCKOPTION",
          "FUTURE",
          "FUTUREOPTION",
          "FOREX",
          "CURRENCYOPTION",
          "INDEX",
          "INDEXOPTION",
          "MUTUALFUND",
          "MONEYMARKETFUND",
          "BOND",
          "CRYPTO"
        ]
      },
      "BODBalance": {
        "type": "object",
        "properties": {
          "AccountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "AccountType": {
            "type": "string",
            "description": "The account type of this account."
          },
          "BalanceDetail": {
            "$ref": "#/components/schemas/BODBalanceDetail"
          },
          "CurrencyDetails": {
            "type": "array",
            "description": "Only applies to futures. Contains beginning of day currency detail information which varies according to account type.",
            "items": {
              "$ref": "#/components/schemas/BODCurrencyDetail"
            }
          }
        },
        "description": "Contains beginning of day balance information for a single account."
      },
      "BODBalanceDetail": {
        "type": "object",
        "properties": {
          "AccountBalance": {
            "type": "string",
            "description": "Only applies to equities. The amount of cash in the account at the beginning of the day."
          },
          "CashAvailableToWithdraw": {
            "type": "string",
            "description": "Beginning of day value for cash available to withdraw."
          },
          "DayTrades": {
            "type": "string",
            "description": "Only applies to equities. The number of day trades placed in the account within the previous 4 trading days. A day trade refers to buying then selling or selling short then buying to cover the same security on the same trading day."
          },
          "DayTradingMarginableBuyingPower": {
            "type": "string",
            "description": "Only applies to equities. The Intraday Buying Power with which the account started the trading day."
          },
          "Equity": {
            "type": "string",
            "description": "The total amount of equity with which you started the current trading day."
          },
          "NetCash": {
            "type": "string",
            "description": "The amount of cash in the account at the beginning of the day."
          },
          "OpenTradeEquity": {
            "type": "string",
            "description": "Only applies to futures. Unrealized profit and loss at the beginning of the day."
          },
          "OptionBuyingPower": {
            "type": "string",
            "description": "Only applies to equities. Option buying power at the start of the trading day."
          },
          "OptionValue": {
            "type": "string",
            "description": "Only applies to equities. Intraday liquidation value of option positions."
          },
          "OvernightBuyingPower": {
            "type": "string",
            "description": "Only applies to equities. Real-time Overnight Marginable Equities Buying Power."
          },
          "SecurityOnDeposit": {
            "type": "string",
            "description": "(Futures) The value of special securities that are deposited by the customer with the clearing firm for the sole purpose of increasing purchasing power in their trading account."
          }
        },
        "description": "Contains detailed beginning of day balance information which varies according to account type."
      },
      "BODCurrencyDetail": {
        "type": "object",
        "properties": {
          "AccountMarginRequirement": {
            "type": "string",
            "description": "The dollar amount of Beginning Day Margin for the given forex account."
          },
          "AccountOpenTradeEquity": {
            "type": "string",
            "description": "The dollar amount of Beginning Day Trade Equity for the given account."
          },
          "AccountSecurities": {
            "type": "string",
            "description": "The value of special securities that are deposited by the customer with the clearing firm for the sole purpose of increasing purchasing power in their trading account. This number will be reset daily by the account balances clearing file. The entire value of this field will increase purchasing power."
          },
          "CashBalance": {
            "type": "string",
            "description": "The dollar amount of the Beginning Day Cash Balance for the given account."
          },
          "Currency": {
            "type": "string",
            "description": "The currency of the entity."
          },
          "MarginRequirement": {
            "type": "string",
            "description": "The dollar amount of Beginning Day Margin for the given forex account."
          },
          "OpenTradeEquity": {
            "type": "string",
            "description": "The dollar amount of Beginning Day Trade Equity for the given account."
          },
          "Securities": {
            "type": "string",
            "description": "Indicates the dollar amount of Beginning Day Securities"
          }
        },
        "description": "Contains beginning of day currency detail information which varies according to account type."
      },
      "Balance": {
        "type": "object",
        "properties": {
          "AccountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "AccountType": {
            "type": "string",
            "description": "The type of the account. Valid values are: `Cash`, `Margin`, `Futures` and `DVP`."
          },
          "BalanceDetail": {
            "$ref": "#/components/schemas/BalanceDetail"
          },
          "BuyingPower": {
            "type": "string",
            "description": "Buying Power available in the account."
          },
          "CashBalance": {
            "type": "string",
            "description": "Indicates the value of real-time cash balance."
          },
          "Commission": {
            "type": "string",
            "description": "The brokerage commission cost and routing fees (if applicable) for a trade based on the number of shares or contracts."
          },
          "CurrencyDetails": {
            "type": "array",
            "description": "Only applies to futures. Collection of properties that describe balance characteristics in different currencies.",
            "items": {
              "$ref": "#/components/schemas/CurrencyDetail"
            }
          },
          "Equity": {
            "type": "string",
            "description": "The real-time equity of the account."
          },
          "MarketValue": {
            "type": "string",
            "description": "Market value of open positions."
          },
          "TodaysProfitLoss": {
            "type": "string",
            "description": "Unrealized profit and loss, for the current trading day, of all open positions."
          },
          "UnclearedDeposit": {
            "type": "string",
            "description": "The total of uncleared checks received by Tradestation for deposit."
          }
        },
        "description": "Contains realtime balance information for a single account."
      },
      "BalanceDetail": {
        "type": "object",
        "properties": {
          "CostOfPositions": {
            "type": "string",
            "description": "(Equities) The cost used to calculate today's P/L."
          },
          "DayTradeExcess": {
            "type": "string",
            "description": "(Equities): (Buying Power Available - Buying Power Used) / Buying Power Multiplier. (Futures): (Cash + UnrealizedGains) - Buying Power Used."
          },
          "DayTradeMargin": {
            "type": "string",
            "description": "(Futures) Money field representing the current total amount of futures day trade margin."
          },
          "DayTradeOpenOrderMargin": {
            "type": "string",
            "description": "(Futures) Money field representing the current amount of money reserved for open orders."
          },
          "DayTrades": {
            "type": "string",
            "description": "(Equities) The number of day trades placed in the account within the previous 4 trading days. A day trade refers to buying then selling or selling short then buying to cover the same security on the same trading day."
          },
          "InitialMargin": {
            "type": "string",
            "description": "(Futures) Sum (Initial Margins of all positions in the given account)."
          },
          "MaintenanceMargin": {
            "type": "string",
            "description": "(Futures) Indicates the value of real-time maintenance margin."
          },
          "MaintenanceRate": {
            "type": "string",
            "description": "Maintenance Margin Rate."
          },
          "MarginRequirement": {
            "type": "string",
            "description": "(Futures) Indicates the value of real-time account margin requirement."
          },
          "OpenOrderMargin": {
            "type": "string",
            "description": "(Futures) The dollar amount of Open Order Margin for the given futures account."
          },
          "OptionBuyingPower": {
            "type": "string",
            "description": "(Equities) The intraday buying power for options."
          },
          "OptionsMarketValue": {
            "type": "string",
            "description": "(Equities) Market value of open positions."
          },
          "OvernightBuyingPower": {
            "type": "string",
            "description": "(Equities) Overnight Buying Power (Regulation T) at the start of the trading day."
          },
          "RealizedProfitLoss": {
            "type": "string",
            "description": "Indicates the value of real-time account realized profit or loss."
          },
          "RequiredMargin": {
            "type": "string",
            "description": "(Equities) Total required margin for all held positions."
          },
          "SecurityOnDeposit": {
            "type": "string",
            "description": "(Futures) The value of special securities that are deposited by the customer with the clearing firm for the sole purpose of increasing purchasing power in their trading account. This number will be reset daily by the account balances clearing file. The entire value of this field will increase purchasing power."
          },
          "TodayRealTimeTradeEquity": {
            "type": "string",
            "description": "(Futures) The unrealized P/L for today. Unrealized P/L - BODOpenTradeEquity."
          },
          "TradeEquity": {
            "type": "string",
            "description": "(Futures) The dollar amount of unrealized profit and loss for the given futures account. Same value as RealTimeUnrealizedGains."
          },
          "UnrealizedProfitLoss": {
            "type": "string",
            "description": "Indicates the value of real-time account unrealized profit or loss."
          },
          "UnsettledFunds": {
            "type": "string",
            "description": "Unsettled Funds are funds that have been closed but not settled."
          }
        },
        "description": "Contains real-time balance information that varies according to account type."
      },
      "Balances": {
        "type": "object",
        "properties": {
          "Balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Balance"
            }
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BalanceError"
            }
          }
        },
        "description": "Contains a collection of realtime balance information."
      },
      "BalancesBOD": {
        "type": "object",
        "properties": {
          "BODBalances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BODBalance"
            }
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BalanceError"
            }
          }
        },
        "description": "Contains a colleciton of beginning of day balance information."
      },
      "Bar": {
        "type": "object",
        "properties": {
          "Close": {
            "type": "string",
            "description": "The close price of the current bar."
          },
          "DownTicks": {
            "type": "integer",
            "description": "A trade made at a price less than the previous trade price or at a price equal to the previous trade price. Does not apply to bars for crypto symbols.",
            "format": "uint64"
          },
          "DownVolume": {
            "type": "integer",
            "description": "Volume traded on downticks. A tick is considered a downtick if  the previous tick was a downtick or the price is lower than the previous tick. Does not apply to bars for crypto symbols.",
            "format": "uint64"
          },
          "Epoch": {
            "type": "integer",
            "description": "The Epoch time.",
            "format": "int64"
          },
          "High": {
            "type": "string",
            "description": "The high price of the current bar."
          },
          "IsEndOfHistory": {
            "type": "boolean",
            "description": "Conveys that all historical bars in the request have been delivered. Does not apply to bars for crypto symbols."
          },
          "IsRealtime": {
            "type": "boolean",
            "description": "Set when there is data in the bar and the data is being built in \"real time\" from a trade. Does not apply to bars for crypto symbols."
          },
          "Low": {
            "type": "string",
            "description": "The low price of the current bar."
          },
          "Open": {
            "type": "string",
            "description": "The open price of the current bar."
          },
          "OpenInterest": {
            "type": "string",
            "description": "For Options or Futures only. Number of open contracts. Does not apply to bars for crypto symbols."
          },
          "TimeStamp": {
            "$ref": "#/components/schemas/TimeStamp"
          },
          "TotalTicks": {
            "type": "integer",
            "description": "Total number of ticks (upticks and downticks together). Does not apply to bars for crypto symbols.",
            "format": "uint64"
          },
          "TotalVolume": {
            "type": "string",
            "description": "The sum of up volume and down volume."
          },
          "UnchangedTicks": {
            "type": "integer",
            "description": "The number of securities with a current price that is the same as the previous day's close. Does not apply to bars for crypto symbols.",
            "format": "uint64"
          },
          "UnchangedVolume": {
            "type": "integer",
            "description": "The volume of securities with a current price that is the same as the previous day's close. Does not apply to bars for crypto symbols.",
            "format": "uint64"
          },
          "UpTicks": {
            "type": "integer",
            "description": "A trade made at a price greater than the previous trade price, or at a price equal to the previous trade price. Does not apply to bars for crypto symbols.",
            "format": "uint64"
          },
          "UpVolume": {
            "type": "integer",
            "description": "Volume traded on upticks. A tick is considered an uptick if the  previous tick was an uptick or the price is higher than the previous tick. Does not apply to bars for crypto symbols.",
            "format": "uint64"
          },
          "BarStatus": {
            "type": "string",
            "description": "Indicates if bar is Open or Closed. Does not apply to bars for crypto symbols."
          }
        },
        "description": "Barchart data, starting from a starting date. Each bar filling quantity of unit."
      },
      "Bars": {
        "type": "object",
        "properties": {
          "Bars": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Bar"
            }
          }
        },
        "description": "Contains a list of barchart data."
      },
      "CallPut": {
        "type": "string",
        "description": "Defines whether an option is a call or a put. Valid values are `CALL` and `PUT`."
      },
      "CurrencyDetail": {
        "type": "object",
        "properties": {
          "AccountConversionRate": {
            "type": "string",
            "description": "Indicates the rate used to convert from the currency of the symbol to the currency of the account."
          },
          "AccountMarginRequirement": {
            "type": "string",
            "description": "Indicates the value of real-time account margin requirement."
          },
          "CashBalance": {
            "type": "string",
            "description": "Indicates the value of real-time cash balance."
          },
          "Commission": {
            "type": "string",
            "description": "(Futures) The brokerage commission cost and routing fees (if applicable) for a trade based on the number of shares or contracts."
          },
          "Currency": {
            "type": "string",
            "description": "Currency is the currency this account is traded in."
          },
          "InitialMargin": {
            "type": "string",
            "description": "Indicates the value of real-time initial margin."
          },
          "MaintenanceMargin": {
            "type": "string",
            "description": "Indicates the value of real-time maintance margin."
          },
          "RealizedProfitLoss": {
            "type": "string",
            "description": "Indicates the value of real-time realized profit or loss."
          },
          "UnrealizedProfitLoss": {
            "type": "string",
            "description": "Indicates the value of real-time unrealized profit or loss."
          }
        },
        "description": "Contains currency detail information which varies according to account type."
      },
      "TimeStamp": {
        "type": "object",
        "description": "Timestamp represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard. \nE.g. `2023-01-01T23:30:30Z`."
      },
      "TimeUtc": {
        "type": "object",
        "description": "Timestamp represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard.\nFor time activated orders, the date portion is required but not relevant. E.g. `2023-01-01T23:30:30Z`."
      },
      "Expiration": {
        "type": "object",
        "description": "Timestamp represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard.\nOnly applicable to GTD and GDP orders. The full timestamp is required, but only the date portion is relevant. E.g. `2023-01-01T23:30:30Z`."
      },
      "ExpirationResponse": {
        "type": "object",
        "description": "Timestamp represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard.\nOnly applicable to GTD and GDP orders. The full timestamp is returned, but only the date portion is relevant. E.g. `2023-01-01T23:30:30Z`. "
      },
      "ExpirationDate": {
        "type": "object",
        "description": "Timestamp represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard. \nE.g. `2023-01-01T23:30:30Z`."
      },
      "Duration": {
        "type": "string",
        "description": "The length of time for which an order will remain valid in the market. Available values are: DAY, DYP, GTC, GCP, GTD, GDP, OPG, CLO, IOC, FOK, 1, 3, and 5. Different asset classes and routes may have restrictions on the durations they accept.\n* DAY - Day, valid until the end of the regular trading session.\n* DYP - Day Plus; valid until the end of the extended trading session.\n* GTC - Good till canceled. Maximum lifespan is 90 calendar days.\n* GCP - Good till canceled plus. Maximum lifespan is 90 calendar days.\n* GTD - Good through date. Maximum lifespan is 90 calendar days.\n* GDP - Good through date plus. Maximum lifespan is 90 calendar days.\n* OPG - At the opening; only valid for listed stocks at the opening session Price.\n* CLO - On Close; orders that target the closing session of an exchange.\n* IOC - Immediate or Cancel; filled immediately or canceled, partial fills are accepted.\n* FOK - Fill or Kill; orders are filled entirely or canceled, partial fills are not accepted.\n* 1 - 1 minute; expires after the 1 minute. Only valid for equity orders.\n* 3 - 3 minutes; expires after the 3 minutes. Only valid for equity orders.\n* 5 - 5 minutes; expires after the 5 minutes. Only valid for equity orders.\n"
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Contains error details.",
        "properties": {
          "Error": {
            "description": "Error Title, can be any of `BadRequest`, `Unauthorized`, `Forbidden`, `TooManyRequests`, `InternalServerError`, `NotImplemented`, `ServiceUnavailable`, or `GatewayTimeout`.",
            "type": "string"
          },
          "Message": {
            "description": "The description of the error.",
            "type": "string"
          }
        }
      },
      "GroupOrderRequest": {
        "type": "object",
        "required": [
          "Type",
          "Orders"
        ],
        "properties": {
          "Orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderRequest"
            }
          },
          "Type": {
            "type": "string",
            "description": "The group order type.  Valid values are: `BRK`, `OCO`, and `NORMAL`."
          }
        },
        "description": "The request for placing a group trade."
      },
      "IncrementScheduleRow": {
        "type": "object",
        "properties": {
          "Increment": {
            "type": "string",
            "description": "The incremental value."
          },
          "StartsAt": {
            "type": "string",
            "description": "The initial value to start incrementing from."
          }
        },
        "description": "IncrementScheduleRow describes a threshold where prices above or equal to the StartsAt threshold will increment at the\nIncrement value defined. A series of rows are provided to build a table to the IncrementSchedule() scheme option."
      },
      "MarketActivationRulesReplace": {
        "type": "object",
        "description": "Any existing Market Activation Rules will be replaced by the values sent in `Rules`.",
        "properties": {
          "ClearAll": {
            "type": "boolean",
            "description": "If 'True', removes all activation rules when replacing the order and ignores any rules sent in `Rules`."
          },
          "Rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketActivationRules"
            }
          }
        }
      },
      "MarketActivationRules": {
        "type": "object",
        "properties": {
          "RuleType": {
            "type": "string",
            "description": "Type of the activation rule. Currently only supports `Price`."
          },
          "Symbol": {
            "type": "string",
            "description": "Symbol that the rule is based on."
          },
          "Predicate": {
            "type": "string",
            "description": "The predicate comparison for the market rule type. E.g. `Lt` (less than).\n- `Lt` - Less Than\n- `Lte` - Less Than or Equal\n- `Gt` - Greater Than\n- `Gte` - Greater Than or Equal"
          },
          "TriggerKey": {
            "type": "string",
            "description": "The ticks behavior for the activation rule. Rule descriptions can be obtained from [Get Activation Triggers](#operation/GetActivationTriggers).",
            "enum": [
              "STT",
              "STTN",
              "SBA",
              "SAB",
              "DTT",
              "DTTN",
              "DBA",
              "DAB",
              "TTT",
              "TTTN",
              "TBA",
              "TAB"
            ]
          },
          "Price": {
            "type": "string",
            "description": "Valid only for RuleType=\"Price\", the price at which the rule will trigger when the price hits ticks as specified by TriggerKey."
          },
          "LogicOperator": {
            "type": "string",
            "description": "Relation with the previous activation rule when given a list of MarketActivationRules. Ignored for the first MarketActivationRule.",
            "enum": [
              "And",
              "Or"
            ]
          }
        }
      },
      "OrderBase": {
        "type": "object",
        "title": "Order",
        "properties": {
          "AccountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "AdvancedOptions": {
            "type": "string",
            "description": "Will display a value when the order has advanced order rules associated with it or\nis part of a bracket order. Valid Values are: `CND`, `AON`, `TRL`, `SHWQTY`, `DSCPR`, `NON`, `PEGVAL`, `BKO`, `PSO`\n* `AON` - All or None\n* `BKO` - Book Only\n* `CND` - Activation Rule\n* `DSCPR=<Price>` - Discretionary price\n* `NON` - Non-Display\n* `PEGVAL=<Value>` - Peg Value\n* `PSO` - Add Liquidity\n* `SHWQTY=<quantity>` - Show Only\n* `TRL` - Trailing Stop"
          },
          "ClosedDateTime": {
            "type": "string",
            "description": "The Closed Date Time of this order.",
            "format": "date-time"
          },
          "CommissionFee": {
            "type": "string",
            "description": "The actual brokerage commission cost and routing fees (if applicable) for a trade based on the number of shares or contracts."
          },
          "ConditionalOrders": {
            "type": "array",
            "description": "Describes the relationship between linked orders in a group and this order.",
            "items": {
              "$ref": "#/components/schemas/OrderRelationship"
            }
          },
          "ConversionRate": {
            "type": "string",
            "description": "Indicates the rate used to convert from the currency of the symbol to the currency of the account."
          },
          "Currency": {
            "type": "string",
            "description": "Currency used to complete the Order."
          },
          "Duration": {
            "type": "string",
            "description": "The amount of time for which an order is valid."
          },
          "FilledPrice": {
            "type": "string",
            "description": "At the top level, this is the average fill price. For expanded levels, this is the actual execution price."
          },
          "GoodTillDate": {
            "type": "string",
            "description": "For GTC, GTC+, GTD and GTD+ order durations. The date the order will expire on in UTC format. The time portion, if \"T00:00:00Z\", should be ignored.",
            "format": "date-time"
          },
          "GroupName": {
            "type": "string",
            "description": "It can be used to identify orders that are part of the same bracket."
          },
          "Legs": {
            "type": "array",
            "description": "An array of legs associated with this order.",
            "items": {
              "$ref": "#/components/schemas/OrderLeg"
            }
          },
          "MarketActivationRules": {
            "type": "array",
            "description": "Does not apply to Crypto orders.",
            "items": {
              "$ref": "#/components/schemas/MarketActivationRules"
            }
          },
          "TimeActivationRules": {
            "type": "array",
            "description": "Does not apply to Crypto orders.",
            "items": {
              "$ref": "#/components/schemas/TimeActivationRules"
            }
          },
          "LimitPrice": {
            "type": "string",
            "description": "The limit price for Limit and Stop Limit orders."
          },
          "OpenedDateTime": {
            "type": "string",
            "description": "Time the order was placed.",
            "format": "date-time"
          },
          "OrderID": {
            "type": "string",
            "description": "The order ID of this order."
          },
          "OrderType": {
            "$ref": "#/components/schemas/OrderType"
          },
          "PriceUsedForBuyingPower": {
            "type": "string",
            "description": "Price used for the buying power calculation of the order."
          },
          "RejectReason": {
            "type": "string",
            "description": "If an order has been rejected, this will display the rejection. reason"
          },
          "Routing": {
            "type": "string",
            "description": "Identifies the routing selection made by the customer when placing the order."
          },
          "ShowOnlyQuantity": {
            "type": "string",
            "description": "Hides the true number of shares intended to be bought or sold. Valid for `Limit` and `StopLimit` order types. Not valid for all exchanges."
          },
          "Spread": {
            "type": "string",
            "description": "The spread type for an option order."
          }
        },
        "description": "A brokerage order."
      },
      "Order": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderBase"
          },
          {
            "type": "object",
            "properties": {
              "Status": {
                "$ref": "#/components/schemas/Status"
              },
              "StatusDescription": {
                "type": "string",
                "description": "Description of the status."
              },
              "StopPrice": {
                "type": "string",
                "description": "The stop price for StopLimit and StopMarket orders."
              },
              "TrailingStop": {
                "$ref": "#/components/schemas/TrailingStop"
              },
              "UnbundledRouteFee": {
                "type": "string",
                "description": "Only applies to equities.  Will contain a value if the order has received a routing fee."
              }
            }
          }
        ]
      },
      "HistoricalOrder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderBase"
          },
          {
            "type": "object",
            "properties": {
              "Status": {
                "$ref": "#/components/schemas/HistoricalStatus"
              },
              "StatusDescription": {
                "type": "string",
                "description": "Description of the status."
              },
              "StopPrice": {
                "type": "string",
                "description": "The stop price for StopLimit and StopMarket orders."
              },
              "TrailingStop": {
                "$ref": "#/components/schemas/TrailingStop"
              },
              "UnbundledRouteFee": {
                "type": "string",
                "description": "Only applies to equities.  Will contain a value if the order has received a routing fee."
              }
            }
          }
        ]
      },
      "OrderConfirmResponse": {
        "type": "object",
        "properties": {
          "AccountCurrency": {
            "type": "string",
            "description": "The currency the account is traded in."
          },
          "AccountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "AddLiquidity": {
            "type": "boolean",
            "description": "This option allows you to place orders that will only add liquidity on the route you selected. To place an Add Liquidity order, the user must also select Book Only order type. Valid values `true` and `false`.  Valid for Equities only."
          },
          "AllOrNone": {
            "type": "boolean",
            "description": "Use this advanced order feature when you do not want a partial fill. Your order will be filled in its entirety or not at all. Valid values `true` and `false`.  Valid for Equities and Options."
          },
          "BaseCurrency": {
            "type": "string",
            "description": "The base currency."
          },
          "BookOnly": {
            "type": "boolean",
            "description": "This option restricts the destination you choose in the direct routing from re-routing your order to another destination. This type of order is useful in controlling your execution costs by avoiding fees the Exchanges can charge for rerouting your order to another market center. Valid values `true` and `false`.  Valid for Equities only."
          },
          "CounterCurrency": {
            "type": "string",
            "description": "The counter currency."
          },
          "Currency": {
            "type": "string",
            "description": "The currency used in this transaction."
          },
          "DebitCreditEstimatedCost": {
            "type": "string",
            "description": "The actual cost for Market orders and orders with conditions, such as Trailing Stop or Activation Rule orders. Takes into account wheather or not the transaction will result in a debit or credit to the user."
          },
          "DiscretionaryPrice": {
            "type": "string",
            "description": "You can use this option to reflect a Bid/Ask at a lower/higher price than you are willing to pay using a specified price increment. Valid for `Limit` and `Stop Limit` orders only. Valid for Equities only."
          },
          "EstimatedCommission": {
            "type": "string",
            "description": "An estimated value that is calculated using the published TradeStation commission schedule. Equity and Futures Orders."
          },
          "EstimatedCost": {
            "type": "string",
            "description": "The actual cost for Market orders and orders with conditions, such as Trailing Stop or Activation Rule orders."
          },
          "EstimatedPrice": {
            "type": "string",
            "description": "An estimated value that is calculated using current market information. The actual cost for Market orders and orders with conditions, such as Trailing Stop or Activation Rule orders, may differ significantly from this estimate."
          },
          "InitialMarginDisplay": {
            "type": "string",
            "description": "Initial margin displayed for this transaction."
          },
          "Legs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderConfirmResponseLeg"
            }
          },
          "LimitPrice": {
            "type": "string",
            "description": "The limit price for Limit orders."
          },
          "NonDisplay": {
            "type": "boolean",
            "description": "When you send a non-display order, it will not be reflected in either the Market Depth display or ECN books. Valid values `true` and `false`.  Valid for Equities only."
          },
          "OrderAssetCategory": {
            "type": "string",
            "description": "Indicates the category of the order.",
            "enum": [
              "EQUITY",
              "STOCKOPTION",
              "FUTURE",
              "CRYPTO"
            ]
          },
          "OrderConfirmID": {
            "type": "string",
            "description": "Non-crypto orders only.  A unique identifier regarding an order used to prevent duplicates. Must be unique per API key, per order, per user."
          },
          "PegValue": {
            "type": "string",
            "description": "This order type is useful to achieve a fair price in a fast or volatile market. Valid values `BEST` and `MID`. Valid for Equities only."
          },
          "ProductCurrency": {
            "type": "string",
            "description": "The currency of the product."
          },
          "Route": {
            "type": "string",
            "description": "The route of this transaction."
          },
          "ShowOnlyQuantity": {
            "type": "integer",
            "description": "Hides the true number of shares intended to be bought or sold. Valid for `Limit` and `StopLimit` order types. Not valid for all exchanges.",
            "format": "int64"
          },
          "Spread": {
            "type": "string",
            "description": "The option spread."
          },
          "StopPrice": {
            "type": "string",
            "description": "The stop price for open orders."
          },
          "SummaryMessage": {
            "type": "string",
            "description": "A summary message."
          },
          "TimeInForce": {
            "type": "object",
            "properties": {
              "Duration": {
                "$ref": "#/components/schemas/Duration"
              },
              "Expiration": {
                "$ref": "#/components/schemas/ExpirationResponse"
              }
            },
            "description": "TimeInForce defines the duration and duration timestamp."
          },
          "TrailingStop": {
            "$ref": "#/components/schemas/TrailingStop"
          },
          "Underlying": {
            "type": "string",
            "description": "Underlying symbol name."
          }
        },
        "description": "The response will also contain asset-specific fields."
      },
      "OrderConfirmResponseLeg": {
        "type": "object",
        "properties": {
          "ExpirationDate": {
            "$ref": "#/components/schemas/ExpirationDate"
          },
          "OptionType": {
            "$ref": "#/components/schemas/CallPut"
          },
          "Quantity": {
            "type": "string",
            "description": "The quantity."
          },
          "StrikePrice": {
            "type": "string",
            "description": "The strike price for this option."
          },
          "Symbol": {
            "type": "string",
            "description": "The symbol name associated with this option."
          },
          "TradeAction": {
            "$ref": "#/components/schemas/TradeAction"
          }
        },
        "description": "An object that is returned from order confirm in WebAPI."
      },
      "OrderConfirmResponses": {
        "type": "object",
        "properties": {
          "Confirmations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderConfirmResponse"
            }
          }
        },
        "description": "A collection of OrderConfirmResponse objects."
      },
      "OrderLeg": {
        "type": "object",
        "properties": {
          "AssetType": {
            "type": "string",
            "description": "Indicates the asset type of the order.",
            "enum": [
              "UNKNOWN",
              "STOCK",
              "STOCKOPTION",
              "FUTURE",
              "FUTUREOPTION",
              "FOREX",
              "CURRENCYOPTION",
              "INDEX",
              "INDEXOPTION",
              "CRYPTO"
            ]
          },
          "BuyOrSell": {
            "type": "string",
            "description": "Identifies whether the order is a buy or sell. Valid values are `Buy`, `Sell`, `SellShort`, or `BuyToCover`."
          },
          "ExecQuantity": {
            "type": "string",
            "description": "Number of shares that have been executed."
          },
          "ExecutionPrice": {
            "type": "string",
            "description": "The price at which order execution occurred."
          },
          "ExpirationDate": {
            "type": "object",
            "description": "The expiration date of the future or option symbol."
          },
          "OpenOrClose": {
            "type": "string",
            "description": "What kind of order leg - Opening or Closing."
          },
          "OptionType": {
            "type": "string",
            "description": "Present for options. Valid values are \"CALL\" and \"PUT\"."
          },
          "QuantityOrdered": {
            "type": "string",
            "description": "Number of shares or contracts being purchased or sold."
          },
          "QuantityRemaining": {
            "type": "string",
            "description": "In a partially filled order, this is the number of shares or contracts that were unfilled."
          },
          "StrikePrice": {
            "type": "string",
            "description": "Present for options. The price at which the holder of an options contract can buy or sell the underlying asset."
          },
          "Symbol": {
            "type": "string",
            "description": "Symbol for the leg order."
          },
          "Underlying": {
            "type": "string",
            "description": "Underlying Symbol associated. Only applies to Futures and Options."
          }
        },
        "description": "OrderLeg is an object returned from WebAPI."
      },
      "OrderRelationship": {
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "string",
            "description": "The order ID of the linked order."
          },
          "Relationship": {
            "type": "string",
            "description": "Describes the relationship of a linked order within a group order to the current returned order. Valid Values are: `BRK`, `OSP` (linked parent), `OSO` (linked child), and `OCO`."
          }
        },
        "description": "Describes the relationship between linked orders in a group and this order."
      },
      "OrderReplaceRequest": {
        "type": "object",
        "description": "Describes the order properties which are being updated. Requires at least one updated property.",
        "properties": {
          "LimitPrice": {
            "type": "string",
            "description": "The limit price for this order."
          },
          "StopPrice": {
            "type": "string",
            "description": "The stop price for this order. If a TrailingStop amount or percent is passed in with the request (in the AdvancedOptions), and a StopPrice value is also passed in, the StopPrice value is ignored."
          },
          "OrderType": {
            "type": "string",
            "description": "The order type of this order. Order type can only be updated to `Market`."
          },
          "Quantity": {
            "type": "string",
            "description": "The quantity of this order."
          },
          "AdvancedOptions": {
            "$ref": "#/components/schemas/AdvancedOptionsReplace"
          }
        }
      },
      "OrderRequest": {
        "type": "object",
        "required": [
          "AccountID",
          "TimeInForce",
          "OrderType",
          "Quantity",
          "Symbol",
          "TradeAction"
        ],
        "properties": {
          "AccountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "AdvancedOptions": {
            "$ref": "#/components/schemas/AdvancedOptions"
          },
          "BuyingPowerWarning": {
            "type": "string",
            "description": "For internal use only. For TradeStation Margin accounts enrolled in the Reg-T program, clients should send\nconfirmation that the customer has been shown appropriate buying power warnings in advance of placing an order\nthat could potentially violate the account's buying power. Valid values are: `Enforce`, `Preconfirmed`, and\n`Confirmed`."
          },
          "Legs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderRequestLegs"
            }
          },
          "LimitPrice": {
            "type": "string",
            "description": "The limit price for this order."
          },
          "OSOs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderRequestOSO"
            }
          },
          "OrderConfirmID": {
            "type": "string",
            "minLength": 1,
            "maxLength": 25,
            "description": "Non-Crypto orders only.  A unique identifier regarding an order used to prevent duplicates. Must be unique per API key, per order, per user."
          },
          "OrderType": {
            "$ref": "#/components/schemas/OrderType"
          },
          "Quantity": {
            "type": "string",
            "description": "The quantity of the order."
          },
          "Route": {
            "type": "string",
            "description": "The route of the order. For USDCUSD Crypto orders, route must be specified as `USDC`. For all other Crypto currencies, Route will default to `TSSR` if not specified. For Stocks and Options, Route value will default to `Intelligent` if no value is set. Routes can be obtained from [Get Routes](#operation/Routes)."
          },
          "StopPrice": {
            "type": "string",
            "description": "The stop price for this order. If a TrailingStop amount or percent is passed in with the request (in the AdvancedOptions), and a StopPrice value is also passed in, the StopPrice value is ignored."
          },
          "Symbol": {
            "type": "string",
            "description": "The symbol used for this order."
          },
          "TimeInForce": {
            "$ref": "#/components/schemas/TimeInForceRequest"
          },
          "TradeAction": {
            "$ref": "#/components/schemas/TradeAction"
          }
        },
        "description": "Submits 1 or more orders. Crypto order requests require an Account type of `Crypto`."
      },
      "OrderRequestLegs": {
        "type": "object",
        "required": [
          "Symbol",
          "Quantity",
          "TradeAction"
        ],
        "properties": {
          "Quantity": {
            "type": "string",
            "description": "The quantity of the order."
          },
          "Symbol": {
            "type": "string",
            "description": "The symbol used for this leg of the order."
          },
          "TradeAction": {
            "$ref": "#/components/schemas/TradeAction"
          }
        },
        "description": "The legs of an order being submitted."
      },
      "OrderRequestOSO": {
        "type": "object",
        "required": [
          "Type",
          "Orders"
        ],
        "properties": {
          "Orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderRequest"
            }
          },
          "Type": {
            "$ref": "#/components/schemas/AdvancedOrderType"
          }
        },
        "description": "OrderRequestOSO defines OSOs for placing a trade on WebAPI."
      },
      "OrderResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          },
          "OrderID": {
            "type": "string"
          }
        },
        "description": "OrderResponse is the response from placing a trade (OrderRequest)."
      },
      "OrderResponses": {
        "type": "object",
        "properties": {
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderResponse"
            }
          },
          "Orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderResponse"
            }
          }
        },
        "description": "OrderResponses is an array of OrderResponse objects."
      },
      "OrderType": {
        "type": "string",
        "description": "The order type of the order.",
        "enum": [
          "Limit",
          "StopMarket",
          "Market",
          "StopLimit"
        ]
      },
      "Orders": {
        "title": "Orders",
        "type": "object",
        "properties": {
          "Orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderError"
            }
          },
          "NextToken": {
            "type": "string",
            "description": "A token returned with paginated orders which can be used in a subsequent request to retrieve the next page."
          }
        },
        "description": "Orders contains a collection of recent or historical orders for the requested account."
      },
      "HistoricalOrders": {
        "title": "Orders",
        "type": "object",
        "properties": {
          "Orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HistoricalOrder"
            }
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderError"
            }
          },
          "NextToken": {
            "type": "string",
            "description": "A token returned with paginated orders which can be used in a subsequent request to retrieve the next page."
          }
        },
        "description": "Orders contains a collection of recent or historical orders for the requested account."
      },
      "OrdersById": {
        "title": "Orders",
        "type": "object",
        "properties": {
          "Orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderByIDError"
            }
          }
        },
        "description": "Orders contains a collection of recent or historical orders for the requested account."
      },
      "HistoricalOrdersById": {
        "title": "Orders",
        "type": "object",
        "properties": {
          "Orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HistoricalOrder"
            }
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderByIDError"
            }
          }
        },
        "description": "Orders contains a collection of recent or historical orders for the requested account."
      },
      "PositionResponse": {
        "type": "object",
        "properties": {
          "AccountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "AssetType": {
            "type": "string",
            "description": "Indicates the asset type of the position.",
            "enum": [
              "STOCK",
              "STOCKOPTION",
              "FUTURE",
              "INDEXOPTION"
            ]
          },
          "AveragePrice": {
            "type": "string",
            "description": "The average price of the position currently held."
          },
          "Bid": {
            "type": "string",
            "description": "The highest price a prospective buyer is prepared to pay at a particular time for a trading unit of a given symbol."
          },
          "Ask": {
            "type": "string",
            "description": "The price at which a security, futures contract, or other financial instrument is offered for sale."
          },
          "ConversionRate": {
            "type": "string",
            "description": "The currency conversion rate that is used in order to convert from the currency of the symbol to the currency of the account."
          },
          "DayTradeRequirement": {
            "type": "string",
            "description": "(Futures) DayTradeMargin used on open positions. Currently only calculated for futures positions. Other asset classes will have a 0 for this value."
          },
          "ExpirationDate": {
            "type": "string",
            "description": "The UTC formatted expiration date of the future or option symbol, in the country the contract is traded in. The time portion of the value should be ignored."
          },
          "InitialRequirement": {
            "type": "string",
            "description": "Only applies to future and option positions. The margin account balance denominated in the symbol currency required for entering a position on margin."
          },
          "Last": {
            "type": "string",
            "description": "The last price at which the symbol traded."
          },
          "LongShort": {
            "$ref": "#/components/schemas/PositionDirection"
          },
          "MarkToMarketPrice": {
            "type": "string",
            "description": "Only applies to equity and option positions. The MarkToMarketPrice value is the weighted average of the previous close price for the position quantity held overnight and the purchase price of the position quantity opened during the current market session. This value is used to calculate TodaysProfitLoss."
          },
          "MarketValue": {
            "type": "string",
            "description": "The actual market value denominated in the symbol currency of the open position. This value is updated in real-time."
          },
          "PositionID": {
            "type": "string",
            "description": "A unique identifier for the position."
          },
          "Quantity": {
            "type": "string",
            "description": "The number of shares or contracts for a particular position. This value is negative for short positions."
          },
          "Symbol": {
            "type": "string",
            "description": "Symbol of the position."
          },
          "Timestamp": {
            "type": "string",
            "description": "Time the position was entered.",
            "format": "date-time"
          },
          "TodaysProfitLoss": {
            "type": "string",
            "description": "Only applies to equity and option positions. This value will be included in the payload to convey the unrealized profit or loss denominated in the account currency on the position held, calculated using the MarkToMarketPrice."
          },
          "TotalCost": {
            "type": "string",
            "description": "The total cost denominated in the account currency of the open position."
          },
          "UnrealizedProfitLoss": {
            "type": "string",
            "description": "The unrealized profit or loss denominated in the symbol currency on the position held, calculated based on the average price of the position."
          },
          "UnrealizedProfitLossPercent": {
            "type": "string",
            "description": "The unrealized profit or loss on the position expressed as a percentage of the initial value of the position."
          },
          "UnrealizedProfitLossQty": {
            "type": "string",
            "description": "The unrealized profit or loss denominated in the account currency divided by the number of shares, contracts or units held."
          }
        },
        "description": "Position represents a position that is returned for an Account."
      },
      "PositionDirection": {
        "type": "string",
        "description": "Specifies if the position is Long or Short.\n",
        "enum": [
          "Long",
          "Short"
        ]
      },
      "Positions": {
        "type": "object",
        "properties": {
          "Positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositionResponse"
            }
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositionError"
            }
          }
        },
        "description": "The positions for the given account(s)."
      },
      "PriceFormat": {
        "type": "object",
        "properties": {
          "Format": {
            "type": "string",
            "description": "The format of the price.",
            "enum": [
              "Decimal",
              "Fraction",
              "SubFraction"
            ]
          },
          "Decimals": {
            "type": "string",
            "description": "The number of decimals precision, applies to the `Decimal` format only."
          },
          "Fraction": {
            "type": "string",
            "description": "The denominator of the single fraction, i.e. `1/Fraction`, applies to the `Fraction` format only."
          },
          "SubFraction": {
            "type": "string",
            "description": "The additional fraction of a fraction denominator, applies to the `SubFraction` format only."
          },
          "IncrementStyle": {
            "type": "string",
            "description": "The style of increment for price movements.",
            "enum": [
              "Simple",
              "Schedule"
            ]
          },
          "Increment": {
            "type": "string",
            "description": "The decimal increment for all price movements, applies to the `Simple` Increment Style only."
          },
          "IncrementSchedule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncrementScheduleRow"
            }
          },
          "PointValue": {
            "type": "string",
            "description": "The symbol's point value."
          }
        },
        "description": "Conveys number formatting information for symbol price fields."
      },
      "QuantityFormat": {
        "type": "object",
        "properties": {
          "Format": {
            "type": "string",
            "description": "The format of the quantity.",
            "enum": [
              "Decimal"
            ]
          },
          "Decimals": {
            "type": "string",
            "description": "The number of decimals precision, applies to the `Decimal` format only."
          },
          "IncrementStyle": {
            "type": "string",
            "description": "The incremental style. Valid values are: `Simple` and `Schedule`."
          },
          "Increment": {
            "type": "string",
            "description": "The decimal increment for all quantity movements, applies to the `Simple` Increment Style only."
          },
          "IncrementSchedule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncrementScheduleRow"
            }
          },
          "MinimumTradeQuantity": {
            "type": "string",
            "description": "The minimum quantity of an asset that can be traded."
          },
          "MaximumTradeQuantity": {
            "type": "string",
            "description": "The maximum quantity of an asset that can be traded, `Crypto` assets only."
          }
        },
        "description": "Conveys number formatting information for symbol quantity fields."
      },
      "Status": {
        "title": "Status",
        "type": "string",
        "description": "The status of an order. Status filters can be used according to the order category:\n  - Open:\n    - ACK - Received\n    - ASS - Option Assignment\n    - BRC - Bracket Canceled\n    - BRF - Bracket Filled\n    - BRO - Broken\n    - CHG - Change\n    - CND – Condition Met\n    - COR - Fill Corrected\n    - CSN - Cancel Sent\n    - DIS - Dispatched\n    - DOA - Dead\n    - DON – Queued\n    - ECN - Expiration Cancel Request\n    - EXE - Option Exercise\n    - FPR - Partial Fill (Alive)\n    - LAT - Too Late to Cancel\n    - OPN - Sent\n    - OSO - OSO Order\n    - OTHER - OrderStatus not mapped\n    - PLA - Sending\n    - REC - Big Brother Recall Request\n    - RJC – Cancel Request Rejected\n    - RPD - Replace Pending\n    - RSN – Replace Sent\n    - STP - Stop Hit\n    - STT - OrderStatus Message\n    - SUS - Suspended\n    - UCN - Cancel Sent\n  - Canceled:\n    - CAN - Canceled\n    - EXP - Expired\n    - OUT - UROut\n    - RJR - Change Request Rejected\n    - SCN - Big Brother Recall\n    - TSC – Trade Server Canceled\n    - UCH - Replaced\n  - Rejected:\n    - REJ - Rejected\n  - Filled:\n    - FLL - Filled\n    - FLP - Partial Fill (UROut)",
        "enum": [
          "ACK",
          "ASS",
          "BRC",
          "BRF",
          "BRO",
          "CHG",
          "CND",
          "COR",
          "CSN",
          "DIS",
          "DOA",
          "DON",
          "ECN",
          "EXE",
          "FPR",
          "LAT",
          "OPN",
          "OSO",
          "OTHER",
          "PLA",
          "REC",
          "RJC",
          "RPD",
          "RSN",
          "STP",
          "STT",
          "SUS",
          "UCN",
          "CAN",
          "EXP",
          "OUT",
          "RJR",
          "SCN",
          "TSC",
          "UCH",
          "REJ",
          "FLL",
          "FLP"
        ]
      },
      "HistoricalStatus": {
        "title": "Status",
        "type": "string",
        "description": "The status of an order. Status filters can be used according to the order category:\n  - Open:\n    - ACK - Received\n    - ASS - Option Assignment\n    - BRC - Bracket Canceled\n    - BRF - Bracket Filled\n    - BRO - Broken\n    - CHG - Change\n    - CND – Condition Met\n    - COR - Fill Corrected\n    - CSN - Cancel Sent\n    - DIS - Dispatched\n    - DOA - Dead\n    - DON – Queued\n    - ECN - Expiration Cancel Request\n    - EXE - Option Exercise\n    - FPR - Partial Fill (Alive)\n    - LAT - Too Late to Cancel\n    - OPN - Sent\n    - OSO - OSO Order\n    - OTHER - OrderStatus not mapped\n    - PLA - Sending\n    - REC - Big Brother Recall Request\n    - RJC – Cancel Request Rejected\n    - RPD - Replace Pending\n    - RSN – Replace Sent\n    - STP - Stop Hit\n    - STT - OrderStatus Message\n    - SUS - Suspended\n    - UCN - Cancel Sent\n  - Canceled:\n    - CAN - Canceled\n    - EXP - Expired\n    - OUT - UROut\n    - RJR - Change Request Rejected\n    - SCN - Big Brother Recall\n    - TSC – Trade Server Canceled\n    - UCH - Replaced\n  - Rejected:\n    - REJ - Rejected\n  - Filled:\n    - FLL - Filled\n    - FLP - Partial Fill (UROut)",
        "enum": [
          "ACK",
          "ASS",
          "BRC",
          "BRF",
          "BRO",
          "CHG",
          "CND",
          "COR",
          "CSN",
          "DIS",
          "DOA",
          "DON",
          "ECN",
          "EXE",
          "FPR",
          "LAT",
          "OPN",
          "OSO",
          "OTHER",
          "PLA",
          "REC",
          "RJC",
          "RPD",
          "RSN",
          "STP",
          "STT",
          "SUS",
          "UCN",
          "CAN",
          "EXP",
          "OUT",
          "RJR",
          "SCN",
          "TSC",
          "UCH",
          "REJ",
          "FLL",
          "FLP"
        ]
      },
      "SymbolDetail": {
        "type": "object",
        "properties": {
          "AssetType": {
            "$ref": "#/components/schemas/AssetType"
          },
          "Country": {
            "type": "string",
            "description": "The country of the exchange where the symbol is listed."
          },
          "Currency": {
            "type": "string",
            "description": "Displays the type of base currency for the selected symbol."
          },
          "Description": {
            "type": "string",
            "description": "Displays the full name of the symbol, special characters may be formatted in unicode."
          },
          "Exchange": {
            "type": "string",
            "description": "Name of exchange where this symbol is traded."
          },
          "ExpirationDate": {
            "type": "string",
            "description": "The UTC formatted expiration date of a future or option symbol, in the country the contract is traded in. The time portion of the value should be ignored."
          },
          "FutureType": {
            "type": "string",
            "description": "Displays the type of future contract the symbol represents, futures only."
          },
          "OptionType": {
            "$ref": "#/components/schemas/CallPut"
          },
          "PriceFormat": {
            "$ref": "#/components/schemas/PriceFormat"
          },
          "QuantityFormat": {
            "$ref": "#/components/schemas/QuantityFormat"
          },
          "Root": {
            "type": "string",
            "description": "Displays the symbol root, e.g. `ES` for Futures symbol `@ESH21`, `OEX` for IndexOption `OEX 210129C1750`, and `AAPL` for StockOption `AAPL 210129C137`."
          },
          "StrikePrice": {
            "type": "string",
            "description": "For an Option symbol, the Strike Price for the Put or Call."
          },
          "Symbol": {
            "type": "string",
            "description": "The Symbol name or abbreviation."
          },
          "Underlying": {
            "type": "string",
            "description": "The financial instrument on which an Options contract is based or derived. Can also apply to some Futures symbols, like continuous Futures contracts, e.g. `ESH21` for `@ES`."
          }
        }
      },
      "SymbolDetailsResponse": {
        "type": "object",
        "properties": {
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SymbolDetailsErrorResponse"
            }
          },
          "Symbols": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SymbolDetail"
            }
          }
        }
      },
      "SymbolNames": {
        "type": "object",
        "properties": {
          "SymbolNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "A collection of Symbol names."
      },
      "TimeActivationRulesReplace": {
        "type": "object",
        "description": "Advanced option for an order. The date portion is not used for a Time Activation rule and is returned as \"0001-01-01\".",
        "properties": {
          "ClearAll": {
            "type": "boolean",
            "description": "If 'True', removes all activation rules when replacing the order and ignores any rules sent in `Rules`."
          },
          "Rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeActivationRules"
            }
          }
        }
      },
      "TimeActivationRules": {
        "type": "object",
        "description": "Advanced option for an order. The date portion is not used for a Time Activation rule and is returned as \"0001-01-01\".",
        "properties": {
          "TimeUtc": {
            "$ref": "#/components/schemas/TimeUtc"
          }
        }
      },
      "TimeInForceRequest": {
        "type": "object",
        "required": [
          "Duration"
        ],
        "properties": {
          "Duration": {
            "$ref": "#/components/schemas/Duration"
          },
          "Expiration": {
            "$ref": "#/components/schemas/Expiration"
          }
        },
        "description": "TimeInForce defines the duration and expiration timestamp. For `USDCUSD` Crypto orders, `IOC` is required."
      },
      "TradeAction": {
        "type": "string",
        "description": "TradeAction represents the different trade actions that can be sent to or received from WebAPI. Conveys the intent of the trade:\n- `BUY` - crypto, equities and futures\n- `SELL` - crypto, equities and futures\n- `BUYTOCOVER` - equities\n- `SELLSHORT` - equities\n- `BUYTOOPEN` - options\n- `BUYTOCLOSE` - options\n- `SELLTOOPEN` - options\n- `SELLTOCLOSE` - options"
      },
      "TrailingStop": {
        "type": "object",
        "properties": {
          "Amount": {
            "type": "string",
            "description": "Currency Offset from current price. Note: Mutually exclusive with Percent."
          },
          "Percent": {
            "type": "string",
            "description": "Percentage offset from current price. Note: Mutually exclusive with Amount."
          }
        },
        "description": "TrailingStop offset; amount or percent."
      },
      "Wallets": {
        "type": "object",
        "properties": {
          "Wallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Wallet"
            }
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletError"
            }
          }
        },
        "description": "Wallets is an array of currency holdings."
      },
      "WalletsStream": {
        "type": "object",
        "properties": {
          "AccountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "AccountTotals": {
            "$ref": "#/components/schemas/AccountTotals"
          },
          "AveragePrice": {
            "type": "string",
            "description": "Average price of all positions for the current symbol."
          },
          "Balance": {
            "type": "string",
            "description": "The balance of the specific currency in the wallet."
          },
          "BalanceAccountCurrency": {
            "type": "string",
            "description": "The balance of the specific currency in the wallet (specified in the user’s account currency)."
          },
          "BalanceAvailableForTrading": {
            "type": "string",
            "description": "The balance of the specific currency in the wallet that can be used to make trades."
          },
          "BalanceAvailableForTradingAccountCurrency": {
            "type": "string",
            "description": "The balance of the specific currency in the wallet that can be used to make trades (specified in the user’s account currency)."
          },
          "BalanceAvailableForWithdrawal": {
            "type": "string",
            "description": "The balance of the specific currency in the wallet that can be withdrawn."
          },
          "BalanceAvailableForWithdrawalAccountCurrency": {
            "type": "string",
            "description": "The balance of the specific currency in the wallet that can be withdrawn (specified in the user’s account currency)."
          },
          "Currency": {
            "type": "string",
            "description": "The currency of the wallet."
          },
          "Interest": {
            "$ref": "#/components/schemas/Interest"
          },
          "InterestRate": {
            "type": "string",
            "description": "The currency's interest rate."
          },
          "Status": {
            "type": "string",
            "description": "The status of this wallet - Active, Suspended."
          },
          "UnrealizedProfitLossAccountCurrency": {
            "type": "string",
            "description": "The unrealized profit or loss for the specific currency in the wallet (specified in the user’s account currency)."
          }
        },
        "description": "Returns the details of a currency holding."
      },
      "Interest": {
        "type": "object",
        "properties": {
          "Accrued": {
            "type": "string",
            "description": "Unpaid monthly interest accrued for the wallet (specified in the wallet's currency)."
          },
          "AccruedAccountCurrency": {
            "type": "string",
            "description": "Unpaid monthly interest accrued for the wallet (specified in the user's account currency)."
          },
          "TotalPaid": {
            "type": "string",
            "description": "Total interest paid for the wallet (specified in the wallet's currency)."
          },
          "TotalPaidAccountCurrency": {
            "type": "string",
            "description": "Total interest paid for the wallet (specified in the user's account currency)."
          },
          "YTDPaid": {
            "type": "string",
            "description": "Year-to-date interest paid for the wallet (specified in the wallet's currency)."
          },
          "YTDPaidAccountCurrency": {
            "type": "string",
            "description": "Year-to-date interest paid for the wallet (specified in the user's account currency)."
          }
        },
        "description": "Accrued and paid interest for the current wallet."
      },
      "AccountTotals": {
        "type": "object",
        "properties": {
          "AccruedInterestAccountCurrency": {
            "type": "string",
            "description": "Total unpaid monthly interest accrued for all wallets in the account (specified in the user's account currency)."
          },
          "BalanceAccountCurrency": {
            "type": "string",
            "description": "Total balance for all wallets in the account (specified in the user’s account currency)."
          },
          "BalanceAvailableForTradingAccountCurrency": {
            "type": "string",
            "description": "Total balance for all wallets in the account that can be used to make trades (specified in the user’s account currency)."
          },
          "BalanceAvailableForWithdrawalAccountCurrency": {
            "type": "string",
            "description": "Total balance for all wallets in the account that can be withdrawn (specified in the user’s account currency)."
          },
          "TotalPaidInterestAccountCurrency": {
            "type": "string",
            "description": "Total interest paid for all wallets in the account (specified in the user's account currency)."
          },
          "YTDPaidInterestAccountCurrency": {
            "type": "string",
            "description": "Total year-to-date interest paid for all wallets in the account (specified the user's account currency)."
          }
        },
        "description": "Total amount of balance, accrued, and paid interest across all wallets in the user's account currency."
      },
      "Heartbeat": {
        "type": "object",
        "properties": {
          "Heartbeat": {
            "description": "The heartbeat, sent to indicate that the stream is alive, although data is not actively being sent. A heartbeat will be sent after 5 seconds on an idle stream.",
            "type": "integer"
          },
          "Timestamp": {
            "description": "Timestamp represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard. \nE.g. `2023-01-01T23:30:30Z`.",
            "type": "string"
          }
        }
      },
      "BalanceError": {
        "type": "object",
        "properties": {
          "AccountID": {
            "type": "string",
            "description": "The AccountID of the error, may contain multiple Account IDs in comma separated format."
          },
          "Error": {
            "type": "string",
            "description": "The Error."
          },
          "Message": {
            "type": "string",
            "description": "The error message."
          }
        },
        "description": "balanceError is an object supplied when a partial success response is returned with some errors."
      },
      "OrderError": {
        "title": "OrderError",
        "type": "object",
        "properties": {
          "AccountID": {
            "type": "string",
            "description": "The AccountID of the error, may contain multiple Account IDs in comma separated format."
          },
          "Error": {
            "type": "string",
            "description": "The Error."
          },
          "Message": {
            "type": "string",
            "description": "The error message."
          }
        },
        "description": "orderError is an object supplied when a partial success response is returned with some errors."
      },
      "OrderByIDError": {
        "title": "OrderError",
        "type": "object",
        "properties": {
          "AccountID": {
            "type": "string",
            "description": "The AccountID of the error, may contain multiple Account IDs in comma separated format."
          },
          "OrderID": {
            "type": "string",
            "description": "The OrderID of the error."
          },
          "Error": {
            "type": "string",
            "description": "The Error."
          },
          "Message": {
            "type": "string",
            "description": "The error message."
          }
        },
        "description": "orderError is an object supplied when a partial success response is returned with some errors."
      },
      "PositionError": {
        "type": "object",
        "properties": {
          "AccountID": {
            "type": "string",
            "description": "The AccountID of the error, may contain multiple Account IDs in comma separated format."
          },
          "Error": {
            "type": "string",
            "description": "The Error."
          },
          "Message": {
            "type": "string",
            "description": "The error message."
          }
        },
        "description": "Returned when a partial success response includes some errors."
      },
      "StreamErrorResponse": {
        "title": "Error",
        "type": "object",
        "description": "Contains error details.",
        "properties": {
          "Error": {
            "description": "Error Title, can be any of `BadRequest`, `DualLogon`, `GoAway` or `InternalServerError`. When the server is about to shut down, \"GoAway\" is returned to indicate that the stream will close because of server shutdown, and that a new stream will need to be started by the client.",
            "type": "string"
          },
          "Message": {
            "description": "The description of the error.",
            "type": "string"
          }
        }
      },
      "SymbolDetailsErrorResponse": {
        "type": "object",
        "properties": {
          "Error": {
            "type": "string",
            "description": "The Error."
          },
          "Message": {
            "type": "string",
            "description": "The error message."
          },
          "Symbol": {
            "type": "string",
            "description": "The requested symbol."
          }
        },
        "description": "Returned when a partial success response includes some errors."
      },
      "Wallet": {
        "type": "object",
        "properties": {
          "AccountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "Balance": {
            "type": "string",
            "description": "The balance of the specific currency in the account."
          },
          "BalanceAvailableForTrading": {
            "type": "string",
            "description": "The amount of cash in the account that can be used to make trades."
          },
          "BalanceAvailableForWithdrawal": {
            "type": "string",
            "description": "The amount of cash in the account that can be withdrawn."
          },
          "Currency": {
            "type": "string",
            "description": "The currency of the wallet."
          },
          "Status": {
            "type": "string",
            "description": "The status of this wallet - Active, Suspended."
          },
          "UnrealizedProfitLossAccountCurrency": {
            "type": "string",
            "description": "The unrealized profit or loss for the account wallet."
          }
        },
        "description": "Returns the details of a currency holding."
      },
      "WalletError": {
        "type": "object",
        "properties": {
          "AccountID": {
            "type": "string",
            "description": "The AccountID of the error, may contain multiple Account IDs in comma separated format."
          },
          "Currency": {
            "type": "string",
            "description": "The Curreny of the error, if specific to currency."
          },
          "Error": {
            "type": "string",
            "description": "The Error."
          },
          "Message": {
            "type": "string",
            "description": "The error message."
          }
        },
        "description": "Returned when a partial success response includes some errors."
      },
      "Routes": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The ID that must be sent in the optional Route property of a POST order request, when specifying a route for an order."
          },
          "Name": {
            "description": "The name of the route.",
            "type": "string"
          },
          "AssetTypes": {
            "type": "array",
            "description": "The asset type of the route. Valid Values are: `STOCK`, `FUTURE`, `STOCKOPTION`, `INDEXOPTION`, and `CRYPTO`.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Expiration1": {
        "type": "object",
        "description": "Provides information about an option contract expiration.",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard. E.g. `2021-12-17T00:00:00Z`."
          },
          "Type": {
            "type": "string",
            "description": "Expiration Type, e.g. `Weekly`, `Monthly`, `Quarterly`, `EOM`, or `Other`."
          }
        }
      },
      "Expirations": {
        "type": "object",
        "description": "Provides the available contract expiration dates for an underlying security.",
        "properties": {
          "Expirations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Expiration1"
            }
          }
        }
      },
      "RiskRewardAnalysisInput": {
        "type": "object",
        "description": "Provides the required information to analyze the risk vs. reward of a potential option spread trade.",
        "properties": {
          "SpreadPrice": {
            "type": "number",
            "description": "The quoted price for the option spread trade.",
            "format": "double"
          },
          "Legs": {
            "type": "array",
            "description": "The legs of the option spread trade. If more than one leg is specified, the expiration dates must all be the same. In addition, leg symbols must be of type stock, stock option, or index option.",
            "items": {
              "$ref": "#/components/schemas/RiskRewardAnalysisInputLeg"
            }
          }
        },
        "additionalProperties": false
      },
      "RiskRewardAnalysisInputLeg": {
        "type": "object",
        "description": "Provides information about one leg of a potential option spread trade.",
        "required": [
          "Symbol",
          "Quantity",
          "TradeAction"
        ],
        "properties": {
          "Symbol": {
            "type": "string",
            "description": "Option contract symbol or underlying symbol to be traded for this leg."
          },
          "Quantity": {
            "type": "integer",
            "format": "int32",
            "description": "The number of option contracts to buy or sell for this leg. The value cannot be zero."
          },
          "TradeAction": {
            "type": "string",
            "description": "The kind of trade to place for this leg. Value values are `BUY` and `SELL`.",
            "enum": [
              "BUY",
              "SELL"
            ]
          }
        },
        "additionalProperties": false
      },
      "RiskRewardAnalysisResult": {
        "type": "object",
        "properties": {
          "MaxGainIsInfinite": {
            "type": "boolean",
            "description": "Indicates whether the maximum gain can be infinite."
          },
          "AdjustedMaxGain": {
            "type": "string",
            "description": "The adjusted maximum gain (if it is not infinite)."
          },
          "MaxLossIsInfinite": {
            "type": "boolean",
            "description": "Indicates whether the maximum loss can be infinite."
          },
          "AdjustedMaxLoss": {
            "type": "string",
            "description": "The adjusted maximum loss (if it is not infinite)."
          },
          "BreakevenPoints": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Market price that the underlying security must reach for the trade to avoid a loss."
          }
        }
      },
      "Spread": {
        "type": "object",
        "properties": {
          "Delta": {
            "type": "string",
            "description": "The expected change in an option position’s value resulting from a one point increase in the price of the underlying security."
          },
          "Theta": {
            "type": "string",
            "description": "The expected decline in an option position’s value resulting from the passage of one day’s time, holding all other variables (price of the underlying, volatility, etc.) constant."
          },
          "Gamma": {
            "type": "string",
            "description": "The expected change in an option position’s delta resulting from a one point increase in the price of the underlying security."
          },
          "Rho": {
            "type": "string",
            "description": "The expected change in an option position’s value resulting from an increase of one percentage point in the risk-free interest rate (e.g. an increase from 3% to 4%)."
          },
          "Vega": {
            "type": "string",
            "description": "The expected change in an option position’s value resulting from an increase of one percentage point in the volatility of the underlying security (e.g. an increase from 26% to 27%)."
          },
          "ImpliedVolatility": {
            "type": "string",
            "description": "The volatility of the underlying implied by an option position’s current price."
          },
          "IntrinsicValue": {
            "type": "string",
            "description": "The value of an option position exclusive of the position’s time value.  The value of the option position if it were to expire immediately."
          },
          "ExtrinsicValue": {
            "type": "string",
            "description": "The time value of an option position.  The market value of an option position minus the position’s intrinsic value."
          },
          "TheoreticalValue": {
            "type": "string",
            "description": "The value of an option position based on a theoretical model of option prices (e.g., the Bjerksund-Stensland model).  Calculated using volatility of the underlying."
          },
          "ProbabilityITM": {
            "type": "string",
            "description": "The calculated probability that an option position will have intrinsic value at expiration.  Calculated using volatility of the underlying."
          },
          "ProbabilityOTM": {
            "type": "string",
            "description": "The calculated probability that an option position will not have intrinsic value at expiration.  Calculated using volatility of the underlying."
          },
          "ProbabilityBE": {
            "type": "string",
            "description": "The calculated probability that an option position will have a value at expiration that is equal to or greater than the position’s current cost.  Calculated using volatility of the underlying."
          },
          "ProbabilityITM_IV": {
            "type": "string",
            "description": "The calculated probability that an option position will have intrinsic value at expiration.  Calculated using implied volatility."
          },
          "ProbabilityOTM_IV": {
            "type": "string",
            "description": "The calculated probability that an option position will not have intrinsic value at expiration.  Calculated using implied volatility."
          },
          "ProbabilityBE_IV": {
            "type": "string",
            "description": "The calculated probability that an option position will have a value at expiration that is equal to or greater than the position’s current cost.  Calculated using implied volatility."
          },
          "TheoreticalValue_IV": {
            "type": "string",
            "description": "The value of an option position based on a theoretical model of option prices (e.g., the Bjerksund-Stensland model).  Calculated using implied volatility."
          },
          "DailyOpenInterest": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of open contracts for the option spread.  This value is updated daily."
          },
          "Ask": {
            "type": "string",
            "description": "Ask price. The price a seller is willing to accept for the option spread."
          },
          "Bid": {
            "type": "string",
            "description": "Bid price. The price a buyer is willing to pay for the option spread."
          },
          "Mid": {
            "type": "string",
            "description": "Mathematical average between `Ask` and `Bid`."
          },
          "AskSize": {
            "type": "integer",
            "format": "int32",
            "description": "Amount of security for the given `Ask` price."
          },
          "BidSize": {
            "type": "integer",
            "format": "int32",
            "description": "Amount of security for the given `Bid` price."
          },
          "Close": {
            "type": "string",
            "description": "The last traded price for the option spread.  This value only updates during the official market session."
          },
          "High": {
            "type": "string",
            "description": "Today's highest price for the option spread."
          },
          "Last": {
            "type": "string",
            "description": "The last traded price for the option spread."
          },
          "Low": {
            "type": "string",
            "description": "Today's lowest traded price for the option spread."
          },
          "NetChange": {
            "type": "string",
            "description": "Difference between prior `Close` price and current `Close` price for the option spread."
          },
          "NetChangePct": {
            "type": "string",
            "description": "Percentage changed between prior `Close` price and current `Close` price for the option spread."
          },
          "Open": {
            "type": "string",
            "description": "The initial price for the option spread during the official market session."
          },
          "PreviousClose": {
            "type": "string",
            "description": "Prior day's Closing price."
          },
          "Volume": {
            "type": "integer",
            "format": "int32",
            "description": "The number of contracts traded today."
          },
          "Side": {
            "type": "string",
            "description": "Option Chain Side. It can be `Call`, `Put`, or `Both`."
          },
          "Strikes": {
            "type": "array",
            "description": "The strike prices for the option contracts in the legs of this spread.",
            "items": {
              "type": "string"
            }
          },
          "Legs": {
            "type": "array",
            "description": "The legs of the option spread.",
            "items": {
              "$ref": "#/components/schemas/SpreadLeg"
            }
          }
        }
      },
      "SpreadLeg": {
        "type": "object",
        "description": "Provides information about one leg of the option spread.",
        "properties": {
          "Symbol": {
            "type": "string",
            "description": "Option contract symbol or underlying symbol to be traded for this leg."
          },
          "Ratio": {
            "type": "integer",
            "format": "int32",
            "description": "The number of option contracts or underlying shares for this leg, relative to the other legs.\nA positive number represents a buy trade and a negative number represents a sell trade.\nFor example, a Butterfly spread can be represented using ratios of 1, -2, and 1:\nbuy 1 contract of the first leg, sell 2 contracts of the second leg, and buy 1 contract of the third leg."
          },
          "StrikePrice": {
            "type": "string",
            "description": "The strike price of the option contract for this leg."
          },
          "Expiration": {
            "type": "string",
            "description": "Date on which the contract expires, e.g. `2021-12-17T00:00:00Z`.",
            "format": "date-time"
          },
          "OptionType": {
            "type": "string",
            "description": "The option type. It can be `Call` or `Put`."
          },
          "AssetType": {
            "type": "string",
            "description": "The asset category for this leg."
          }
        }
      },
      "SpreadType": {
        "type": "object",
        "description": "Provides information about a specific spread type.",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name of the spread type."
          },
          "StrikeInterval": {
            "type": "boolean",
            "description": "A true value indicates the spread type is comprised of multiple strike prices. If this is the case, the `strikeInterval` parameter can be used with the [Get Option Chain](#operation/GetOptionChain) and [Get Option Strikes](#operation/GetOptionStrikes) endpoints to specify the interval between the strikes of a spread."
          },
          "ExpirationInterval": {
            "type": "boolean",
            "description": "Indicates whether this spread type uses multiple expirations."
          }
        }
      },
      "SpreadTypes": {
        "type": "object",
        "description": "Provides a list of the available spread types.",
        "properties": {
          "SpreadTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpreadType"
            }
          }
        }
      },
      "Strikes": {
        "type": "object",
        "description": "Provides a list of the available strikes for a specific spread type.",
        "properties": {
          "SpreadType": {
            "type": "string",
            "description": "Name of the spread type for these strikes."
          },
          "Strikes": {
            "type": "array",
            "description": "Array of the strike prices for this spread type. Each element in the Strikes array is an array of strike prices for a single spread.",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "Quote": {
        "type": "object",
        "properties": {
          "Ask": {
            "type": "string",
            "description": "The price at which a security, futures contract, or other financial instrument is offered for sale."
          },
          "AskSize": {
            "type": "string",
            "description": "The number of trading units that prospective sellers are prepared to sell."
          },
          "Bid": {
            "type": "string",
            "description": "The highest price a prospective buyer is prepared to pay at a particular time for a trading unit of a given symbol."
          },
          "BidSize": {
            "type": "string",
            "description": "The number of trading units that prospective buyers are prepared to purchase for a symbol."
          },
          "Close": {
            "type": "string",
            "description": "The closing price of the day."
          },
          "DailyOpenInterest": {
            "type": "string",
            "description": "The total number of open or outstanding (not closed or delivered) options and/or futures contracts that exist on a given day, delivered on a particular day."
          },
          "High": {
            "type": "string",
            "description": "The highest price of the day."
          },
          "Low": {
            "type": "string",
            "description": "The lowest price of the day."
          },
          "High52Week": {
            "type": "string",
            "description": "The highest price of the past 52 weeks."
          },
          "High52WeekTimestamp": {
            "type": "string",
            "description": "Date of the highest price in the past 52 week."
          },
          "Last": {
            "type": "string",
            "description": "The last price at which the symbol traded."
          },
          "MinPrice": {
            "type": "string",
            "description": "The minimum price a commodity futures contract may be traded for the current session."
          },
          "MaxPrice": {
            "type": "string",
            "description": "The maximum price a commodity futures contract may be traded for the current session."
          },
          "FirstNoticeDate": {
            "type": "string",
            "description": "The day after which an investor who has purchased a futures contract may be required to take physical delivery of the contracts underlying commodity."
          },
          "LastTradingDate": {
            "type": "string",
            "description": "The final day that a futures contract may trade or be closed out before the delivery of the underlying asset or cash settlement must occur."
          },
          "Low52Week": {
            "type": "string",
            "description": "The lowest price of the past 52 weeks."
          },
          "Low52WeekTimestamp": {
            "type": "string",
            "description": "Date of the lowest price of the past 52 weeks."
          },
          "MarketFlags": {
            "$ref": "#/components/schemas/MarketFlags"
          },
          "NetChange": {
            "type": "string",
            "description": "The difference between the last displayed price and the previous day's close."
          },
          "NetChangePct": {
            "type": "string",
            "description": "The percentage difference between the current price and previous day's close, expressed as a percentage. For example, a price change from 100 to 103.5 would be expressed as `\"3.5\"`."
          },
          "Open": {
            "type": "string",
            "description": "The opening price of the day."
          },
          "PreviousClose": {
            "type": "string",
            "description": "The closing price of the previous day."
          },
          "PreviousVolume": {
            "type": "string",
            "description": "Daily volume of the previous day."
          },
          "Restrictions": {
            "type": "array",
            "description": "Restriction if any returns array.",
            "items": {
              "type": "string"
            }
          },
          "Symbol": {
            "type": "string",
            "description": "The name identifying the financial instrument for which the data is displayed."
          },
          "TickSizeTier": {
            "type": "string",
            "description": "Trading increment based on a level group."
          },
          "TradeTime": {
            "type": "string",
            "description": "Time of the last trade."
          },
          "Volume": {
            "type": "string",
            "description": "Daily volume in shares/contracts."
          },
          "LastSize": {
            "type": "string",
            "description": "Number of contracts/shares last traded."
          },
          "LastVenue": {
            "type": "string",
            "description": "Exchange name of last trade."
          },
          "VWAP": {
            "type": "string",
            "description": "VWAP (Volume Weighted Average Price) is a measure of the price at which the majority of a given day's trading in a given security took place. It is calculated by adding the dollars traded for the average price of the bar throughout the day (\"avgprice\" x \"number of shares traded\" per bar) and dividing by the total shares traded for the day. The VWAP is calculated throughout the day by the TradeStation data-network."
          }
        },
        "description": "Quote returns current price data for a symbol."
      },
      "QuoteSnapshot": {
        "type": "object",
        "properties": {
          "Quotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Quote"
            }
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuoteError"
            }
          }
        },
        "description": "The full snapshot of the latest quote"
      },
      "QuoteStream": {
        "type": "object",
        "properties": {
          "Ask": {
            "type": "string",
            "description": "The price at which a security, futures contract, or other financial instrument is offered for sale."
          },
          "AskSize": {
            "type": "string",
            "description": "The number of trading units that prospective sellers are prepared to sell."
          },
          "Bid": {
            "type": "string",
            "description": "The highest price a prospective buyer is prepared to pay at a particular time for a trading unit of a given symbol."
          },
          "BidSize": {
            "type": "string",
            "description": "The number of trading units that prospective buyers are prepared to purchase for a symbol."
          },
          "Close": {
            "type": "string",
            "description": "The closing price of the day."
          },
          "DailyOpenInterest": {
            "type": "string",
            "description": "The total number of open or outstanding (not closed or delivered) options and/or futures contracts that exist on a given day, delivered on a particular day."
          },
          "Error": {
            "type": "string",
            "description": "Message if there's an error."
          },
          "High": {
            "type": "string",
            "description": "The highest price of the day."
          },
          "Low": {
            "type": "string",
            "description": "The lowest price of the day."
          },
          "High52Week": {
            "type": "string",
            "description": "The highest price of the past 52 weeks."
          },
          "High52WeekTimestamp": {
            "type": "string",
            "description": "Date of the highest price in the past 52 week."
          },
          "Last": {
            "type": "string",
            "description": "The last price at which the symbol traded."
          },
          "MinPrice": {
            "type": "string",
            "description": "The minimum price a commodity futures contract may be traded for the current session."
          },
          "MaxPrice": {
            "type": "string",
            "description": "The maximum price a commodity futures contract may be traded for the current session."
          },
          "FirstNoticeDate": {
            "type": "string",
            "description": "The day after which an investor who has purchased a futures contract may be required to take physical delivery of the contracts underlying commodity."
          },
          "LastTradingDate": {
            "type": "string",
            "description": "The final day that a futures contract may trade or be closed out before the delivery of the underlying asset or cash settlement must occur."
          },
          "Low52Week": {
            "type": "string",
            "description": "The lowest price of the past 52 weeks."
          },
          "Low52WeekTimestamp": {
            "type": "string",
            "description": "Date of the lowest price of the past 52 weeks."
          },
          "MarketFlags": {
            "$ref": "#/components/schemas/MarketFlags"
          },
          "NetChange": {
            "type": "string",
            "description": "The difference between the last displayed price and the previous day's close."
          },
          "NetChangePct": {
            "type": "string",
            "description": "The percentage difference between the current price and previous day's close,expressed as a decimal. For example, a price change from 100 to 103.5 would be expressed as `\"0.035\"`."
          },
          "Open": {
            "type": "string",
            "description": "The opening price of the day."
          },
          "PreviousClose": {
            "type": "string",
            "description": "The closing price of the previous day."
          },
          "PreviousVolume": {
            "type": "string",
            "description": "Daily volume of the previous day."
          },
          "Restrictions": {
            "type": "array",
            "description": "Restriction if any returns array.",
            "items": {
              "type": "string"
            }
          },
          "Symbol": {
            "type": "string",
            "description": "The name identifying the financial instrument for which the data is displayed."
          },
          "TickSizeTier": {
            "type": "string",
            "description": "Trading increment based on a level group."
          },
          "TradeTime": {
            "type": "string",
            "description": "Time of the last trade."
          },
          "Volume": {
            "type": "string",
            "description": "Daily volume in shares/contracts."
          },
          "LastSize": {
            "type": "string",
            "description": "Number of contracts/shares last traded."
          },
          "LastVenue": {
            "type": "string",
            "description": "Exchange name of last trade."
          },
          "VWAP": {
            "type": "string",
            "description": "VWAP (Volume Weighted Average Price) is a measure of the price at which the majority of a given day's trading in a given security took place. It is calculated by adding the dollars traded for the average price of the bar throughout the day (\"avgprice\" x \"number of shares traded\" per bar) and dividing by the total shares traded for the day. The VWAP is calculated throughout the day by the TradeStation data-network."
          }
        },
        "description": "Quote returns current price data for a symbol."
      },
      "QuoteError": {
        "type": "object",
        "properties": {
          "Symbol": {
            "type": "string",
            "description": "The requested symbol."
          },
          "Error": {
            "type": "string",
            "description": "The Error."
          }
        },
        "description": "Returned when a partial success response includes some errors."
      },
      "Heartbeat1": {
        "type": "object",
        "title": "Heartbeat",
        "properties": {
          "Heartbeat": {
            "description": "The heartbeat, sent to indicate that the stream is alive, although data is not actively being sent. A heartbeat will be sent after 5 seconds on an idle stream.",
            "type": "integer"
          },
          "Timestamp": {
            "description": "Timestamp represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard. \nE.g. `2023-01-01T23:30:30Z`.",
            "type": "string"
          }
        }
      },
      "MarketFlags": {
        "type": "object",
        "properties": {
          "IsBats": {
            "type": "boolean",
            "description": "Is Bats."
          },
          "IsDelayed": {
            "type": "boolean",
            "description": "Is delayed."
          },
          "IsHalted": {
            "type": "boolean",
            "description": "Is halted."
          },
          "IsHardToBorrow": {
            "type": "boolean",
            "description": "Is hard to borrow."
          }
        },
        "description": "Market specific information for a symbol."
      },
      "BidQuote": {
        "type": "object",
        "properties": {
          "TimeStamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the quote, represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard.  E.g. `2022-06-28T12:34:56Z`."
          },
          "Side": {
            "type": "string",
            "description": "The `Bid` side of the quote."
          },
          "Price": {
            "type": "string",
            "description": "The price of the quote."
          },
          "Size": {
            "type": "string",
            "description": "The total number of shares requested by this participant for the Bid."
          },
          "OrderCount": {
            "type": "integer",
            "format": "int32",
            "description": "The number of orders aggregated together for this quote by the participant (market maker or ECN). For options the OrderCount will always be 0 because this information is not reported by the exchange."
          },
          "Name": {
            "type": "string",
            "description": "The name of the participant associated with this quote."
          }
        }
      },
      "AskQuote": {
        "type": "object",
        "properties": {
          "TimeStamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the quote, represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard.  E.g. `2022-06-28T12:34:56Z`."
          },
          "Side": {
            "type": "string",
            "description": "The `Ask` side of the quote."
          },
          "Price": {
            "type": "string",
            "description": "The price of the quote."
          },
          "Size": {
            "type": "string",
            "description": "The total number of shares offered by this participant for the Ask."
          },
          "OrderCount": {
            "type": "integer",
            "format": "int32",
            "description": "The number of orders aggregated together for this quote by the participant (market maker or ECN). For options the OrderCount will always be 0 because this information is not reported by the exchange."
          },
          "Name": {
            "type": "string",
            "description": "The name of the participant associated with this quote."
          }
        }
      },
      "AggregatedBid": {
        "type": "object",
        "properties": {
          "EarliestTime": {
            "type": "string",
            "format": "date-time",
            "description": "The earliest participant timestamp for this quote, represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard.  E.g. `2022-06-28T12:34:01Z`."
          },
          "LatestTime": {
            "type": "string",
            "format": "date-time",
            "description": "The latest participant timestamp for this quote, represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard.  E.g. `2022-06-28T12:34:56Z`."
          },
          "Side": {
            "type": "string",
            "description": "The `Bid` side of the quote."
          },
          "Price": {
            "type": "string",
            "description": "The price of the quote."
          },
          "TotalSize": {
            "type": "string",
            "description": "The total number of shares requested by all participants for the Bid."
          },
          "BiggestSize": {
            "type": "string",
            "description": "The largest number of shares requested by any participant for the Bid."
          },
          "SmallestSize": {
            "type": "string",
            "description": "The smallest number of shares requested by any participant for the Bid."
          },
          "NumParticipants": {
            "type": "integer",
            "format": "int32",
            "description": "The number of participants requesting this Bid price."
          },
          "TotalOrderCount": {
            "type": "integer",
            "format": "int32",
            "description": "The sum of the order counts for all participants requesting this Bid price. For options the TotalOrderCount will always be 0 because this information is not reported by the exchange."
          }
        }
      },
      "AggregatedAsk": {
        "type": "object",
        "properties": {
          "EarliestTime": {
            "type": "string",
            "format": "date-time",
            "description": "The earliest participant timestamp for this quote, represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard.  E.g. `2022-06-28T12:34:01Z`."
          },
          "LatestTime": {
            "type": "string",
            "format": "date-time",
            "description": "The latest participant timestamp for this quote, represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard.  E.g. `2022-06-28T12:34:56Z`."
          },
          "Side": {
            "type": "string",
            "description": "The `Ask` side of the quote."
          },
          "Price": {
            "type": "string",
            "description": "The price of the quote."
          },
          "TotalSize": {
            "type": "string",
            "description": "The total number of shares offered by all participants for the Ask."
          },
          "BiggestSize": {
            "type": "string",
            "description": "The largest number of shares offered by any participant for the Ask."
          },
          "SmallestSize": {
            "type": "string",
            "description": "The smallest number of shares offered by any participant for the Ask."
          },
          "NumParticipants": {
            "type": "integer",
            "format": "int32",
            "description": "The number of participants offering this Ask price."
          },
          "TotalOrderCount": {
            "type": "integer",
            "format": "int32",
            "description": "The sum of the order counts for all participants offering this Ask price. For options the TotalOrderCount will always be 0 because this information is not reported by the exchange."
          }
        }
      },
      "MarketDepthQuote": {
        "type": "object",
        "description": "Contains a single market depth quote for a price, side, and participant.",
        "properties": {
          "Bids": {
            "type": "array",
            "description": "Contains bid quotes, ordered from high to low price",
            "items": {
              "$ref": "#/components/schemas/BidQuote"
            }
          },
          "Asks": {
            "type": "array",
            "description": "Contains ask quotes, ordered from low to high price",
            "items": {
              "$ref": "#/components/schemas/AskQuote"
            }
          }
        }
      },
      "MarketDepthAggregate": {
        "type": "object",
        "description": "Contains an aggregated market depth quote. Each aggregated quote summarizes the participants for that price and side.",
        "properties": {
          "Bids": {
            "type": "array",
            "description": "Contains aggregated bid quotes, ordered from high to low price",
            "items": {
              "$ref": "#/components/schemas/AggregatedBid"
            }
          },
          "Asks": {
            "type": "array",
            "description": "Contains aggregated ask quotes, ordered from low to high price",
            "items": {
              "$ref": "#/components/schemas/AggregatedAsk"
            }
          }
        }
      },
      "Heartbeat2": {
        "type": "object",
        "title": "Heartbeat",
        "properties": {
          "Heartbeat": {
            "description": "The heartbeat, sent to indicate that the stream is alive, although data is not actively being sent. A heartbeat will be sent after 5 seconds on an idle stream.",
            "type": "integer"
          },
          "Timestamp": {
            "description": "Timestamp represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard. \nE.g. `2023-01-01T23:30:30Z`.",
            "type": "string"
          }
        }
      },
      "AccountID1": {
        "title": "AccountID",
        "type": "string",
        "description": "TradeStation Account ID."
      },
      "ErrorResponse1": {
        "title": "ErrorResponse",
        "type": "object",
        "description": "Contains error details.",
        "properties": {
          "Error": {
            "description": "Error Title, can be any of `BadRequest`, `Unauthorized`, `NotFound`, `Forbidden`, `TooManyRequests`, `InternalServerError`, `NotImplemented`, `ServiceUnavailable`, or `GatewayTimeout`.",
            "type": "string"
          },
          "Message": {
            "description": "The description of the error.",
            "type": "string"
          }
        }
      },
      "StreamOrderErrorResponse": {
        "title": "ErrorResponse",
        "type": "object",
        "description": "Contains error details.",
        "properties": {
          "Error": {
            "description": "Error Title, can be any of `Forbidden`, `InternalServerError`, `ServiceUnavailable`, `GatewayTimeout`, or `Failed`.",
            "type": "string"
          },
          "Message": {
            "description": "The description of the error.",
            "type": "string"
          },
          "AccountID": {
            "description": "The requested Account ID. Returned with the `Forbidden` error type.",
            "type": "string"
          }
        }
      },
      "StreamOrderByOrderIdErrorResponse": {
        "title": "ErrorResponse",
        "type": "object",
        "description": "Contains error details.",
        "properties": {
          "Error": {
            "description": "Error Title, can be any of `Forbidden`, `InternalServerError`, `ServiceUnavailable`, `GatewayTimeout`, `Failed`, or `NotFound`.",
            "type": "string"
          },
          "Message": {
            "description": "The description of the error.",
            "type": "string"
          },
          "AccountID": {
            "description": "The requested Account ID. Returned with the `Forbidden` error type.",
            "type": "string"
          },
          "OrderID": {
            "description": "The order ID of this order.",
            "type": "string"
          }
        }
      },
      "StreamPositionsErrorResponse": {
        "title": "ErrorResponse",
        "type": "object",
        "description": "Contains error details.",
        "properties": {
          "Error": {
            "description": "Error Title, can be any of `Forbidden`, `InternalServerError`, `ServiceUnavailable`, `GatewayTimeout`, or `Failed`.",
            "type": "string"
          },
          "Message": {
            "description": "The description of the error.",
            "type": "string"
          },
          "AccountID": {
            "description": "The requested Account ID. Returned with the `Forbidden` error type.",
            "type": "string"
          }
        }
      },
      "MarketActivationRules1": {
        "title": "MarketActivationRules",
        "type": "object",
        "properties": {
          "RuleType": {
            "type": "string",
            "description": "Type of the activation rule. Currently only supports `Price`."
          },
          "Symbol": {
            "type": "string",
            "description": "Symbol that the rule is based on."
          },
          "Predicate": {
            "type": "string",
            "description": "The predicate comparison for the market rule type. E.g. `Lt` (less than).\n- `Lt` - Less Than\n- `Lte` - Less Than or Equal\n- `Gt` - Greater Than\n- `Gte` - Greater Than or Equal"
          },
          "TriggerKey": {
            "type": "string",
            "description": "The ticks behavior for the activation rule. Rule descriptions can be obtained from [Get Activation Triggers](#operation/GetActivationTriggers).",
            "enum": [
              "STT",
              "STTN",
              "SBA",
              "SAB",
              "DTT",
              "DTTN",
              "DBA",
              "DAB",
              "TTT",
              "TTTN",
              "TBA",
              "TAB"
            ]
          },
          "Price": {
            "type": "string",
            "description": "Valid only for RuleType=\"Price\", the price at which the rule will trigger when the price hits ticks as specified by TriggerKey."
          },
          "LogicOperator": {
            "type": "string",
            "description": "Relation with the previous activation rule when given a list of MarketActivationRules. Ignored for the first MarketActivationRule.",
            "enum": [
              "And",
              "Or"
            ]
          }
        }
      },
      "Order1": {
        "title": "Order",
        "type": "object",
        "properties": {
          "AccountID": {
            "$ref": "#/components/schemas/AccountID1"
          },
          "AdvancedOptions": {
            "type": "string",
            "description": "Will display a value when the order has advanced order rules associated with it or\nis part of a bracket order. Valid Values are: `CND`, `AON`, `TRL`, `SHWQTY`, `DSCPR`, `NON`, `PEGVAL`, `BKO`, `PSO`\n* `AON` - All or None\n* `BKO` - Book Only\n* `CND` - Activation Rule\n* `DSCPR=<Price>` - Discretionary price\n* `NON` - Non-Display\n* `PEGVAL=<Value>` - Peg Value\n* `PSO` - Add Liquidity\n* `SHWQTY=<quantity>` - Show Only\n* `TRL` - Trailing Stop"
          },
          "ClosedDateTime": {
            "type": "string",
            "description": "The Closed Date Time of this order.",
            "format": "date-time"
          },
          "CommissionFee": {
            "type": "string",
            "description": "The actual brokerage commission cost and routing fees (if applicable) for a trade based on the number of shares or contracts."
          },
          "ConditionalOrders": {
            "type": "array",
            "description": "Describes the relationship between linked orders in a group and this order.",
            "items": {
              "$ref": "#/components/schemas/OrderRelationship1"
            }
          },
          "ConversionRate": {
            "type": "string",
            "description": "Indicates the rate used to convert from the currency of the symbol to the currency of the account."
          },
          "Currency": {
            "type": "string",
            "description": "Currency used to complete the Order."
          },
          "Duration": {
            "type": "string",
            "description": "The amount of time for which an order is valid."
          },
          "FilledPrice": {
            "type": "string",
            "description": "At the top level, this is the average fill price. For expanded levels, this is the actual execution price."
          },
          "GoodTillDate": {
            "type": "string",
            "description": "For GTC, GTC+, GTD and GTD+ order durations. The date the order will expire on in UTC format. The time portion, if \"T00:00:00Z\", should be ignored.",
            "format": "date-time"
          },
          "GroupName": {
            "type": "string",
            "description": "It can be used to identify orders that are part of the same bracket."
          },
          "Legs": {
            "type": "array",
            "description": "An array of legs associated with this order.",
            "items": {
              "$ref": "#/components/schemas/OrderLeg1"
            }
          },
          "MarketActivationRules": {
            "type": "array",
            "description": "Does not apply to Crypto orders.",
            "items": {
              "$ref": "#/components/schemas/MarketActivationRules1"
            }
          },
          "TimeActivationRules": {
            "type": "array",
            "description": "Does not apply to Crypto orders.",
            "items": {
              "$ref": "#/components/schemas/TimeActivationRules1"
            }
          },
          "LimitPrice": {
            "type": "string",
            "description": "The limit price for Limit and Stop Limit orders."
          },
          "OpenedDateTime": {
            "type": "string",
            "description": "Time the order was placed.",
            "format": "date-time"
          },
          "OrderID": {
            "type": "string",
            "description": "The order ID of this order."
          },
          "OrderType": {
            "$ref": "#/components/schemas/OrderType1"
          },
          "PriceUsedForBuyingPower": {
            "type": "string",
            "description": "Price used for the buying power calculation of the order."
          },
          "RejectReason": {
            "type": "string",
            "description": "If an order has been rejected, this will display the rejection. reason"
          },
          "Routing": {
            "type": "string",
            "description": "Identifies the routing selection made by the customer when placing the order."
          },
          "ShowOnlyQuantity": {
            "type": "string",
            "description": "Hides the true number of shares intended to be bought or sold. Valid for `Limit`, and `StopLimit` order types. Not valid for all exchanges."
          },
          "Spread": {
            "type": "string",
            "description": "The spread type for an option order."
          },
          "Status": {
            "$ref": "#/components/schemas/Status1"
          },
          "StatusDescription": {
            "type": "string",
            "description": "Description of the status."
          },
          "StopPrice": {
            "type": "string",
            "description": "The stop price for StopLimit and StopMarket orders."
          },
          "TrailingStop": {
            "$ref": "#/components/schemas/TrailingStop1"
          },
          "UnbundledRouteFee": {
            "type": "string",
            "description": "Only applies to equities.  Will contain a value if the order has received a routing fee."
          }
        },
        "description": "A brokerage order."
      },
      "OrderLeg1": {
        "title": "OrderLeg",
        "type": "object",
        "properties": {
          "AssetType": {
            "type": "string",
            "description": "Indicates the asset type of the order.",
            "enum": [
              "UNKNOWN",
              "STOCK",
              "STOCKOPTION",
              "FUTURE",
              "FUTUREOPTION",
              "FOREX",
              "CURRENCYOPTION",
              "INDEX",
              "INDEXOPTION",
              "CRYPTO"
            ]
          },
          "BuyOrSell": {
            "type": "string",
            "description": "Identifies whether the order is a buy or sell. Valid values are `Buy`, `Sell`, `SellShort`, or `BuyToCover`."
          },
          "ExecQuantity": {
            "type": "string",
            "description": "Number of shares that have been executed."
          },
          "ExecutionPrice": {
            "type": "string",
            "description": "The price at which order execution occurred."
          },
          "ExpirationDate": {
            "type": "object",
            "description": "The expiration date of the future or option symbol."
          },
          "OpenOrClose": {
            "type": "string",
            "description": "What kind of order leg - Opening or Closing."
          },
          "OptionType": {
            "type": "string",
            "description": "Present for options. Valid values are \"CALL\" and \"PUT\"."
          },
          "QuantityOrdered": {
            "type": "string",
            "description": "Number of shares or contracts being purchased or sold."
          },
          "QuantityRemaining": {
            "type": "string",
            "description": "In a partially filled order, this is the number of shares or contracts that were unfilled."
          },
          "StrikePrice": {
            "type": "string",
            "description": "Present for options. The price at which the holder of an options contract can buy or sell the underlying asset."
          },
          "Symbol": {
            "type": "string",
            "description": "Symbol for the leg order."
          },
          "Underlying": {
            "type": "string",
            "description": "Underlying Symbol associated. Only applies to Futures and Options."
          }
        },
        "description": "OrderLeg is an object returned from WebAPI."
      },
      "OrderRelationship1": {
        "title": "OrderRelationship",
        "type": "object",
        "properties": {
          "OrderID": {
            "type": "string",
            "description": "The order ID of the linked order."
          },
          "Relationship": {
            "type": "string",
            "description": "Describes the relationship of a linked order within a group order to the current returned order. Valid Values are: `BRK`, `OSP` (linked parent), `OSO` (linked child), and `OCO`."
          }
        },
        "description": "Describes the relationship between linked orders in a group and this order."
      },
      "OrderType1": {
        "title": "OrderType",
        "type": "string",
        "description": "The order type of the order.",
        "enum": [
          "Limit",
          "StopMarket",
          "Market",
          "StopLimit"
        ]
      },
      "Status1": {
        "title": "Status",
        "type": "string",
        "description": "Status defines an Status type\n- ACK - Received\n- BRO - Broken\n- CAN - Canceled\n- EXP - Expired\n- FLL - Filled\n- FLP - Partial Fill (UROut)\n- FPR - Partial Fill (Alive)\n- LAT - Too Late to Cancel\n- OPN - Sent\n- OUT - UROut\n- REJ - Rejected\n- UCH - Replaced\n- UCN - Cancel Sent\n- TSC – Trade Server Canceled\n- RJC – Cancel Request Rejected\n- DON – Queued\n- RSN - Replace Sent\n- CND – Condition Met\n- OSO - OSO Order\n- SUS - Suspended",
        "enum": [
          "ACK",
          "BRO",
          "CAN",
          "EXP",
          "FLL",
          "FLP",
          "FPR",
          "LAT",
          "OPN",
          "OUT",
          "REJ",
          "UCH",
          "UCN",
          "TSC",
          "RJC",
          "DON",
          "RSN",
          "CND",
          "OSO",
          "SUS"
        ]
      },
      "TimeActivationRules1": {
        "title": "TimeActivationRules",
        "type": "object",
        "description": "Advanced option for an order. The date portion is not used for a Time Activation rule and is returned as \"0001-01-01\".",
        "properties": {
          "TimeUtc": {
            "$ref": "#/components/schemas/TimeUtc1"
          }
        }
      },
      "TimeUtc1": {
        "title": "TimeUtc",
        "type": "object",
        "description": "Timestamp represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard.\nFor time activated orders, the date portion is required but not relevant. E.g. `0001-01-01T23:30:30Z`."
      },
      "TrailingStop1": {
        "title": "TrailingStop",
        "type": "object",
        "properties": {
          "Amount": {
            "type": "string",
            "description": "Currency Offset from current price. Note: Mutually exclusive with Percent."
          },
          "Percent": {
            "type": "string",
            "description": "Percentage offset from current price. Note: Mutually exclusive with Amount."
          }
        },
        "description": "TrailingStop offset; amount or percent."
      },
      "Heartbeat3": {
        "title": "Heartbeat",
        "type": "object",
        "properties": {
          "Heartbeat": {
            "type": "integer",
            "description": "The heartbeat, sent to indicate that the stream is alive, although data is not actively being sent. A heartbeat will be sent after 5 seconds on an idle stream."
          },
          "Timestamp": {
            "type": "string",
            "description": "Timestamp represented as an RFC3339 formatted date, a profile of the ISO 8601 date standard. \nE.g. `2023-01-01T23:30:30Z`."
          }
        }
      },
      "StreamStatus": {
        "title": "StreamStatus",
        "type": "object",
        "properties": {
          "StreamStatus": {
            "type": "string",
            "description": "Provides information about the stream status. When the initial snapshot is complete, \"EndSnapshot\" is returned. When the server is about to shut down, \"GoAway\" is returned to indicate that the stream will close because of server shutdown, and that a new stream will need to be started by the client."
          }
        }
      },
      "PositionDirection1": {
        "title": "PositionDirection",
        "type": "string",
        "description": "Specifies if the position is Long or Short.",
        "enum": [
          "Long",
          "Short"
        ]
      },
      "Position": {
        "title": "Position",
        "type": "object",
        "properties": {
          "AccountID": {
            "$ref": "#/components/schemas/AccountID1"
          },
          "AssetType": {
            "type": "string",
            "description": "Indicates the asset type of the position.",
            "enum": [
              "STOCK",
              "STOCKOPTION",
              "FUTURE",
              "INDEXOPTION"
            ]
          },
          "AveragePrice": {
            "type": "string",
            "description": "The average price of the position currently held."
          },
          "Bid": {
            "type": "string",
            "description": "The highest price a prospective buyer is prepared to pay at a particular time for a trading unit of a given symbol."
          },
          "Ask": {
            "type": "string",
            "description": "The price at which a security futures contract or other financial instrument is offered for sale."
          },
          "ConversionRate": {
            "type": "string",
            "description": "The currency conversion rate that is used in order to convert from the currency of the symbol to the currency of the account."
          },
          "Deleted": {
            "type": "boolean",
            "description": "Indicates that a position has been deleted (i.e., closed) since the last stream update. This property is returned only when the value is true, and only alongside a valid `PositionID` (other properties are omitted)."
          },
          "DayTradeRequirement": {
            "type": "string",
            "description": "(Futures) DayTradeMargin used on open positions. Currently only calculated for futures positions. Other asset classes will have a 0 for this value."
          },
          "ExpirationDate": {
            "type": "string",
            "description": "The UTC formatted expiration date of the future or option symbol in the country the contract is traded in. The time portion of the value should be ignored."
          },
          "InitialRequirement": {
            "type": "string",
            "description": "Only applies to future and option positions. The margin account balance denominated in the symbol currency required for entering a position on margin."
          },
          "Last": {
            "type": "string",
            "description": "The last price at which the symbol traded."
          },
          "LongShort": {
            "$ref": "#/components/schemas/PositionDirection1"
          },
          "MarkToMarketPrice": {
            "type": "string",
            "description": "Only applies to equity and option positions. The MarkToMarketPrice value is the weighted average of the previous close price for the position quantity held overnight and the purchase price of the position quantity opened during the current market session. This value is used to calculate TodaysProfitLoss."
          },
          "MarketValue": {
            "type": "string",
            "description": "The actual market value denominated in the symbol currency of the open position. This value is updated in real-time."
          },
          "PositionID": {
            "type": "string",
            "description": "A unique identifier for the position."
          },
          "Quantity": {
            "type": "string",
            "description": "The number of shares or contracts for a particular position. This value is negative for short positions."
          },
          "Symbol": {
            "type": "string",
            "description": "Symbol of the position."
          },
          "Timestamp": {
            "type": "string",
            "description": "Time the position was entered.",
            "format": "date-time"
          },
          "TodaysProfitLoss": {
            "type": "string",
            "description": "Only applies to equity and option positions. This value will be included in the payload to convey the unrealized profit or loss denominated in the account currency on the position held calculated using the MarkToMarketPrice."
          },
          "TotalCost": {
            "type": "string",
            "description": "The total cost denominated in the account currency of the open position."
          },
          "UnrealizedProfitLoss": {
            "type": "string",
            "description": "The unrealized profit or loss denominated in the symbol currency on the position held calculated based on the average price of the position."
          },
          "UnrealizedProfitLossPercent": {
            "type": "string",
            "description": "The unrealized profit or loss on the position expressed as a percentage of the initial value of the position."
          },
          "UnrealizedProfitLossQty": {
            "type": "string",
            "description": "The unrealized profit or loss denominated in the account currency divided by the number of shares contracts or units held."
          }
        }
      },
      "StreamBalancesErrorResponse": {
        "title": "ErrorResponse",
        "type": "object",
        "description": "Contains error details.",
        "properties": {
          "Error": {
            "description": "Error Title, can be any of `Forbidden`, `InternalServerError`, `ServiceUnavailable`, `GatewayTimeout`, or `Failed`.",
            "type": "string"
          },
          "Message": {
            "description": "The description of the error.",
            "type": "string"
          },
          "AccountID": {
            "description": "The requested Account ID. Returned with the `Forbidden` error type.",
            "type": "string"
          }
        }
      },
      "Balance1": {
        "type": "object",
        "properties": {
          "AccountID": {
            "$ref": "#/components/schemas/AccountID1"
          },
          "AccountType": {
            "type": "string",
            "description": "The type of the account.",
            "enum": [
              "CASH",
              "MARGIN",
              "FUTURES",
              "CRYPTO",
              "DVP"
            ]
          },
          "BalanceDetail": {
            "$ref": "#/components/schemas/BalanceDetail1"
          },
          "BuyingPower": {
            "type": "string",
            "description": "Buying Power available in the account."
          },
          "CashBalance": {
            "type": "string",
            "description": "Indicates the value of real-time cash balance."
          },
          "Commission": {
            "type": "string",
            "description": "The brokerage commission cost and routing fees (if applicable) for a trade based on the number of shares or contracts."
          },
          "CurrencyDetails": {
            "type": "array",
            "description": "Only applies to futures. Collection of properties that describe balance characteristics in different currencies.",
            "items": {
              "$ref": "#/components/schemas/CurrencyDetail"
            }
          },
          "Equity": {
            "type": "string",
            "description": "The real-time equity of the account."
          },
          "MarketValue": {
            "type": "string",
            "description": "Market value of open positions."
          },
          "TodaysProfitLoss": {
            "type": "string",
            "description": "Unrealized profit and loss, for the current trading day, of all open positions."
          },
          "UnclearedDeposit": {
            "type": "string",
            "description": "The total of uncleared checks received by Tradestation for deposit."
          }
        },
        "description": "Contains realtime balance information for a single account."
      },
      "BalanceDetail1": {
        "type": "object",
        "properties": {
          "CostOfPositions": {
            "type": "string",
            "description": "(Equities) The cost used to calculate today's P/L."
          },
          "DayTradeExcess": {
            "type": "string",
            "description": "(Equities): (Buying Power Available - Buying Power Used) / Buying Power Multiplier. (Futures): (Cash + UnrealizedGains) - Buying Power Used."
          },
          "DayTradeMargin": {
            "type": "string",
            "description": "(Futures) Money field representing the current total amount of futures day trade margin."
          },
          "DayTradeOpenOrderMargin": {
            "type": "string",
            "description": "(Futures) Money field representing the current amount of money reserved for open orders."
          },
          "DayTrades": {
            "type": "string",
            "description": "(Equities) The number of day trades placed in the account within the previous 4 trading days. A day trade refers to buying then selling or selling short then buying to cover the same security on the same trading day."
          },
          "InitialMargin": {
            "type": "string",
            "description": "(Futures) Sum (Initial Margins of all positions in the given account)."
          },
          "MaintenanceMargin": {
            "type": "strings",
            "description": "(Futures) Indicates the value of real-time maintenance margin."
          },
          "MaintenanceRate": {
            "type": "string",
            "description": "Maintenance Margin Rate."
          },
          "MarginRequirement": {
            "type": "string",
            "description": "(Futures) Indicates the value of real-time account margin requirement."
          },
          "OpenOrderMargin": {
            "type": "string",
            "description": "(Futures) The dollar amount of Open Order Margin for the given futures account."
          },
          "OptionBuyingPower": {
            "type": "string",
            "description": "(Equities) The intraday buying power for options."
          },
          "OptionsMarketValue": {
            "type": "string",
            "description": "(Equities) Market value of open positions."
          },
          "OvernightBuyingPower": {
            "type": "string",
            "description": "(Equities) Overnight Buying Power (Regulation T) at the start of the trading day."
          },
          "RealizedProfitLoss": {
            "type": "string",
            "description": "Indicates the value of real-time account realized profit or loss."
          },
          "RequiredMargin": {
            "type": "string",
            "description": "(Equities) Total required margin for all held positions."
          },
          "SecurityOnDeposit": {
            "type": "string",
            "description": "(Futures) The value of special securities that are deposited by the customer with the clearing firm for the sole purpose of increasing purchasing power in their trading account. This number will be reset daily by the account balances clearing file. The entire value of this field will increase purchasing power."
          },
          "TodayRealTimeTradeEquity": {
            "type": "string",
            "description": "(Futures) The unrealized P/L for today. Unrealized P/L - BODOpenTradeEquity."
          },
          "TradeEquity": {
            "type": "string",
            "description": "(Futures) The dollar amount of unrealized profit and loss for the given futures account. Same value as RealTimeUnrealizedGains."
          },
          "UnrealizedProfitLoss": {
            "type": "string",
            "description": "Indicates the value of real-time account unrealized profit or loss."
          },
          "UnsettledFunds": {
            "type": "string",
            "description": "Unsettled Funds are funds that have been closed but not settled."
          }
        },
        "description": "Contains real-time balance information that varies according to account type."
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "API v3",
      "tags": [
        "MarketData",
        "Brokerage",
        "Order Execution"
      ]
    },
    {
      "name": "API v2",
      "tags": [
        "marketdata"
      ]
    }
  ]
}
